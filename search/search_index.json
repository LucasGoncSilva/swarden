{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"sWarden  <p>Created in Django as an MVC Framework, sWarden works as a real prototype of an online password and credential manager. This project uses security concepts in a practical and descriptive way.</p> <p>Both class-based views and function-based views were used, so that the different paradigms implemented by the Framework can be exemplified in a practical way.</p> <p>It adds to Django's security measures an initial logic of what a honeypot would be, more than 150 test cases including 4 load tests to certify the integrity of the system and encryption of the data stored in the database, all applicable in Docker.</p>"},{"location":"#stack","title":"Stack","text":""},{"location":"#to-do-list","title":"To-Do List","text":"<p>To check the to-do list and keep track of future implementations please check To-Do List over here.</p>"},{"location":"#arch","title":"Arch","text":"<p>The architecture can be detailed in general terms on two levels: web and database. The mechanics are abstracted to a general level, avoiding in-depth details that confuse rather than aggregate, presenting a behavioral vision on a \u201cmacro\u201d scale following the flow of data without focusing on the \u201cmicro\u201d, such as each action of each function. Below is the flow of information on the Web, followed by the structuring and architecture of the Database (For more details on the Database go to https://dbdocs.io/lucasgoncsilva04/SWARDEN):</p>"},{"location":"#web","title":"Web","text":""},{"location":"#db","title":"DB","text":""},{"location":"#contrib","title":"Contrib","text":"<p>Before copying anything, we recommend you to read our guidelines: Code of Conduct, Contributing, Security and Support.</p> <p>Once done with it, fork this repo to create a copy at your repos and clone your version:</p> Bash<pre><code>git clone &lt;YOUR_GITHUB_SWARDEN_URL&gt;\ncd swarden\n</code></pre> <p>Now you are ready to follow the next step, described below.</p>"},{"location":"#running","title":"Running","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>uv &gt;= 0.5.13</li> <li>Python &gt;= 3.9</li> <li>Docker &gt;= 27</li> </ul> <p>uv is basically the best project and dependency manager for Python. Check out the installation methods here.</p>"},{"location":"#environment-variables","title":"Environment Variables","text":"<p>Before starting with development and commands, it is important to define the environment variables in your development environment. Below is a list of which ones to set:</p> Name Type Mandatory Default Description <code>DJANGO_SETTINGS_MODULE</code> <code>str</code> Optional <code>'CORE.settings.dev'</code> Defines the settings file to be used <code>CAPTCHA_TEST_MODE</code> <code>bool</code> Optional <code>True</code> Allows captcha bypass on login <code>DATABASE_NAME</code> <code>str</code> Optional <code>'postgres'</code> Defines database access name <code>DATABASE_USER</code> <code>str</code> Optional <code>'postgres'</code> Defines database access user <code>DATABASE_PASSWORD</code> <code>str</code> Optional <code>'postgres'</code> Defines database access password <code>DATABASE_HOST</code> <code>str</code> Optional <code>'localhost'</code> Defines database access host <code>ADMIN</code> <code>str</code> Optional <code>'__manager__'</code> Defines URI path to admin site <code>DEBUG</code> <code>bool</code> Optional <code>True</code> Defines traceback and debug infos at browser <code>SECRET_KEY</code> <code>str</code> Optional <code>'cw%t5...ba^m3)'</code> Defines general security stuff <code>ALLOWED_HOSTS</code> <code>list[str]</code> Optional <code>['*']</code> Defines valid URLs to be used <p>Once ok with env vars, sync the uv with <code>uv.lock</code> - this will create a <code>.venv</code> by itself:</p> Bash<pre><code>uv sync\n</code></pre> <p>From here to below, run under <code>SWARDEN/</code> dir.</p>"},{"location":"#start-dockers-database","title":"Start Docker's Database","text":"Bash<pre><code>docker run --name psql_swarden -p 5432:5432 \\\n    -e POSTGRES_USER=postgres \\\n    -e POSTGRES_PASSWORD=postgres \\\n    -e POSTGRES_DB=postgres \\\n    -d postgres\n</code></pre>"},{"location":"#startsearch-for-database-migrations","title":"Start/Search for Database Migrations","text":"Bash<pre><code>uv run manager.py makemigrations\n</code></pre>"},{"location":"#update-database-struct-based-on-new-migrations","title":"Update Database Struct Based on New Migrations","text":"Bash<pre><code>uv run manager.py migrate\n</code></pre>"},{"location":"#run-automated-tests","title":"Run Automated Tests","text":"Bash<pre><code>uv run manager.py test [--parallel N]  # N means num, integer\n</code></pre>"},{"location":"#run-automated-tests-w-coverage","title":"Run Automated Tests w/ Coverage","text":"Bash<pre><code>uv run manager.py testwithcoverage\n</code></pre>"},{"location":"#populate-database","title":"Populate Database","text":"Bash<pre><code>uv run manager.py populateuser  # For users\n\n# And then\n\nuv run manager.py populatesecret  # For secrets\n</code></pre>"},{"location":"#start-local-server","title":"Start Local Server","text":"Bash<pre><code>uv run manager.py runserver  # Default Django's server\n\n# OR\n\nuv run gunicorn CORE.wsgi:application --bind 0.0.0.0:8000  # Gunicorn at local\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is under MPLv2 - Mozilla Public License Version 2.0. Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.</p>"},{"location":"CHANGELOG/","title":"Changelog and Update History","text":"<p>A changelog is a document that tracks the history of changes in a project, typically organized by version numbers. It serves as a transparent record for developers, users, and contributors, detailing what has been added, updated, fixed, removed, or addressed in terms of security. By offering a structured overview, changelogs play a vital role in maintaining trust, facilitating communication, and easing version management.</p> <p>Changelogs provide a transparent narrative of a project\u2019s evolution. They ensure users can make informed decisions about updating software and give contributors insights into the project\u2019s direction. For development teams, changelogs are invaluable for version control and accountability. Well-maintained changelogs foster trust, improve user engagement, and ensure smoother project management for all stakeholders.</p> <p>Key Components of a Changelog:</p> <ul> <li>Adds: This section highlights new features, tools, or functionalities introduced to the project. For example, a CLI tool may include a new command or configuration option. Clearly listing these additions allows users to discover improvements and expanded capabilities.</li> <li>Updates: Updates reflect modifications or enhancements to existing features, such as performance optimizations or UI/UX improvements. These entries help users understand what has evolved, ensuring they benefit from improved usability or efficiency.</li> <li>Fixes: Fixes document the resolution of bugs or issues. By specifying what was corrected, users gain confidence that problems they may have encountered have been addressed, reducing frustration.</li> <li>Deprecates: When something is replaced but is still usable, this thing is marked as deprecated and annotated here.</li> <li>Removes: Sometimes, features or functionalities are deprecated or removed. Listing these changes prevents surprises, enabling users to adapt and refactor their workflows accordingly.</li> <li>Security: Security changes focus on vulnerabilities that have been mitigated or resolved. This section reassures users that the project maintains high standards for safety and data protection.</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at swardenpassmanager@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guidelines","text":"<p>Pull requests, bug reports, and all other forms of contribution are welcomed and highly encouraged!</p> <p>This guide serves to set clear expectations for everyone involved with the project so that we can improve it together while also creating a welcoming space for everyone to participate. Following these guidelines will help ensure a positive experience for contributors and maintainers.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please review our Code of Conduct. It is in effect at all times. We expect it to be honored by everyone who contributes to this project. Acting like an asshole will not be tolerated.</p>"},{"location":"CONTRIBUTING/#asking-questions","title":"Asking Questions","text":"<p>See our Support Guide. In short, GitHub issues are not the appropriate place to debug your specific project, but should be reserved for filing bugs and feature requests.</p>"},{"location":"CONTRIBUTING/#opening-an-issue","title":"Opening an Issue","text":"<p>Before creating an issue, check if you are using the latest version of the project. If you are not up-to-date, see if updating fixes your issue first.</p>"},{"location":"CONTRIBUTING/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>Review our Security Policy. Do not file a public issue for security vulnerabilities.</p>"},{"location":"CONTRIBUTING/#bug-reports-and-other-issues","title":"Bug Reports and Other Issues","text":"<p>A great way to contribute to the project is to send a detailed issue when you encounter a problem. We always appreciate a well-written, thorough bug report.</p> <p>In short, since you are most likely a developer, provide a ticket that you would like to receive.</p> <ul> <li> <p>Review the documentation and Support Guide before opening a new issue.</p> </li> <li> <p>Do not open a duplicate issue! Search through existing issues to see if your issue has previously been reported. If your issue exists, comment with any additional information you have. You may simply note \"I have this problem too\", which helps prioritize the most common problems and requests.</p> </li> <li> <p>Prefer using reactions, not comments, if you simply want to \"+1\" an existing issue.</p> </li> <li> <p>Fully complete the provided issue template. The bug report template requests all the information we need to quickly and efficiently address your issue. Be clear, concise, and descriptive. Provide as much information as you can, including steps to reproduce, stack traces, compiler errors, library versions, OS versions, and screenshots (if applicable).</p> </li> <li> <p>Use GitHub-flavored Markdown. Especially put code blocks and console outputs in backticks (```). This improves readability.</p> </li> </ul>"},{"location":"CONTRIBUTING/#feature-requests","title":"Feature Requests","text":"<p>Feature requests are welcome! While we will consider all requests, we cannot guarantee your request will be accepted. We want to avoid feature creep. Your idea may be great, but also out-of-scope for the project. If accepted, we cannot make any commitments regarding the timeline for implementation and release. However, you are welcome to submit a pull request to help!</p> <ul> <li> <p>Do not open a duplicate feature request. Search for existing feature requests first. If you find your feature (or one very similar) previously requested, comment on that issue.</p> </li> <li> <p>Fully complete the provided issue template. The feature request template asks for all necessary information for us to begin a productive conversation.</p> </li> <li> <p>Be precise about the proposed outcome of the feature and how it relates to existing features. Include implementation details if possible.</p> </li> </ul>"},{"location":"CONTRIBUTING/#triaging-issues","title":"Triaging Issues","text":"<p>You can triage issues which may include reproducing bug reports or asking for additional information, such as version numbers or reproduction instructions. Any help you can provide to quickly resolve an issue is very much appreciated!</p>"},{"location":"CONTRIBUTING/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>We love pull requests! Before forking the repo and creating a pull request for non-trivial changes, it is usually best to first open an issue to discuss the changes, or discuss your intended approach for solving the problem in the comments for an existing issue.</p> <p>For most contributions, after your first pull request is accepted and merged, you will be invited to the project and given push access.</p> <p>Note: All contributions will be licensed under the project's license.</p> <ul> <li> <p>Smaller is better. Submit one pull request per bug fix or feature. A pull request should contain isolated changes pertaining to a single bug fix or feature implementation. Do not refactor or reformat code that is unrelated to your change. It is better to submit many small pull requests rather than a single large one. Enormous pull requests will take enormous amounts of time to review, or may be rejected altogether.</p> </li> <li> <p>Coordinate bigger changes. For large and non-trivial changes, open an issue to discuss a strategy with the maintainers. Otherwise, you risk doing a lot of work for nothing!</p> </li> <li> <p>Prioritize understanding over cleverness. Write code clearly and concisely. Remember that source code usually gets written once and read often. Ensure the code is clear to the reader. The purpose and logic should be obvious to a reasonably skilled developer, otherwise you should add a comment that explains it.</p> </li> <li> <p>Follow existing coding style and conventions. Keep your code consistent with the style, formatting, and conventions in the rest of the code base. When possible, these will be enforced with a linter. Consistency makes it easier to review and modify in the future.</p> </li> <li> <p>Include test coverage. Add unit tests or UI tests when possible. Follow existing patterns for implementing tests.</p> </li> <li> <p>Update the example project if one exists to exercise any new functionality you have added.</p> </li> <li> <p>Add documentation. Document your changes with code doc comments or in existing guides.</p> </li> <li> <p>Update the CHANGELOG for all enhancements and bug fixes. Include the corresponding issue number if one exists, and your GitHub username. (example: \"- Fixed crash in profile view. #123 @jessesquires\")</p> </li> <li> <p>Use the repo's correct branch. Branch from <code>main</code> and submit your pull request to <code>PR</code>:</p> </li> </ul>  Do    Do **NOT**   <pre><code>%%{init: { 'logLevel': 'debug', 'themeVariables': {\n            'git0': '#0077ff77',\n            'git1': '#00770077',\n            'git2': '#ffaa0077'\n    } } }%%\n\ngitGraph\n    commit id: \" \" tag: \"v1.0.0\"\n    branch stg\n    branch PR\n    branch your_dev\n    checkout your_dev\n    commit id: \"[feat] XYZ\"\n    commit id: \"[fix] ABC\"\n    checkout PR\n    merge your_dev tag: \"PR: Lorem Ipsum\"\n    checkout stg\n    merge PR tag: \"v1.1.0-stg\"\n    checkout main\n    merge stg tag: \"v1.1.0\"</code></pre> <pre><code>%%{init: { 'logLevel': 'debug', 'themeVariables': {\n            'git0': '#0077ff77',\n            'git1': '#00770077',\n            'git2': '#ffaa0077'\n    } } }%%\n\ngitGraph\n    commit id: \" \" tag: \"v1.0.0\"\n    branch stg\n    branch PR\n    branch your_dev\n    checkout your_dev\n    commit id: \"[feat] XYZ\"\n    commit id: \"[fix] ABC\"\n    checkout main\n    merge your_dev tag: \"PR: Lorem Ipsum\"</code></pre> <pre><code>%%{init: { 'logLevel': 'debug', 'themeVariables': {\n            'git0': '#0077ff77',\n            'git1': '#00770077',\n            'git2': '#ffaa0077'\n    } } }%%\n\ngitGraph\n    commit id: \" \" tag: \"v1.0.0\"\n    branch stg\n    branch PR\n    branch your_dev\n    checkout your_dev\n    commit id: \"[feat] XYZ\"\n    commit id: \"[fix] ABC\"\n    checkout stg\n    merge your_dev tag: \"PR: Lorem Ipsum\"</code></pre> <p>PRs MUST BE BRANCHED FROM <code>main</code> AND SUBMITTED TO <code>PR</code></p> <ul> <li> <p>Resolve any merge conflicts that occur.</p> </li> <li> <p>Promptly address any CI failures. If your pull request fails to build or pass tests, please push another commit to fix it.</p> </li> <li> <p>When writing comments, use properly constructed sentences, including punctuation.</p> </li> <li> <p>Use spaces, not tabs.</p> </li> </ul>"},{"location":"CONTRIBUTING/#writing-commit-messages","title":"Writing Commit Messages","text":"<p>Please write a great commit message.</p> <ol> <li>Separate subject from body with a blank line</li> <li>Limit the subject line to 50 characters</li> <li>Capitalize the subject line</li> <li>Do not end the subject line with a period</li> <li>Use the imperative mood in the subject line (example: \"Fix networking issue\")</li> <li>Wrap the body at about 72 characters</li> <li>Use the body to explain why, not what and how (the code shows that!)</li> <li>If applicable, prefix the title with the relevant component name for \"TAG\" and \"SCOPE\". (examples: <code>fix(docs) typo</code>, <code>fix(profile) missing avatar</code>)</li> </ol> <p>Suggest list of tags and scopes after the demonstration:</p> Text Only<pre><code>[TAG](SCOPE): Short summary of changes in 50 chars or less\n\nAdd a more detailed explanation here, if necessary. Possibly give\nsome background about the issue being fixed, etc. The body of the\ncommit message can be several paragraphs. Further paragraphs come\nafter blank lines and please do proper word-wrap.\n\nWrap it to about 72 characters or so. In some contexts,\nthe first line is treated as the subject of the commit and the\nrest of the text as the body. The blank line separating the summary\nfrom the body is critical (unless you omit the body entirely);\nvarious tools like `log`, `shortlog` and `rebase` can get confused\nif you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how or what. The code explains\nhow or what. Reviewers and your future self can read the patch,\nbut might not understand why a particular solution was implemented.\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\n - Bullet points are okay, too\n\n - A hyphen or asterisk should be used for the bullet, preceded\n   by a single space, with blank lines in between\n\nNote the fixed or relevant GitHub issues at the end:\n\nResolves: #123\nSee also: #456, #789\n</code></pre> <p>Scope: There is no table with all possible options, it depends directly on what was commited. The idea is to define in one word where the commit changes the codebase; some possible examples below (stuff like \"{apps}\" means app names, not \"apps\" literally):</p> Scopes {apps} {dependencies} {workflows} {docker_files} {loadtests} {paradigm} auth db user server middleware email README render pyproject ... Tag Description Example feat Addition of new feature. <code>feat(auth): add recovery password logic</code> fix Bug fixing. <code>fix(ui): correct button alignment</code> docs Docs updating (README, examples, etc.). <code>docs(homepage): update doc homepage</code> refactor Makes better code, no functionality changes, no bug fixes, no features. <code>refactor(auth): simplify validation logic</code> test Test addition or modify. <code>test(user): add unit tests for user model</code> build Updates on build stuff. <code>build(webpack): add new plugin for optimization</code> ci Updates on CI/CD config. <code>ci(workflows): update workflows checkout repo</code> perf Performance upgrades. <code>perf(db): optimize select_related</code> revert Commit reversion. <code>revert: revert \"feat(auth): add recovery password logic\"</code> security Security improvements. <code>security(auth): fix token expiration vulnerability</code> locale Updates on globalization/languages (i18n/l10n). <code>locale(pt-BR): add translations for homepage</code> deps Specific dependency updates. <code>deps(ruff): bump to 0.9.2</code> hotfix Urgent... hot... fixes... <code>hotfix(login): fix crash on empty input</code> ui Updates on UI. <code>ui(header): update logo color</code> config Updates on general configs. <code>config(ruff): add new linting rule</code> infra Updates on project infra. <code>infra(server): migrate to new Render plan</code> db Updates/modifications related to database and migrations. <code>db(migration): add new table for user preferences</code> analytics Analytic stuff. <code>analytics(tracking): add event for sign-up button</code> server Server updates. <code>server(granian): substitution of gunicorn</code>"},{"location":"CONTRIBUTING/#code-review","title":"Code Review","text":"<ul> <li> <p>Review the code, not the author. Look for and suggest improvements without disparaging or insulting the author. Provide actionable feedback and explain your reasoning.</p> </li> <li> <p>You are not your code. When your code is critiqued, questioned, or constructively criticized, remember that you are not your code. Do not take code review personally.</p> </li> <li> <p>Always do your best. No one writes bugs on purpose. Do your best, and learn from your mistakes.</p> </li> <li> <p>Kindly note any violations to the guidelines specified in this document.</p> </li> </ul>"},{"location":"CONTRIBUTING/#coding-style","title":"Coding Style","text":"<p>Consistency is the most important. Following the existing style, formatting, and naming conventions of the file you are modifying and of the overall project. Failure to do so will result in a prolonged review process that has to focus on updating the superficial aspects of your code, rather than improving its functionality and performance.</p> <p>For example, if all private properties are prefixed with an underscore <code>_</code>, then new ones you add should be prefixed in the same way. Or, if methods are named using camelcase, like <code>thisIsMyNewMethod</code>, then do not diverge from that by writing <code>this_is_my_new_method</code>. You get the idea. If in doubt, please ask or search the codebase for something similar. When possible, style and format will be enforced with a linter.</p> <p>Due to the complexity of the codebase, some internal \"rules\" were created to maintain a consistent coding style. One of them is the replacement of <code>request</code> to <code>r</code> - it seems kinda counterintuitive but since you have in mind the number of times the word <code>request</code> happens inside a <code>views.py</code> file, this is not obscuring but a shortcut, since sWarden uses type hints, e.g.:</p> Python<pre><code>def example_view_function(r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse\n    ...\n</code></pre> <p>The actual rules are:</p> <ol> <li>Run <code>uv run ruff format</code> and <code>uv run ruff check</code> before starting any work</li> <li>If something can be annotated with it's type, it's going to be annotated</li> <li>Classes as named <code>LikeThis</code> and functions/methods <code>like_this</code>, always</li> <li>If something outside Django can be changed, it's going to be tested</li> <li>Private methods and functions are prefixed with <code>_</code> - one underscore</li> <li>Private methods and functions are NOT used outside their scope</li> <li>Comments are welcome</li> <li>Code does not need comments, it must explains itself</li> <li>Comments are welcome if the code can't be more explicit without being weird</li> <li>Run <code>uv run ruff format</code> and <code>uv run ruff check</code> after ending working</li> </ol> <p>Now it's going to be covered some snippets to be used as base code when doing something with structure already defined, such as creating a Model or testing it. This is convenient because it's already the structure used, so keep it consistent. Editting is allowed, but the logical detailed under their own topics must be followed for a minimal consistent.</p>"},{"location":"CONTRIBUTING/#view-testing","title":"View Testing","text":"<p>Testing <code>GET</code> and <code>POST</code> for <code>django.contrib.auth.AnonymousUser</code> and a logged one, use this schema to assert what responses an user should get under certain circunstances:</p> SNIPPET Python<pre><code>class BaseExampleTestCase(TestCase):\n    def setUp(self) -&gt; None:\n        User.objects.create_user(\n            username='user',\n            password='password',\n            email='user@email.com',\n        )\n\n        self.CONSTANT: ... = ...\n        self.CONSTANT: ... = ...\n\n\nclass Example[Create|List|Detail|Update|Delete]ViewTestCase(BaseExampleTestCase):\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /example/view | anonymous user\"\"\"\n\n        # Anonymous user check\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n        res: HttpResponse = self.client.get(reverse(ENDPOINT))\n\n        self.assertEqual(res.status_code, xxx)\n        self.assertRedirects(res, reverse(ENDPOINT))\n\n        res: HttpResponse = self.client.get(\n            reverse(ENDPOINT), follow=True\n        )\n\n        # Success response check\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, TEMPLATE)\n        # Anonymous user check\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /example/view | authenticated user\"\"\"\n\n        # Anonymous user check\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n        self.assertTrue(self.client.login(username='user', password='password'))\n\n        res: HttpResponse = self.client.get(reverse(ENDPOINT))\n\n        # Success response check\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, TEMPLATE)\n        # Logged user check\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user(self) -&gt; None:\n        \"\"\"POST /example/view | anonymous user\"\"\"\n\n        # Anonymous user check\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n        res: HttpResponse = self.client.post(reverse(ENDPOINT), {DATA: HERE})\n\n        self.assertEqual(res.status_code, xxx)\n        self.assertRedirects(res, reverse(ENDPOINT))\n\n        res: HttpResponse = self.client.post(\n            reverse(ENDPOINT),\n            {DATA: HERE},\n            follow=True\n        )\n\n        # Success response check\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, TEMPLATE)\n        # Logged user check\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user(self) -&gt; None:\n        \"\"\"POST /example/view | authenticated user\"\"\"\n\n        # Anonymous user check\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n        self.assertTrue(self.client.login(username='user', password='password'))\n\n        res: HttpResponse = self.client.post(\n            reverse(ENDPOINT),\n            {DATA: HERE},\n        )\n\n        # Success response check\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, TEMPLATE)\n        # Logged user check\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"CONTRIBUTING/#model-creating","title":"Model Creating","text":"<p>In order to maintain the security principle, plus the typing one, Models must be defined with <code>uuid</code> - generally the 4th version. This provides a more robust layer of reference for DB. In addition, the <code>utils.xor</code> function must be applied both under <code>save</code> and <code>from_db</code> methods, allowing to encrypt and decrypt sensitive data.</p> ENCRYPTING RIGHT DATA  Be careful: <code>utils.xor</code> func mustn't be applied to \"search and retrieve\", such as <code>uuid</code>, <code>created at</code>, <code>updated at</code>, <code>slug</code>, foreign keys and any other column used for searching purposes.   <p>Consider visiting <code>models.py</code> files to see it in action.</p>"},{"location":"CONTRIBUTING/#model-testing","title":"Model Testing","text":"<p>With a similar principle of the item above, this one tests seven initial conditions, including creating, updating and deleting actions, plus integrity:</p> SNIPPET Python<pre><code>class MyModelTestCase(TestCase):\n    def setUp(self) -&gt; None:\n        self.model1: MyModel = MyModel.objects.create(...)\n\n        self.model2: MyModel = MyModel.objects.create(...)\n\n        self.model3: MyModel = MyModel.objects.create(...)\n\n        self.model4: MyModel = MyModel.objects.create(...)\n\n        self.model5: MyModel = MyModel.objects.create(...)\n\n    def test_model_instance_validity(self) -&gt; None:\n        \"\"\"Tests model instance of correct class\"\"\"\n\n        for model in MyModel.objects.all():\n            with self.subTest(model=model):\n                self.assertIsInstance(model, MyModel)\n\n    def test_model_special_str_method_return(self) -&gt; None:\n        \"\"\"Tests model return value of __str__ method\"\"\"\n\n        model: MyModel = MyModel.objects.get(pk=self.model.pk)\n\n        self.assertEqual(model.__str__(), ...)\n\n    def test_model_key_value_assertion(self) -&gt; None:\n        \"\"\"Tests model correct attribuition of value\"\"\"\n\n        model1: MyModel = MyModel.objects.get(pk=self.model1.pk)\n\n        self.assert...(...)\n        ...\n\n    def test_model_create_validity(self) -&gt; None:\n        \"\"\"Tests model creation integrity and validation\"\"\"\n\n        model1: MyModel = MyModel.objects.get(pk=self.model1.pk)\n        model2: MyModel = MyModel.objects.get(pk=self.model2.pk)\n        model3: MyModel = MyModel.objects.get(pk=self.model3.pk)\n        model4: MyModel = MyModel.objects.get(pk=self.model4.pk)\n        model5: MyModel = MyModel.objects.get(pk=self.model5.pk)\n\n        self.assertEqual(MyModel.objects.all().count(), 5)\n\n        self.assertTrue(model1.is_valid())\n        self.assertTrue(model2.is_valid())\n        self.assertTrue(model3.is_valid())\n        self.assertFalse(model4.is_valid())\n        self.assertFalse(model5.is_valid())\n\n    def test_model_update_validity(self) -&gt; None:\n        \"\"\"Tests model update integrity and validation\"\"\"\n\n        MyModel.objects.filter(pk=self.model4.pk).update(...)\n\n        MyModel.objects.filter(pk=self.model5.pk).update(...)\n\n        for model in MyModel.objects.all():\n            with self.subTest(model=model):\n                self.assertTrue(model.is_valid())\n\n    def test_model_delete_validity(self) -&gt; None:\n        \"\"\"Tests model correct deletion\"\"\"\n\n        for model in MyModel.objects.all():\n            if not model.is_valid():\n                model.delete()\n\n        self.assertEqual(MyModel.objects.all().count(), &lt;int&gt;)\n\n    def test_model_db_exception_raises(self) -&gt; None:\n        \"\"\"Tests model correct integrity and validation with raised exceptions\"\"\"\n\n        # Expecting raises\n        params: list[dict[str, MyModel | str]] = [\n            {'field': 'value'},\n            {'field': 'value'},\n            {'field': 'value'},\n            {'field': 'value'},\n            {'field': 'value'},\n            {'field': 'value'},\n            {'field': 'value'},\n            {'field': 'value'},\n            {'field': 'value'},\n        ]\n\n        for case, scenario in create_scenarios(params):\n            with self.subTest(scenario=case):\n                with self.assertRaises(ValidationError):\n                    with atomic():\n                        instance: MyModel = MyModel(**scenario)\n                        instance.full_clean()\n\n        raise_kwargs: dict[str, dict[str, ...]] = {\n            'model1': {...},\n            'model2': {...},\n            ...\n        }\n\n        for scenario in raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                with self.assertRaises(Exception):\n                    with atomic():\n                        instance: MyModel = MyModel(**raise_kwargs[scenario])\n                        instance.full_clean()\n\n        # Not expecting raises\n        no_raise_kwargs: dict[str, dict[str, ...]] = {\n            'model1': {...},\n            'model2': {...},\n            ...\n        }\n\n        for scenario in no_raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                instance: MyModel = MyModel(**no_raise_kwargs[scenario])\n                instance.full_clean()\n</code></pre>"},{"location":"CONTRIBUTING/#certificate-of-origin","title":"Certificate of Origin","text":"<p>Developer's Certificate of Origin 1.1</p> <p>By making a contribution to this project, I certify that:</p> <ol> <li>The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or</li> <li>The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or</li> <li>The contribution was provided directly to me by some other person who certified (1), (2) or (3) and I have not modified it.</li> <li>I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.</li> </ol>"},{"location":"CONTRIBUTING/#credits","title":"Credits","text":"<p>Written by @jessesquires, editted to sWarden by @LucasGoncSilva.</p> <p>Please feel free to adopt this guide in your own projects. Fork it wholesale or remix it for your needs.</p> <p>Many of the ideas and prose for the statements in this document were based on or inspired by work from the following communities:</p> <ul> <li>Alamofire</li> <li>CocoaPods</li> <li>Docker</li> <li>Linux</li> </ul> <p>We commend them for their efforts to facilitate collaboration in their projects.</p>"},{"location":"SECURITY/","title":"Security Policy","text":"<p>If you discover a security issue, please bring it to our attention right away!</p>"},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Please DO NOT file a public issue to report a security vulberability, instead send your report privately to swardenpassmanager@gmail.com or using the proper GitHub Issue Template - do not use bug one for security things! This will help ensure that any vulnerabilities that are found can be disclosed responsibly to any affected parties.</p>"},{"location":"SECURITY/#supported-versions","title":"Supported Versions","text":"<p>Project versions that are currently being supported with security updates vary per project. Please see specific project repositories for details. If nothing is specified, only the latest major versions are supported.</p>"},{"location":"SUPPORT/","title":"Support and Help","text":"<p>Need help getting started or using a project? Here's how.</p>"},{"location":"SUPPORT/#how-to-get-help","title":"How to get help","text":"<p>Generally, we do not use GitHub as a support forum. For any usage questions that are not specific to the project itself, please ask on Stack Overflow instead. By doing so, you are more likely to quickly solve your problem, and you will allow anyone else with the same question to find the answer. This also allows maintainers to focus on improving the project for others.</p> <p>Please seek support in the following ways:</p> <ol> <li>Read the documentation and other guides for the project to see if you can figure it out on your own. These should be located in a root <code>documentation/</code> directory or under this URL. If there is an example project, explore that to learn how it works to see if you can answer your question.</li> <li>Search for answers and ask questions on Stack Overflow. This is the most appropriate place for debugging issues specific to your use of the project, or figuring out how to use the project in a specific way.</li> <li>Ask the community on sWarden's Discussion Menu. If no other place has not even bringing some light, this is where everyone can interact to get things done.</li> <li>As a last resort, you may open an issue on GitHub to ask for help. However, please clearly explain what you are trying to do, and list what you have already attempted to solve the problem. Provide code samples, but do not attach your entire project for someone else to debug. Review our contributing guideline.</li> </ol>"},{"location":"SUPPORT/#what-not-to-do","title":"What NOT to do","text":"<p>Please do not do any the following:</p> <ol> <li>Do not reach out to the author or contributor on Twitter (or other social media) by tweeting or sending a direct message.</li> <li>Do not email the author or contributor.</li> <li>Do not open duplicate issues or comment an existing issue with \"+1\"; use emojis instead.</li> </ol> <p>These are not appropriate avenues for seeking help or support with an open-source project. Please follow the guidelines in the previous section. Public questions get public answers, which benefits everyone in the community.</p>"},{"location":"SUPPORT/#customer-support","title":"Customer Support","text":"<p>I do not provide any sort of \"customer support\" for open-source projects individually. However, if you wanna talk about some work to get done visit lucasgonc.vercel.app.</p>"},{"location":"TODO/","title":"To-Do Checklist","text":""},{"location":"TODO/#to-be-evaluated","title":"To Be Evaluated","text":"<ul> <li> Use of Rust for better processing</li> <li> Use of Celery for enqueue mailing system</li> </ul>"},{"location":"TODO/#to-do","title":"To Do","text":"<ul> <li> Use 2FA</li> <li> Redesign interfaces for a new era</li> <li> Create <code>/sobre</code> and <code>/servi\u00e7os</code> pages</li> <li> Design locale and languages (pt-br, en)</li> <li> Apply chars count feedback in text inputs</li> <li> Redesign loadtests to a decent testing level</li> <li> Generate pseudo-random passwords as suggestion</li> </ul>"},{"location":"TODO/#done","title":"Done","text":"<ul> <li> Hide secret's data from staff and admin users</li> </ul>"},{"location":"Codebase/","title":"Codebase","text":""},{"location":"Codebase/#django-project-structure","title":"Django Project Structure","text":"<p>When you create a new Django project using the command:</p> Bash<pre><code>django-admin startproject &lt;project_name&gt;\n</code></pre> <p>You get a basic directory structure, which typically looks like this:</p> Text Only<pre><code>&lt;project_name&gt;\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 &lt;project_name&gt;\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u251c\u2500\u2500 asgi.py\n    \u2514\u2500\u2500 wsgi.py\n</code></pre> <p>Each of these files serves a critical purpose in the project's operation and interacts with application-specific files (<code>startapp &lt;app_name&gt;</code>).</p>"},{"location":"Codebase/#core-files-in-a-django-project","title":"Core Files in a Django Project","text":""},{"location":"Codebase/#1-managepy","title":"1. <code>manage.py</code>","text":"<ul> <li>Role: This is a command-line utility that helps manage your Django project. You use it to run development servers, perform database migrations, create applications, and more.</li> <li>Interaction:</li> <li>Executes Django commands and setups up the environment by loading settings from <code>settings.py</code>.</li> <li>Uses the <code>settings</code> module to understand project configurations when running commands like <code>runserver</code> or <code>migrate</code>.</li> </ul>"},{"location":"Codebase/#2-project_namesettingspy","title":"2. <code>&lt;project_name&gt;/settings.py</code>","text":"<ul> <li>Role: The central configuration file of your project. It defines project-level settings like database configurations, installed apps, middleware, templates, static files, and more.</li> <li>Interaction:</li> <li>Applications: The <code>INSTALLED_APPS</code> section includes a list of apps that the project recognizes. When you create a new app using <code>startapp</code>, you need to add it here manually or with tools like <code>django-extensions</code>.</li> <li>Database Models: Configures the database backend (e.g., SQLite, PostgreSQL) and connects it with the ORM models defined in app directories (<code>&lt;app_name&gt;/models.py</code>).</li> <li>Middleware: Middleware classes defined in <code>settings.py</code> interact with app-level views and handle pre- and post-processing of requests.</li> <li>Static/Media Files: Configurations for static files (e.g., CSS, JavaScript) and user-uploaded media files influence app-level templates.</li> </ul>"},{"location":"Codebase/#3-project_nameurlspy","title":"3. <code>&lt;project_name&gt;/urls.py</code>","text":"<ul> <li>Role: The URL routing configuration for the entire project. It maps incoming HTTP requests to views (functions or classes) defined in apps.</li> <li> <p>Interaction:</p> </li> <li> <p>Includes URLs from app-specific <code>urls.py</code> files. For example:</p> </li> </ul> Python<pre><code>from django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('blog/', include('blog.urls')),\n]\n</code></pre> <p>This tells Django to defer <code>/blog/</code> requests to the <code>blog</code> app's <code>urls.py</code>.</p>"},{"location":"Codebase/#4-project_namewsgipy","title":"4. <code>&lt;project_name&gt;/wsgi.py</code>","text":"<ul> <li>Role: Entry point for WSGI-compatible web servers (e.g., Gunicorn, uWSGI) to serve your Django application.</li> <li>Interaction:</li> <li>Loads the project's <code>settings.py</code> to configure the application before serving requests.</li> <li>Interacts indirectly with apps by routing requests via the <code>urls.py</code> file.</li> </ul>"},{"location":"Codebase/#5-project_nameasgipy","title":"5. <code>&lt;project_name&gt;/asgi.py</code>","text":"<ul> <li>Role: Entry point for ASGI-compatible web servers (e.g., Daphne, Uvicorn) for asynchronous web applications.</li> <li>Interaction:</li> <li>Similar to <code>wsgi.py</code> but supports asynchronous handling.</li> <li>Connects to asynchronous components like WebSockets or long-polling tasks defined in apps.</li> </ul>"},{"location":"Codebase/#internal-structure-of-an-app-startapp-app_name","title":"Internal Structure of an App (<code>startapp &lt;app_name&gt;</code>)","text":"<p>When you run:</p> Bash<pre><code>python manage.py startapp &lt;app_name&gt;\n</code></pre> <p>Django creates a directory structure like this:</p> Text Only<pre><code>&lt;app_name&gt;/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py\n</code></pre>"},{"location":"Codebase/#1-app_namemodelspy","title":"1. <code>&lt;app_name&gt;/models.py</code>","text":"<ul> <li>Purpose: Defines the data models for the app. Each model corresponds to a table in the database.</li> <li>Interaction:</li> <li>Registered in <code>INSTALLED_APPS</code> (via <code>settings.py</code>) so Django's ORM recognizes it.</li> <li>Migrated to the database using <code>python manage.py makemigrations</code> and <code>migrate</code>.</li> </ul>"},{"location":"Codebase/#2-app_nameadminpy","title":"2. <code>&lt;app_name&gt;/admin.py</code>","text":"<ul> <li>Purpose: Configures how the app's models appear and behave in the Django admin interface.</li> <li> <p>Interaction:</p> </li> <li> <p>Registers models for management in the Django Admin Panel. For example:</p> </li> </ul> Python<pre><code>from django.contrib import admin\nfrom .models import MyModel\n\nadmin.site.register(MyModel)\n</code></pre>"},{"location":"Codebase/#3-app_nameappspy","title":"3. <code>&lt;app_name&gt;/apps.py</code>","text":"<ul> <li>Purpose: Contains the app's configuration class, which Django uses to recognize the app.</li> <li>Interaction:</li> <li>Automatically included in <code>INSTALLED_APPS</code> if generated with <code>startapp</code>.</li> <li>Can define app-specific signals or configurations.</li> </ul>"},{"location":"Codebase/#4-app_namemigrations","title":"4. <code>&lt;app_name&gt;/migrations/</code>","text":"<ul> <li>Purpose: Stores migration files that define changes to the app's models and database schema.</li> <li>Interaction:</li> <li>Created via <code>makemigrations</code> and executed via <code>migrate</code>.</li> </ul>"},{"location":"Codebase/#5-app_nametestspy","title":"5. <code>&lt;app_name&gt;/tests.py</code>","text":"<ul> <li>Purpose: Contains test cases for the app.</li> <li>Interaction:</li> <li>Can test models, views, and other logic by using Django's testing framework.</li> </ul>"},{"location":"Codebase/#6-app_nameviewspy","title":"6. <code>&lt;app_name&gt;/views.py</code>","text":"<ul> <li>Purpose: Defines the logic for handling requests and returning responses.</li> <li>Interaction:</li> <li>Views are connected to URLs via the <code>urls.py</code> of the app or project.</li> <li>Can render templates, return JSON responses, or handle form submissions.</li> </ul>"},{"location":"Codebase/#7-app_nameurlspy-optional","title":"7. <code>&lt;app_name&gt;/urls.py</code> (optional)","text":"<ul> <li>Purpose: Defines URL patterns specific to the app.</li> <li> <p>Interaction:</p> </li> <li> <p>Included in the project's <code>urls.py</code> to define app-specific routes.</p> </li> <li>For example:</li> </ul> Python<pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n</code></pre>"},{"location":"Codebase/#how-core-files-interact-with-apps","title":"How Core Files Interact with Apps","text":"<ol> <li> <p><code>settings.py</code>:</p> </li> <li> <p>Recognizes the app through <code>INSTALLED_APPS</code>.</p> </li> <li> <p>Configures database backends, middleware, and static file handling that the app relies on.</p> </li> <li> <p><code>urls.py</code>:</p> </li> <li> <p>Routes app-specific URLs using the <code>include</code> function.</p> </li> <li> <p><code>wsgi.py</code> and <code>asgi.py</code>:</p> </li> <li> <p>Serve the entire Django application, including the logic defined in apps.</p> </li> <li> <p><code>manage.py</code>:</p> </li> <li>Provides commands to run the development server, create migrations, or execute custom commands defined by the app.</li> </ol> <pre><code>graph TB\n\n\nweb{{WWW}}\n\nsubgraph CORE[\"CORE\"]\n    settings[settings.py]\n    asgi[asgi.py]\n    wsgi[wsgi.py]\n    urls[urls.py]\nend\n\nsubgraph APPS[\"For Each App\"]\n    urls_app[urls.py]\n    admin[admin.py]\n    models[models.py]\n    views[views.py]\n    p1((\" \"))\n    p2((\" \"))\n    apps[apps.py]\n    tests[test_*.py]\nend\n\nutils[utils.py]\n\n\nmodels &amp; views &amp; admin &amp; urls_app --&gt; p1 &amp; p2\np1 --&gt; apps\np2 --&gt; tests\n\nsettings &lt;==&gt; urls &amp; wsgi\n\nviews --&gt; urls_app --&gt; urls\napps --&gt; settings &amp; APPS\n\nmodels --&gt; admin &amp; views\nutils --&gt; views &amp; models &amp; p2\n\nsettings &lt;-.-&gt; asgi\n\nwsgi ~~~ asgi\nweb &lt;--&gt; wsgi</code></pre>"},{"location":"Codebase/manage.py/","title":"File: <code>manage.py</code>","text":"<p>Path: <code>SWARDEN</code></p>"},{"location":"Codebase/manage.py/#imports","title":"Imports","text":""},{"location":"Codebase/manage.py/#import-os","title":"<code>import os</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import os\n</code></pre>"},{"location":"Codebase/manage.py/#import-sys","title":"<code>import sys</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import sys\n</code></pre>"},{"location":"Codebase/manage.py/#import-execute_from_command_line","title":"<code>import execute_from_command_line</code>","text":"<p>Path: <code>django.core.management</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.management import execute_from_command_line\n</code></pre>"},{"location":"Codebase/manage.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/manage.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/manage.py/#functions","title":"Functions","text":""},{"location":"Codebase/manage.py/#def-main","title":"<code>def main</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CORE.settings.dev')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n</code></pre>"},{"location":"Codebase/manage.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/utils.py/","title":"File: <code>utils.py</code>","text":"<p>Path: <code>SWARDEN</code></p>"},{"location":"Codebase/utils.py/#imports","title":"Imports","text":""},{"location":"Codebase/utils.py/#import-sha256","title":"<code>import sha256</code>","text":"<p>Path: <code>hashlib</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from hashlib import sha256\n</code></pre>"},{"location":"Codebase/utils.py/#import-stringio","title":"<code>import StringIO</code>","text":"<p>Path: <code>io</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from io import StringIO\n</code></pre>"},{"location":"Codebase/utils.py/#import-compress","title":"<code>import compress</code>","text":"<p>Path: <code>itertools</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from itertools import compress\n</code></pre>"},{"location":"Codebase/utils.py/#import-product","title":"<code>import product</code>","text":"<p>Path: <code>itertools</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from itertools import product\n</code></pre>"},{"location":"Codebase/utils.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/utils.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/utils.py/#import-generator","title":"<code>import Generator</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Generator\n</code></pre>"},{"location":"Codebase/utils.py/#import-literal","title":"<code>import Literal</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Literal\n</code></pre>"},{"location":"Codebase/utils.py/#import-activationaccounttoken","title":"<code>import ActivationAccountToken</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import ActivationAccountToken\n</code></pre>"},{"location":"Codebase/utils.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/utils.py/#import-settings","title":"<code>import settings</code>","text":"<p>Path: <code>django.conf</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.conf import settings\n</code></pre>"},{"location":"Codebase/utils.py/#import-emailmessage","title":"<code>import EmailMessage</code>","text":"<p>Path: <code>django.core.mail</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.mail import EmailMessage\n</code></pre>"},{"location":"Codebase/utils.py/#import-validate_email","title":"<code>import validate_email</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import validate_email\n</code></pre>"},{"location":"Codebase/utils.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/utils.py/#import-force_bytes","title":"<code>import force_bytes</code>","text":"<p>Path: <code>django.utils.encoding</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.encoding import force_bytes\n</code></pre>"},{"location":"Codebase/utils.py/#import-urlsafe_base64_encode","title":"<code>import urlsafe_base64_encode</code>","text":"<p>Path: <code>django.utils.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.http import urlsafe_base64_encode\n</code></pre>"},{"location":"Codebase/utils.py/#consts","title":"Consts","text":""},{"location":"Codebase/utils.py/#sk","title":"<code>SK</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>settings.SECRET_KEY</code></p> SNIPPET Python<pre><code>SK: str = settings.SECRET_KEY\n</code></pre>"},{"location":"Codebase/utils.py/#no_data_to_export","title":"<code>NO_DATA_TO_EXPORT</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'N\u00e3o h\u00e1 dados para exporta\u00e7\u00e3o.'</code></p> SNIPPET Python<pre><code>NO_DATA_TO_EXPORT: Final[str] = 'N\u00e3o h\u00e1 dados para exporta\u00e7\u00e3o.'\n</code></pre>"},{"location":"Codebase/utils.py/#success_data_exporting","title":"<code>SUCCESS_DATA_EXPORTING</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'Dados exportados com sucesso.'</code></p> SNIPPET Python<pre><code>SUCCESS_DATA_EXPORTING: Final[str] = 'Dados exportados com sucesso.'\n</code></pre>"},{"location":"Codebase/utils.py/#activate_account_token_send","title":"<code>ACTIVATE_ACCOUNT_TOKEN_SEND</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'Sua conta foi criada com sucesso, contudo, voc\u00ea deve ativ\u00e1-la. Para fazer isso, clique no link abaixo:\\n\\n\\n{domain}/conta/ativar/{uidb64}/{token}\\n\\nEquipe sWarden'</code></p> SNIPPET Python<pre><code>ACTIVATE_ACCOUNT_TOKEN_SEND: Final[str] = 'Sua conta foi criada com sucesso, contudo, voc\u00ea deve ativ\u00e1-la. Para fazer isso, clique no link abaixo:\\n\\n\\n{domain}/conta/ativar/{uidb64}/{token}\\n\\nEquipe sWarden'\n</code></pre>"},{"location":"Codebase/utils.py/#activate_account_confirm_done","title":"<code>ACTIVATE_ACCOUNT_CONFIRM_DONE</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'A partir de agora a sua conta est\u00e1 ativa e voc\u00ea pode utilizar dos recursos do sistema para armazenar seus dados sens\u00edveis.\\n\\nEquipe sWarden'</code></p> SNIPPET Python<pre><code>ACTIVATE_ACCOUNT_CONFIRM_DONE: Final[str] = 'A partir de agora a sua conta est\u00e1 ativa e voc\u00ea pode utilizar dos recursos do sistema para armazenar seus dados sens\u00edveis.\\n\\nEquipe sWarden'\n</code></pre>"},{"location":"Codebase/utils.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/utils.py/#functions","title":"Functions","text":""},{"location":"Codebase/utils.py/#def-get_ip_address","title":"<code>def get_ip_address</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Any | None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_ip_address(r: HttpRequest) -&gt; Any | None:\n    x_forwarded_for: Any | None = r.META.get('HTTP_X_FORWARDED_FOR')\n    ip: Any | None = x_forwarded_for.split(',')[0] if x_forwarded_for else r.META.get('REMOTE_ADDR')\n    return ip\n</code></pre>"},{"location":"Codebase/utils.py/#def-xor","title":"<code>def xor</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>text: str, key: str, encrypt: bool</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def xor(text: str, key: str, encrypt: bool=True) -&gt; str:\n    if text is None or not isinstance(text, str) or (not len(key)):\n        return text\n    key_repetitions: int = max(1, (len(text) + len(key) - 1) // len(key))\n    expanded_key: str = (key * key_repetitions)[:len(text)]\n    expanded_secret_key: str = (SK * key_repetitions)[:len(text)]\n    xor_key_generator: Generator = (ord(expanded_key_char) ^ ord(secret_key_char) for (expanded_key_char, secret_key_char) in zip(expanded_key, expanded_secret_key))\n    if encrypt:\n        transformed_chars: list[str] = [chr((ord(text_char) ^ xor_key_val) + 32) for (text_char, xor_key_val) in zip(text, xor_key_generator)]\n    else:\n        transformed_chars: list[str] = [chr(ord(text_char) - 32 ^ xor_key_val) for (text_char, xor_key_val) in zip(text, xor_key_generator)]\n    return ''.join(transformed_chars)\n</code></pre>"},{"location":"Codebase/utils.py/#def-send_email_activation_account_token","title":"<code>def send_email_activation_account_token</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>domain: str, new_user: User, password: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def send_email_activation_account_token(domain: str, new_user: User, password: str) -&gt; None:\n    if not isinstance(domain, str) or not isinstance(new_user, User) or (not isinstance(password, str)):\n        raise TypeError(f'{domain}, {new_user} and {password} are invalid arguments')\n    validate_email(new_user.email)\n    token_hash: str = sha256(f'{new_user.username}{password}'.encode()).hexdigest()\n    uidb64: str = urlsafe_base64_encode(force_bytes(new_user.pk))\n    token: ActivationAccountToken = ActivationAccountToken.objects.create(value=token_hash, user=new_user, used=False)\n    token.full_clean()\n    email: EmailMessage = EmailMessage(subject='Ativa\u00e7\u00e3o de Conta | sWarden', body=ACTIVATE_ACCOUNT_TOKEN_SEND.format(domain=domain, uidb64=uidb64, token=token_hash), from_email=settings.EMAIL_HOST_USER, to=[str(new_user.email)])\n    email.send()\n</code></pre>"},{"location":"Codebase/utils.py/#def-send_email_activate_account_completed","title":"<code>def send_email_activate_account_completed</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>user_email: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def send_email_activate_account_completed(user_email: str) -&gt; None:\n    validate_email(user_email)\n    email: EmailMessage = EmailMessage(subject='Ativa\u00e7\u00e3o de Conta | sWarden', body=ACTIVATE_ACCOUNT_CONFIRM_DONE, from_email=settings.EMAIL_HOST_USER, to=[user_email])\n    email.send()\n</code></pre>"},{"location":"Codebase/utils.py/#def-send_email_exporting_secrets","title":"<code>def send_email_exporting_secrets</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>secret_type: Literal['Credenciais', 'Cart\u00f5es', 'Anota\u00e7\u00f5es'], csvfile: StringIO, user_email: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def send_email_exporting_secrets(secret_type: Literal['Credenciais', 'Cart\u00f5es', 'Anota\u00e7\u00f5es'], csvfile: StringIO, user_email: str) -&gt; None:\n    validate_email(user_email)\n    content: str = f'Aqui est\u00e3o seus segredos armazenados em \"{secret_type}\" no sWarden.\\n\\nEquipe sWarden'\n    email: EmailMessage = EmailMessage(subject='Exporta\u00e7\u00e3o de Segredos | sWarden', body=content, from_email=settings.EMAIL_HOST_USER, to=[user_email])\n    email.attach('anotacoes.csv', csvfile.getvalue(), 'text/csv')\n    email.send()\n</code></pre>"},{"location":"Codebase/utils.py/#def-create_scenarios","title":"<code>def create_scenarios</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Generator</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>params: list[dict[str, Any]]</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def create_scenarios(params: list[dict[str, Any]]) -&gt; Generator:\n    for case in product([0, 1], repeat=len(params)):\n        if all(case):\n            break\n        _temp: compress[dict[str, Any]] = compress(params, case)\n        temp: list[dict[str, Any]] = list(_temp)\n        scenario: dict = {}\n        for param in temp:\n            scenario.update(param)\n        yield (case, scenario)\n</code></pre>"},{"location":"Codebase/utils.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/CORE/admin.py/","title":"File: <code>admin.py</code>","text":"<p>Path: <code>SWARDEN.CORE</code></p>"},{"location":"Codebase/CORE/admin.py/#imports","title":"Imports","text":""},{"location":"Codebase/CORE/admin.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#import-adminsite","title":"<code>import AdminSite</code>","text":"<p>Path: <code>django.contrib.admin</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.admin import AdminSite\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#import-groupadmin","title":"<code>import GroupAdmin</code>","text":"<p>Path: <code>django.contrib.auth.admin</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.admin import GroupAdmin\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#import-group","title":"<code>import Group</code>","text":"<p>Path: <code>django.contrib.auth.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.models import Group\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#consts","title":"Consts","text":""},{"location":"Codebase/CORE/admin.py/#main_color","title":"<code>MAIN_COLOR</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'417690'</code></p> SNIPPET Python<pre><code>MAIN_COLOR: str = '417690'\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#sec_color","title":"<code>SEC_COLOR</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'a3aabe'</code></p> SNIPPET Python<pre><code>SEC_COLOR: str = 'a3aabe'\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#third_color","title":"<code>THIRD_COLOR</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'bcc8cc'</code></p> SNIPPET Python<pre><code>THIRD_COLOR: str = 'bcc8cc'\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#dis_color","title":"<code>DIS_COLOR</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'777777'</code></p> SNIPPET Python<pre><code>DIS_COLOR: str = '777777'\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#classes","title":"Classes","text":""},{"location":"Codebase/CORE/admin.py/#class-swardenadminsite","title":"<code>class sWardenAdminSite</code>","text":"<p>Parents: <code>AdminSite</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class sWardenAdminSite(AdminSite):\n    site_header = 'Administra\u00e7\u00e3o Geral | sWarden'\n    site_title = 'Admin'\n\n    def index(self, request, extra_context=None):\n        extra_context = extra_context or {}\n        extra_context['admin_dashboard'] = {'range': range(6), 'graph1': graph1(), 'graph2': graph2(), 'graph3': graph3(), 'graph4': graph4(), 'graph5': graph5(), 'graph6': graph6()}\n        return super().index(request, extra_context=extra_context)\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#functions","title":"Functions","text":""},{"location":"Codebase/CORE/admin.py/#def-graph1","title":"<code>def graph1</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def graph1() -&gt; str:\n    return f\"&lt;script&gt;\\n        new Chart(document.getElementById('graph1'), {{\\n            type: 'doughnut',\\n            data: {{\\n                labels: ['Usu\u00e1rios Ativos', 'Usu\u00e1rios Inativos'],\\n                datasets: [{{\\n                    data: [\\n                        {User.objects.filter(is_active=True).count()},\\n                        {User.objects.filter(is_active=False).count()},\\n                    ],\\n                    backgroundColor: ['#{MAIN_COLOR}', '#{DIS_COLOR}'],\\n                    borderColor: ['#{MAIN_COLOR}', '#{DIS_COLOR}'],\\n                    borderWidth: 3\\n                }}]\\n            }},\\n            options: {{\\n                cutout: '60%'\\n            }}\\n        }});\\n    &lt;/script&gt;\"\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#def-graph2","title":"<code>def graph2</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def graph2() -&gt; str:\n    return f\"&lt;script&gt;\\n        new Chart(document.getElementById('graph2'), {{\\n            type: 'bar',\\n            data: {{\\n                labels: ['Usu\u00e1rios', 'Segredos'],\\n                datasets: [{{\\n                    data: [\\n                        {User.objects.count()},\\n                        {Card.objects.count() + LoginCredential.objects.count() + SecurityNote.objects.count()},\\n                    ],\\n                    label: 'Segredos / Usu\u00e1rios',\\n                    backgroundColor: ['#{MAIN_COLOR}', '#{SEC_COLOR}'],\\n                    borderColor: ['#{MAIN_COLOR}', '#{SEC_COLOR}'],\\n                    borderWidth: 3\\n                }}]\\n            }},\\n            options: {{\\n                maintainAspectRatio: false,\\n                title: {{\\n                    display: false,\\n                }},\\n                scales: {{\\n                    y: {{\\n                        type: 'logarithmic'\\n                    }}\\n                }}\\n            }}\\n        }});\\n    &lt;/script&gt;\"\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#def-graph3","title":"<code>def graph3</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def graph3() -&gt; str:\n    return f\"&lt;script&gt;\\n        new Chart(document.getElementById('graph3'), {{\\n            type: 'doughnut',\\n            data: {{\\n                labels: ['Cards', 'Creds', 'Notas'],\\n                datasets: [{{\\n                    data: [\\n                        {Card.objects.count()},\\n                        {LoginCredential.objects.count()},\\n                        {SecurityNote.objects.count()},\\n                    ],\\n                    backgroundColor: [\\n                        '#{MAIN_COLOR}',\\n                        '#{SEC_COLOR}',\\n                        '#{THIRD_COLOR}'\\n                    ],\\n                    borderColor: ['#{MAIN_COLOR}', '#{SEC_COLOR}', '#{THIRD_COLOR}'],\\n                    borderWidth: 3\\n                }}]\\n            }},\\n            options: {{\\n                cutout: '60%'\\n            }}\\n        }});\\n    &lt;/script&gt;\"\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#def-graph4","title":"<code>def graph4</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def graph4() -&gt; str:\n    return f\"&lt;script&gt;\\n        new Chart(document.getElementById('graph4'), {{\\n            type: 'doughnut',\\n            data: {{\\n                labels: ['Cards Cr\u00e9dito', 'Cards D\u00e9bito', 'Cards Pr\u00e9', 'Cards Co'],\\n                datasets: [{{\\n                    data: [\\n                        {Card.objects.filter(card_type='cred').count()},\\n                        {Card.objects.filter(card_type='deb').count()},\\n                        {Card.objects.filter(card_type='pre').count()},\\n                        {Card.objects.filter(card_type='co').count()},\\n                    ],\\n                    backgroundColor: [\\n                        '#{MAIN_COLOR}',\\n                        '#{SEC_COLOR}',\\n                        '#{THIRD_COLOR}',\\n                        '#{DIS_COLOR}'\\n                    ],\\n                    borderColor: [\\n                        '#{MAIN_COLOR}',\\n                        '#{SEC_COLOR}',\\n                        '#{THIRD_COLOR}',\\n                        '#{DIS_COLOR}'\\n                    ],\\n                    borderWidth: 3\\n                }}]\\n            }},\\n            options: {{\\n                cutout: '60%'\\n            }}\\n        }});\\n    &lt;/script&gt;\"\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#def-graph5","title":"<code>def graph5</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def graph5() -&gt; str:\n    return f\"&lt;script&gt;\\n        new Chart(document.getElementById('graph5'), {{\\n            type: 'doughnut',\\n            data: {{\\n                labels: ['Creds de Login Pr\u00f3prio', 'Creds de Login de 3\u00ba'],\\n                datasets: [{{\\n                    data: [\\n                        {LoginCredential.objects.filter(thirdy_party_login=True).count()},\\n                        {LoginCredential.objects.filter(thirdy_party_login=False).count()},\\n                    ],\\n                    backgroundColor: ['#{MAIN_COLOR}', '#{SEC_COLOR}'],\\n                    borderColor: ['#{MAIN_COLOR}', '#{SEC_COLOR}'],\\n                    borderWidth: 3\\n                }}]\\n            }},\\n            options: {{\\n                cutout: '60%'\\n            }}\\n        }});\\n    &lt;/script&gt;\"\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#def-graph6","title":"<code>def graph6</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def graph6() -&gt; str:\n    lst: list[tuple[str, int]] = [('leg', SecurityNote.objects.filter(note_type='leg').count()), ('cmt', SecurityNote.objects.filter(note_type='cmt').count()), ('esp', SecurityNote.objects.filter(note_type='esp').count()), ('std', SecurityNote.objects.filter(note_type='std').count()), ('fml', SecurityNote.objects.filter(note_type='fml').count()), ('fin', SecurityNote.objects.filter(note_type='fin').count()), ('hlt', SecurityNote.objects.filter(note_type='hlt').count()), ('wrk', SecurityNote.objects.filter(note_type='wrk').count()), ('trv', SecurityNote.objects.filter(note_type='trv').count()), ('vol', SecurityNote.objects.filter(note_type='vol').count()), ('oth', SecurityNote.objects.filter(note_type='oth').count())]\n    sorted_lst: list[tuple[str, int]] = list(sorted(lst, key=lambda i: i[1], reverse=True))\n    return f\"&lt;script&gt;\\n        new Chart(document.getElementById('graph6'), {{\\n            type: 'doughnut',\\n            data: {{\\n                labels: [\\n                    'Notas {sorted_lst[0][0].title()}',\\n                    'Notas {sorted_lst[1][0].title()}',\\n                    'Notas {sorted_lst[2][0].title()}',\\n                    'Demais notas',\\n                ],\\n                datasets: [{{\\n                    data: [\\n                        {sorted_lst[0][1]},\\n                        {sorted_lst[1][1]},\\n                        {sorted_lst[2][1]},\\n                        {sum([i[1] for i in sorted_lst[3:]])},\\n                    ],\\n                    backgroundColor: [\\n                        '#{MAIN_COLOR}',\\n                        '#{SEC_COLOR}',\\n                        '#{THIRD_COLOR}',\\n                        '#{DIS_COLOR}',\\n                    ],\\n                    borderColor: [\\n                        '#{MAIN_COLOR}',\\n                        '#{SEC_COLOR}',\\n                        '#{THIRD_COLOR}',\\n                        '#{DIS_COLOR}',\\n                    ],\\n                    borderWidth: 3\\n                }}]\\n            }},\\n            options: {{\\n                cutout: '60%'\\n            }}\\n        }});\\n    &lt;/script&gt;\"\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#def-index","title":"<code>def index</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, request: Unknown, extra_context: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def index(self, request, extra_context=None):\n    extra_context = extra_context or {}\n    extra_context['admin_dashboard'] = {'range': range(6), 'graph1': graph1(), 'graph2': graph2(), 'graph3': graph3(), 'graph4': graph4(), 'graph5': graph5(), 'graph6': graph6()}\n    return super().index(request, extra_context=extra_context)\n</code></pre>"},{"location":"Codebase/CORE/admin.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/CORE/asgi.py/","title":"File: <code>asgi.py</code>","text":"<p>Path: <code>SWARDEN.CORE</code></p>"},{"location":"Codebase/CORE/asgi.py/#imports","title":"Imports","text":""},{"location":"Codebase/CORE/asgi.py/#import-os","title":"<code>import os</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import os\n</code></pre>"},{"location":"Codebase/CORE/asgi.py/#import-get_asgi_application","title":"<code>import get_asgi_application</code>","text":"<p>Path: <code>django.core.asgi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.asgi import get_asgi_application\n</code></pre>"},{"location":"Codebase/CORE/asgi.py/#consts","title":"Consts","text":""},{"location":"Codebase/CORE/asgi.py/#app-application","title":"<code>app, application</code>","text":"<p>Type: <code>Unknown</code></p> <p>Value: <code>get_asgi_application()</code></p> SNIPPET Python<pre><code>app = application = get_asgi_application()\n</code></pre>"},{"location":"Codebase/CORE/asgi.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/CORE/asgi.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/CORE/asgi.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/CORE/urls.py/","title":"File: <code>urls.py</code>","text":"<p>Path: <code>SWARDEN.CORE</code></p>"},{"location":"Codebase/CORE/urls.py/#imports","title":"Imports","text":""},{"location":"Codebase/CORE/urls.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-passwordresetcompleteview","title":"<code>import PasswordResetCompleteView</code>","text":"<p>Path: <code>django.contrib.auth.views</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.views import PasswordResetCompleteView\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-passwordresetconfirmview","title":"<code>import PasswordResetConfirmView</code>","text":"<p>Path: <code>django.contrib.auth.views</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.views import PasswordResetConfirmView\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-passwordresetdoneview","title":"<code>import PasswordResetDoneView</code>","text":"<p>Path: <code>django.contrib.auth.views</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.views import PasswordResetDoneView\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-passwordresetview","title":"<code>import PasswordResetView</code>","text":"<p>Path: <code>django.contrib.auth.views</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.views import PasswordResetView\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-urlpattern","title":"<code>import URLPattern</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLPattern\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-urlresolver","title":"<code>import URLResolver</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLResolver\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-include","title":"<code>import include</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import include\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-path","title":"<code>import path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import path\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#import-swarden_admin","title":"<code>import swarden_admin</code>","text":"<p>Path: <code>CORE.admin</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from CORE.admin import swarden_admin\n</code></pre>"},{"location":"Codebase/CORE/urls.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/CORE/urls.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/CORE/urls.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/CORE/urls.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/CORE/wsgi.py/","title":"File: <code>wsgi.py</code>","text":"<p>Path: <code>SWARDEN.CORE</code></p>"},{"location":"Codebase/CORE/wsgi.py/#imports","title":"Imports","text":""},{"location":"Codebase/CORE/wsgi.py/#import-os","title":"<code>import os</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import os\n</code></pre>"},{"location":"Codebase/CORE/wsgi.py/#import-get_wsgi_application","title":"<code>import get_wsgi_application</code>","text":"<p>Path: <code>django.core.wsgi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.wsgi import get_wsgi_application\n</code></pre>"},{"location":"Codebase/CORE/wsgi.py/#consts","title":"Consts","text":""},{"location":"Codebase/CORE/wsgi.py/#app-application","title":"<code>app, application</code>","text":"<p>Type: <code>Unknown</code></p> <p>Value: <code>get_wsgi_application()</code></p> SNIPPET Python<pre><code>app = application = get_wsgi_application()\n</code></pre>"},{"location":"Codebase/CORE/wsgi.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/CORE/wsgi.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/CORE/wsgi.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/base.py/","title":"File: <code>base.py</code>","text":"<p>Path: <code>SWARDEN.CORE.settings</code></p>"},{"location":"Codebase/CORE/settings/base.py/#imports","title":"Imports","text":""},{"location":"Codebase/CORE/settings/base.py/#import-path","title":"<code>import Path</code>","text":"<p>Path: <code>pathlib</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from pathlib import Path\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#import-constants","title":"<code>import constants</code>","text":"<p>Path: <code>django.contrib.messages</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.messages import constants\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#consts","title":"Consts","text":""},{"location":"Codebase/CORE/settings/base.py/#base_dir","title":"<code>BASE_DIR</code>","text":"<p>Type: <code>Unknown</code></p> <p>Value: <code>Path(__file__).resolve().parent.parent.parent</code></p> SNIPPET Python<pre><code>BASE_DIR = Path(__file__).resolve().parent.parent.parent\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#secret_key","title":"<code>SECRET_KEY</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'cw%t5oij*-s6g8xmgkp6__4br))7&amp;01!3+6_r7vw0p6y37aztqvc_@_tz+oo!ga9&amp;-=2_%!qx+k(0e=y)!i_e=s+5vlzonba^m3)'</code></p> SNIPPET Python<pre><code>SECRET_KEY: str = 'cw%t5oij*-s6g8xmgkp6__4br))7&amp;01!3+6_r7vw0p6y37aztqvc_@_tz+oo!ga9&amp;-=2_%!qx+k(0e=y)!i_e=s+5vlzonba^m3)'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#debug","title":"<code>DEBUG</code>","text":"<p>Type: <code>bool</code></p> <p>Value: <code>True</code></p> SNIPPET Python<pre><code>DEBUG: bool = True\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#allowed_hosts","title":"<code>ALLOWED_HOSTS</code>","text":"<p>Type: <code>list[str]</code></p> <p>Value: <code>['*', 'localhost']</code></p> SNIPPET Python<pre><code>ALLOWED_HOSTS: list[str] = ['*', 'localhost']\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#session_cookie_secure","title":"<code>SESSION_COOKIE_SECURE</code>","text":"<p>Type: <code>bool</code></p> <p>Value: <code>True</code></p> SNIPPET Python<pre><code>SESSION_COOKIE_SECURE: bool = True\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#csrf_cookie_secure","title":"<code>CSRF_COOKIE_SECURE</code>","text":"<p>Type: <code>bool</code></p> <p>Value: <code>True</code></p> SNIPPET Python<pre><code>CSRF_COOKIE_SECURE: bool = True\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#installed_apps","title":"<code>INSTALLED_APPS</code>","text":"<p>Type: <code>list[str]</code></p> <p>Value: <code>['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'crispy_forms', 'crispy_bootstrap4', 'whitenoise', 'captcha', 'account', 'honeypot', 'home', 'secret', 'err', 'mail', 'general']</code></p> SNIPPET Python<pre><code>INSTALLED_APPS: list[str] = ['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'crispy_forms', 'crispy_bootstrap4', 'whitenoise', 'captcha', 'account', 'honeypot', 'home', 'secret', 'err', 'mail', 'general']\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#middleware","title":"<code>MIDDLEWARE</code>","text":"<p>Type: <code>list[str]</code></p> <p>Value: <code>['django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware']</code></p> SNIPPET Python<pre><code>MIDDLEWARE: list[str] = ['django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware']\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#root_urlconf","title":"<code>ROOT_URLCONF</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'CORE.urls'</code></p> SNIPPET Python<pre><code>ROOT_URLCONF: Final[str] = 'CORE.urls'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#templates","title":"<code>TEMPLATES</code>","text":"<p>Type: <code>Final[list[dict[str, str | list[Path] | bool | dict[str, list[str]]]]]</code></p> <p>Value: <code>[{'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True, 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']}}]</code></p> SNIPPET Python<pre><code>TEMPLATES: Final[list[dict[str, str | list[Path] | bool | dict[str, list[str]]]]] = [{'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True, 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']}}]\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#wsgi_application","title":"<code>WSGI_APPLICATION</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'CORE.wsgi.application'</code></p> SNIPPET Python<pre><code>WSGI_APPLICATION: Final[str] = 'CORE.wsgi.application'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#databases","title":"<code>DATABASES</code>","text":"<p>Type: <code>dict[str, dict[str, str | Path]]</code></p> <p>Value: <code>{'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}}</code></p> SNIPPET Python<pre><code>DATABASES: dict[str, dict[str, str | Path]] = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}}\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#auth_password_validators","title":"<code>AUTH_PASSWORD_VALIDATORS</code>","text":"<p>Type: <code>list[dict[str, str]]</code></p> <p>Value: <code>[{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'}, {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'}, {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'}, {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}]</code></p> SNIPPET Python<pre><code>AUTH_PASSWORD_VALIDATORS: list[dict[str, str]] = [{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'}, {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'}, {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'}, {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}]\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#language_code","title":"<code>LANGUAGE_CODE</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'pt-br'</code></p> SNIPPET Python<pre><code>LANGUAGE_CODE: Final[str] = 'pt-br'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#time_zone","title":"<code>TIME_ZONE</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'America/Sao_Paulo'</code></p> SNIPPET Python<pre><code>TIME_ZONE: Final[str] = 'America/Sao_Paulo'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#use_i18n","title":"<code>USE_I18N</code>","text":"<p>Type: <code>Final[bool]</code></p> <p>Value: <code>True</code></p> SNIPPET Python<pre><code>USE_I18N: Final[bool] = True\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#use_tz","title":"<code>USE_TZ</code>","text":"<p>Type: <code>Final[bool]</code></p> <p>Value: <code>True</code></p> SNIPPET Python<pre><code>USE_TZ: Final[bool] = True\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#static_url","title":"<code>STATIC_URL</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'/static/'</code></p> SNIPPET Python<pre><code>STATIC_URL: Final[str] = '/static/'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#static_root","title":"<code>STATIC_ROOT</code>","text":"<p>Type: <code>Final[Path]</code></p> <p>Value: <code>BASE_DIR / 'staticfiles'</code></p> SNIPPET Python<pre><code>STATIC_ROOT: Final[Path] = BASE_DIR / 'staticfiles'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#staticfiles_dirs","title":"<code>STATICFILES_DIRS</code>","text":"<p>Type: <code>Final[list[Path]]</code></p> <p>Value: <code>[BASE_DIR / 'static']</code></p> SNIPPET Python<pre><code>STATICFILES_DIRS: Final[list[Path]] = [BASE_DIR / 'static']\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#staticfiles_storage","title":"<code>STATICFILES_STORAGE</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'whitenoise.storage.CompressedManifestStaticFilesStorage'</code></p> SNIPPET Python<pre><code>STATICFILES_STORAGE: Final[str] = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#default_auto_field","title":"<code>DEFAULT_AUTO_FIELD</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'django.db.models.BigAutoField'</code></p> SNIPPET Python<pre><code>DEFAULT_AUTO_FIELD: Final[str] = 'django.db.models.BigAutoField'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#auth_user_model","title":"<code>AUTH_USER_MODEL</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'account.User'</code></p> SNIPPET Python<pre><code>AUTH_USER_MODEL: Final[str] = 'account.User'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#logout_redirect_url","title":"<code>LOGOUT_REDIRECT_URL</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'conta/entrar'</code></p> SNIPPET Python<pre><code>LOGOUT_REDIRECT_URL: Final[str] = 'conta/entrar'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#crispy_allowed_template_packs","title":"<code>CRISPY_ALLOWED_TEMPLATE_PACKS</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'bootstrap4'</code></p> SNIPPET Python<pre><code>CRISPY_ALLOWED_TEMPLATE_PACKS: Final[str] = 'bootstrap4'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#crispy_template_pack","title":"<code>CRISPY_TEMPLATE_PACK</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'bootstrap4'</code></p> SNIPPET Python<pre><code>CRISPY_TEMPLATE_PACK: Final[str] = 'bootstrap4'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#email_backend","title":"<code>EMAIL_BACKEND</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'django.core.mail.backends.console.EmailBackend'</code></p> SNIPPET Python<pre><code>EMAIL_BACKEND: str = 'django.core.mail.backends.console.EmailBackend'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#email_host","title":"<code>EMAIL_HOST</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'smtp.gmail.com'</code></p> SNIPPET Python<pre><code>EMAIL_HOST: str = 'smtp.gmail.com'\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#email_port","title":"<code>EMAIL_PORT</code>","text":"<p>Type: <code>int</code></p> <p>Value: <code>587</code></p> SNIPPET Python<pre><code>EMAIL_PORT: int = 587\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#email_use_tls","title":"<code>EMAIL_USE_TLS</code>","text":"<p>Type: <code>bool</code></p> <p>Value: <code>True</code></p> SNIPPET Python<pre><code>EMAIL_USE_TLS: bool = True\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#message_tags","title":"<code>MESSAGE_TAGS</code>","text":"<p>Type: <code>dict[int, str]</code></p> <p>Value: <code>{messages.DEBUG: 'alert-primary', messages.INFO: 'alert-info', messages.SUCCESS: 'alert-success', messages.WARNING: 'alert-warning', messages.ERROR: 'alert-danger'}</code></p> SNIPPET Python<pre><code>MESSAGE_TAGS: dict[int, str] = {messages.DEBUG: 'alert-primary', messages.INFO: 'alert-info', messages.SUCCESS: 'alert-success', messages.WARNING: 'alert-warning', messages.ERROR: 'alert-danger'}\n</code></pre>"},{"location":"Codebase/CORE/settings/base.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/base.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/base.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/deploy.py/","title":"File: <code>deploy.py</code>","text":"<p>Path: <code>SWARDEN.CORE.settings</code></p>"},{"location":"Codebase/CORE/settings/deploy.py/#imports","title":"Imports","text":""},{"location":"Codebase/CORE/settings/deploy.py/#import-getenv","title":"<code>import getenv</code>","text":"<p>Path: <code>os</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from os import getenv\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#import-dj_database_url","title":"<code>import dj_database_url</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import dj_database_url\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#import","title":"<code>import *</code>","text":"<p>Path: <code>CORE.settings.base</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from CORE.settings.base import *\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#consts","title":"Consts","text":""},{"location":"Codebase/CORE/settings/deploy.py/#databases","title":"<code>DATABASES</code>","text":"<p>Type: <code>Unknown</code></p> <p>Value: <code>{'default': dj_database_url.config(default=str(getenv('DATABASE_URL')))}</code></p> SNIPPET Python<pre><code>DATABASES = {'default': dj_database_url.config(default=str(getenv('DATABASE_URL')))}\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#debug","title":"<code>DEBUG</code>","text":"<p>Type: <code>bool</code></p> <p>Value: <code>bool(getenv('DEBUG', False))</code></p> SNIPPET Python<pre><code>DEBUG: bool = bool(getenv('DEBUG', False))\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#secret_key","title":"<code>SECRET_KEY</code>","text":"<p>Type: <code>str | None</code></p> <p>Value: <code>getenv('SECRET_KEY')</code></p> SNIPPET Python<pre><code>SECRET_KEY: str | None = getenv('SECRET_KEY')\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#allowed_hosts","title":"<code>ALLOWED_HOSTS</code>","text":"<p>Type: <code>list[str]</code></p> <p>Value: <code>list(map(lambda url: url.strip(), str(getenv('ALLOWED_HOSTS')).split(',')))</code></p> SNIPPET Python<pre><code>ALLOWED_HOSTS: list[str] = list(map(lambda url: url.strip(), str(getenv('ALLOWED_HOSTS')).split(',')))\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#email_backend","title":"<code>EMAIL_BACKEND</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'django.core.mail.backends.smtp.EmailBackend'</code></p> SNIPPET Python<pre><code>EMAIL_BACKEND: str = 'django.core.mail.backends.smtp.EmailBackend'\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#email_host_user","title":"<code>EMAIL_HOST_USER</code>","text":"<p>Type: <code>str | None</code></p> <p>Value: <code>getenv('SWARDEN_EMAIL_DOMAIN')</code></p> SNIPPET Python<pre><code>EMAIL_HOST_USER: str | None = getenv('SWARDEN_EMAIL_DOMAIN')\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#email_host_password","title":"<code>EMAIL_HOST_PASSWORD</code>","text":"<p>Type: <code>str | None</code></p> <p>Value: <code>getenv('SWARDEN_EMAIL_PASSWORD')</code></p> SNIPPET Python<pre><code>EMAIL_HOST_PASSWORD: str | None = getenv('SWARDEN_EMAIL_PASSWORD')\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#secure_proxy_ssl_header","title":"<code>SECURE_PROXY_SSL_HEADER</code>","text":"<p>Type: <code>tuple[str, str]</code></p> <p>Value: <code>('HTTP_X_FORWARDED_PROTO', 'https')</code></p> SNIPPET Python<pre><code>SECURE_PROXY_SSL_HEADER: tuple[str, str] = ('HTTP_X_FORWARDED_PROTO', 'https')\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#secure_ssl_redirect","title":"<code>SECURE_SSL_REDIRECT</code>","text":"<p>Type: <code>bool</code></p> <p>Value: <code>True</code></p> SNIPPET Python<pre><code>SECURE_SSL_REDIRECT: bool = True\n</code></pre>"},{"location":"Codebase/CORE/settings/deploy.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/deploy.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/deploy.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/dev.py/","title":"File: <code>dev.py</code>","text":"<p>Path: <code>SWARDEN.CORE.settings</code></p>"},{"location":"Codebase/CORE/settings/dev.py/#imports","title":"Imports","text":""},{"location":"Codebase/CORE/settings/dev.py/#import-getenv","title":"<code>import getenv</code>","text":"<p>Path: <code>os</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from os import getenv\n</code></pre>"},{"location":"Codebase/CORE/settings/dev.py/#import","title":"<code>import *</code>","text":"<p>Path: <code>CORE.settings.base</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from CORE.settings.base import *\n</code></pre>"},{"location":"Codebase/CORE/settings/dev.py/#consts","title":"Consts","text":""},{"location":"Codebase/CORE/settings/dev.py/#databases","title":"<code>DATABASES</code>","text":"<p>Type: <code>dict[str, dict[str, str | Path]]</code></p> <p>Value: <code>{'default': {'ENGINE': 'django.db.backends.postgresql', 'NAME': getenv('DATABASE_NAME', 'postgres'), 'USER': getenv('DATABASE_USER', 'postgres'), 'PASSWORD': getenv('DATABASE_PASSWORD', 'postgres'), 'HOST': getenv('DATABASE_HOST', 'localhost'), 'PORT': '5432'}}</code></p> SNIPPET Python<pre><code>DATABASES: dict[str, dict[str, str | Path]] = {'default': {'ENGINE': 'django.db.backends.postgresql', 'NAME': getenv('DATABASE_NAME', 'postgres'), 'USER': getenv('DATABASE_USER', 'postgres'), 'PASSWORD': getenv('DATABASE_PASSWORD', 'postgres'), 'HOST': getenv('DATABASE_HOST', 'localhost'), 'PORT': '5432'}}\n</code></pre>"},{"location":"Codebase/CORE/settings/dev.py/#debug","title":"<code>DEBUG</code>","text":"<p>Type: <code>Unknown</code></p> <p>Value: <code>bool(getenv('DEBUG', DEBUG))</code></p> SNIPPET Python<pre><code>DEBUG = bool(getenv('DEBUG', DEBUG))\n</code></pre>"},{"location":"Codebase/CORE/settings/dev.py/#secret_key","title":"<code>SECRET_KEY</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>getenv('SECRET_KEY', SECRET_KEY)</code></p> SNIPPET Python<pre><code>SECRET_KEY: str = getenv('SECRET_KEY', SECRET_KEY)\n</code></pre>"},{"location":"Codebase/CORE/settings/dev.py/#allowed_hosts","title":"<code>ALLOWED_HOSTS</code>","text":"<p>Type: <code>list[str]</code></p> <p>Value: <code>list(str(getenv('ALLOWED_HOSTS', ALLOWED_HOSTS)))</code></p> SNIPPET Python<pre><code>ALLOWED_HOSTS: list[str] = list(str(getenv('ALLOWED_HOSTS', ALLOWED_HOSTS)))\n</code></pre>"},{"location":"Codebase/CORE/settings/dev.py/#captcha_test_mode","title":"<code>CAPTCHA_TEST_MODE</code>","text":"<p>Type: <code>bool</code></p> <p>Value: <code>bool(getenv('CAPTCHA_TEST_MODE', True))</code></p> SNIPPET Python<pre><code>CAPTCHA_TEST_MODE: bool = bool(getenv('CAPTCHA_TEST_MODE', True))\n</code></pre>"},{"location":"Codebase/CORE/settings/dev.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/dev.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/CORE/settings/dev.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/admin.py/","title":"File: <code>admin.py</code>","text":"<p>Path: <code>SWARDEN.account</code></p>"},{"location":"Codebase/account/admin.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/admin.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/account/admin.py/#import-type","title":"<code>import Type</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Type\n</code></pre>"},{"location":"Codebase/account/admin.py/#import-swarden_admin","title":"<code>import swarden_admin</code>","text":"<p>Path: <code>CORE.admin</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from CORE.admin import swarden_admin\n</code></pre>"},{"location":"Codebase/account/admin.py/#import-modeladmin","title":"<code>import ModelAdmin</code>","text":"<p>Path: <code>django.contrib.admin</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.admin import ModelAdmin\n</code></pre>"},{"location":"Codebase/account/admin.py/#import-admin","title":"<code>import admin</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import admin\n</code></pre>"},{"location":"Codebase/account/admin.py/#import-userchangeform","title":"<code>import UserChangeForm</code>","text":"<p>Path: <code>account.forms</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.forms import UserChangeForm\n</code></pre>"},{"location":"Codebase/account/admin.py/#import-usercreationform","title":"<code>import UserCreationForm</code>","text":"<p>Path: <code>account.forms</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.forms import UserCreationForm\n</code></pre>"},{"location":"Codebase/account/admin.py/#import-activationaccounttoken","title":"<code>import ActivationAccountToken</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import ActivationAccountToken\n</code></pre>"},{"location":"Codebase/account/admin.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/account/admin.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/admin.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/admin.py/#class-useradmin","title":"<code>class UserAdmin</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class UserAdmin(auth_admin.UserAdmin):\n    list_display: Final = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'is_active')\n    search_fields: Final = ('username', 'email', 'first_name', 'last_name')\n    add_fieldsets: Final = ((None, {'classes': ('wide',), 'fields': ('username', 'first_name', 'last_name', 'email', 'password1', 'password2')}),)\n    form: Type[UserChangeForm] = UserChangeForm\n    add_form: Type[UserCreationForm] = UserCreationForm\n</code></pre>"},{"location":"Codebase/account/admin.py/#class-activationaccounttokenadmin","title":"<code>class ActivationAccountTokenAdmin</code>","text":"<p>Parents: <code>ModelAdmin</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class ActivationAccountTokenAdmin(ModelAdmin):\n    list_filter: Final = ('user__is_active',)\n</code></pre>"},{"location":"Codebase/account/admin.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/account/admin.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/apps.py/","title":"File: <code>apps.py</code>","text":"<p>Path: <code>SWARDEN.account</code></p>"},{"location":"Codebase/account/apps.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/apps.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/account/apps.py/#import-appconfig","title":"<code>import AppConfig</code>","text":"<p>Path: <code>django.apps</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.apps import AppConfig\n</code></pre>"},{"location":"Codebase/account/apps.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/apps.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/apps.py/#class-accountconfig","title":"<code>class AccountConfig</code>","text":"<p>Parents: <code>AppConfig</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class AccountConfig(AppConfig):\n    default_auto_field: Final[str] = 'django.db.models.BigAutoField'\n    name: Final[str] = 'account'\n    verbose_name: Final[str] = 'Usu\u00e1rio'\n</code></pre>"},{"location":"Codebase/account/apps.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/account/apps.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/forms.py/","title":"File: <code>forms.py</code>","text":"<p>Path: <code>SWARDEN.account</code></p>"},{"location":"Codebase/account/forms.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/forms.py/#import-forms","title":"<code>import forms</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import forms\n</code></pre>"},{"location":"Codebase/account/forms.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/account/forms.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/forms.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/forms.py/#class-userchangeform","title":"<code>class UserChangeForm</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class UserChangeForm(forms.UserChangeForm):\n\n    class Meta(forms.UserChangeForm.Meta):\n        model = User\n</code></pre>"},{"location":"Codebase/account/forms.py/#class-usercreationform","title":"<code>class UserCreationForm</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class UserCreationForm(forms.UserCreationForm):\n\n    class Meta(forms.UserCreationForm.Meta):\n        model = User\n</code></pre>"},{"location":"Codebase/account/forms.py/#class-meta","title":"<code>class Meta</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Meta(forms.UserChangeForm.Meta):\n    model = User\n</code></pre>"},{"location":"Codebase/account/forms.py/#class-meta_1","title":"<code>class Meta</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Meta(forms.UserCreationForm.Meta):\n    model = User\n</code></pre>"},{"location":"Codebase/account/forms.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/account/forms.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/models.py/","title":"File: <code>models.py</code>","text":"<p>Path: <code>SWARDEN.account</code></p>"},{"location":"Codebase/account/models.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/models.py/#import-datetime","title":"<code>import datetime</code>","text":"<p>Path: <code>datetime</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from datetime import datetime\n</code></pre>"},{"location":"Codebase/account/models.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/account/models.py/#import-uuid4","title":"<code>import uuid4</code>","text":"<p>Path: <code>uuid</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from uuid import uuid4\n</code></pre>"},{"location":"Codebase/account/models.py/#import-abstractuser","title":"<code>import AbstractUser</code>","text":"<p>Path: <code>django.contrib.auth.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.models import AbstractUser\n</code></pre>"},{"location":"Codebase/account/models.py/#import-maxlengthvalidator","title":"<code>import MaxLengthValidator</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import MaxLengthValidator\n</code></pre>"},{"location":"Codebase/account/models.py/#import-minlengthvalidator","title":"<code>import MinLengthValidator</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import MinLengthValidator\n</code></pre>"},{"location":"Codebase/account/models.py/#import-cascade","title":"<code>import CASCADE</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CASCADE\n</code></pre>"},{"location":"Codebase/account/models.py/#import-booleanfield","title":"<code>import BooleanField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import BooleanField\n</code></pre>"},{"location":"Codebase/account/models.py/#import-charfield","title":"<code>import CharField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CharField\n</code></pre>"},{"location":"Codebase/account/models.py/#import-datetimefield","title":"<code>import DateTimeField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import DateTimeField\n</code></pre>"},{"location":"Codebase/account/models.py/#import-emailfield","title":"<code>import EmailField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import EmailField\n</code></pre>"},{"location":"Codebase/account/models.py/#import-foreignkey","title":"<code>import ForeignKey</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import ForeignKey\n</code></pre>"},{"location":"Codebase/account/models.py/#import-model","title":"<code>import Model</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import Model\n</code></pre>"},{"location":"Codebase/account/models.py/#import-uuidfield","title":"<code>import UUIDField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import UUIDField\n</code></pre>"},{"location":"Codebase/account/models.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/models.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/models.py/#class-user","title":"<code>class User</code>","text":"<p>Parents: <code>AbstractUser</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class User(AbstractUser):\n    first_name: Final[CharField] = CharField(max_length=150, blank=True, verbose_name='Nome')\n    last_name: Final[CharField] = CharField(max_length=150, blank=True, verbose_name='Sobrenome')\n    email: Final[EmailField] = EmailField(unique=True)\n</code></pre>"},{"location":"Codebase/account/models.py/#class-activationaccounttoken","title":"<code>class ActivationAccountToken</code>","text":"<p>Parents: <code>Model</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class ActivationAccountToken(Model):\n    id: Final[UUIDField] = UUIDField(default=uuid4, unique=True, primary_key=True, editable=False)\n    user: Final[ForeignKey] = ForeignKey(User, on_delete=CASCADE)\n    value: Final[CharField] = CharField(max_length=64, validators=[MinLengthValidator(64), MaxLengthValidator(64)])\n    used: BooleanField = BooleanField(default=False, verbose_name='Usado?')\n    created: Final[DateTimeField] = DateTimeField(auto_now_add=True)\n\n    class Meta:\n        verbose_name: Final[str] = 'Token de Ativa\u00e7\u00e3o'\n        verbose_name_plural: Final[str] = 'Tokens de Ativa\u00e7\u00e3o'\n\n    def __str__(self) -&gt; str:\n        return f'{self.value}'\n\n    def is_valid(self) -&gt; bool:\n        if self.value and len(self.value) == 64 and isinstance(self.used, bool) and self.created and isinstance(self.created, datetime):\n            return True\n        return False\n</code></pre>"},{"location":"Codebase/account/models.py/#class-meta","title":"<code>class Meta</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Meta:\n    verbose_name: Final[str] = 'Token de Ativa\u00e7\u00e3o'\n    verbose_name_plural: Final[str] = 'Tokens de Ativa\u00e7\u00e3o'\n</code></pre>"},{"location":"Codebase/account/models.py/#functions","title":"Functions","text":""},{"location":"Codebase/account/models.py/#def-__str__","title":"<code>def __str__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __str__(self) -&gt; str:\n    return f'{self.value}'\n</code></pre>"},{"location":"Codebase/account/models.py/#def-is_valid","title":"<code>def is_valid</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def is_valid(self) -&gt; bool:\n    if self.value and len(self.value) == 64 and isinstance(self.used, bool) and self.created and isinstance(self.created, datetime):\n        return True\n    return False\n</code></pre>"},{"location":"Codebase/account/models.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/urls.py/","title":"File: <code>urls.py</code>","text":"<p>Path: <code>SWARDEN.account</code></p>"},{"location":"Codebase/account/urls.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/urls.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/account/urls.py/#import-urlpattern","title":"<code>import URLPattern</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLPattern\n</code></pre>"},{"location":"Codebase/account/urls.py/#import-path","title":"<code>import path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import path\n</code></pre>"},{"location":"Codebase/account/urls.py/#import-activate_account","title":"<code>import activate_account</code>","text":"<p>Path: <code>account.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.views import activate_account\n</code></pre>"},{"location":"Codebase/account/urls.py/#import-activate_account_missing_parameter","title":"<code>import activate_account_missing_parameter</code>","text":"<p>Path: <code>account.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.views import activate_account_missing_parameter\n</code></pre>"},{"location":"Codebase/account/urls.py/#import-login_view","title":"<code>import login_view</code>","text":"<p>Path: <code>account.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.views import login_view\n</code></pre>"},{"location":"Codebase/account/urls.py/#import-logout_view","title":"<code>import logout_view</code>","text":"<p>Path: <code>account.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.views import logout_view\n</code></pre>"},{"location":"Codebase/account/urls.py/#import-register_view","title":"<code>import register_view</code>","text":"<p>Path: <code>account.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.views import register_view\n</code></pre>"},{"location":"Codebase/account/urls.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/urls.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/account/urls.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/account/urls.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/views.py/","title":"File: <code>views.py</code>","text":"<p>Path: <code>SWARDEN.account</code></p>"},{"location":"Codebase/account/views.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/views.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/account/views.py/#import-cast","title":"<code>import cast</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import cast\n</code></pre>"},{"location":"Codebase/account/views.py/#import-captchafield","title":"<code>import CaptchaField</code>","text":"<p>Path: <code>captcha.fields</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from captcha.fields import CaptchaField\n</code></pre>"},{"location":"Codebase/account/views.py/#import-authenticate","title":"<code>import authenticate</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import authenticate\n</code></pre>"},{"location":"Codebase/account/views.py/#import-login","title":"<code>import login</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import login\n</code></pre>"},{"location":"Codebase/account/views.py/#import-logout","title":"<code>import logout</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import logout\n</code></pre>"},{"location":"Codebase/account/views.py/#import-login_required","title":"<code>import login_required</code>","text":"<p>Path: <code>django.contrib.auth.decorators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.decorators import login_required\n</code></pre>"},{"location":"Codebase/account/views.py/#import-abstractbaseuser","title":"<code>import AbstractBaseUser</code>","text":"<p>Path: <code>django.contrib.auth.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.models import AbstractBaseUser\n</code></pre>"},{"location":"Codebase/account/views.py/#import-error","title":"<code>import error</code>","text":"<p>Path: <code>django.contrib.messages</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.messages import error\n</code></pre>"},{"location":"Codebase/account/views.py/#import-success","title":"<code>import success</code>","text":"<p>Path: <code>django.contrib.messages</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.messages import success\n</code></pre>"},{"location":"Codebase/account/views.py/#import-charfield","title":"<code>import CharField</code>","text":"<p>Path: <code>django.forms</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.forms import CharField\n</code></pre>"},{"location":"Codebase/account/views.py/#import-emailfield","title":"<code>import EmailField</code>","text":"<p>Path: <code>django.forms</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.forms import EmailField\n</code></pre>"},{"location":"Codebase/account/views.py/#import-form","title":"<code>import Form</code>","text":"<p>Path: <code>django.forms</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.forms import Form\n</code></pre>"},{"location":"Codebase/account/views.py/#import-passwordinput","title":"<code>import PasswordInput</code>","text":"<p>Path: <code>django.forms</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.forms import PasswordInput\n</code></pre>"},{"location":"Codebase/account/views.py/#import-textinput","title":"<code>import TextInput</code>","text":"<p>Path: <code>django.forms</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.forms import TextInput\n</code></pre>"},{"location":"Codebase/account/views.py/#import-http404","title":"<code>import Http404</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import Http404\n</code></pre>"},{"location":"Codebase/account/views.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/account/views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/account/views.py/#import-httpresponseredirect","title":"<code>import HttpResponseRedirect</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponseRedirect\n</code></pre>"},{"location":"Codebase/account/views.py/#import-get_object_or_404","title":"<code>import get_object_or_404</code>","text":"<p>Path: <code>django.shortcuts</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.shortcuts import get_object_or_404\n</code></pre>"},{"location":"Codebase/account/views.py/#import-render","title":"<code>import render</code>","text":"<p>Path: <code>django.shortcuts</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.shortcuts import render\n</code></pre>"},{"location":"Codebase/account/views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/account/views.py/#import-force_str","title":"<code>import force_str</code>","text":"<p>Path: <code>django.utils.encoding</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.encoding import force_str\n</code></pre>"},{"location":"Codebase/account/views.py/#import-urlsafe_base64_decode","title":"<code>import urlsafe_base64_decode</code>","text":"<p>Path: <code>django.utils.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.http import urlsafe_base64_decode\n</code></pre>"},{"location":"Codebase/account/views.py/#import-send_email_activate_account_completed","title":"<code>import send_email_activate_account_completed</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import send_email_activate_account_completed\n</code></pre>"},{"location":"Codebase/account/views.py/#import-send_email_activation_account_token","title":"<code>import send_email_activation_account_token</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import send_email_activation_account_token\n</code></pre>"},{"location":"Codebase/account/views.py/#import-activationaccounttoken","title":"<code>import ActivationAccountToken</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import ActivationAccountToken\n</code></pre>"},{"location":"Codebase/account/views.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/account/views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/views.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/views.py/#class-registerform","title":"<code>class RegisterForm</code>","text":"<p>Parents: <code>Form</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class RegisterForm(Form):\n    username: Final[CharField] = CharField(label='', max_length=50, required=True, widget=TextInput(attrs={'placeholder': 'Username (nome de usu\u00e1rio)*', 'class': 'py-2', 'style': 'text-align: center;', 'autofocus': 'autofocus'}), help_text='50 caracteres ou menos. Letras, n\u00fameros e @/./+/-/_ apenas.')\n    first_name: Final[CharField] = CharField(label='', required=True, widget=TextInput(attrs={'placeholder': 'Nome*', 'class': 'mt-3 py-2', 'style': 'text-align: center;'}))\n    last_name: Final[CharField] = CharField(label='', required=True, widget=TextInput(attrs={'placeholder': 'Sobrenome*', 'class': 'py-2', 'style': 'text-align: center;'}))\n    email: Final[EmailField] = EmailField(label='', required=True, widget=TextInput(attrs={'placeholder': 'Email*', 'class': 'mt-3 py-2', 'style': 'text-align: center;'}))\n    password: Final[CharField] = CharField(label='', required=True, widget=PasswordInput(attrs={'placeholder': 'Senha*', 'class': 'mt-3 py-2', 'style': 'text-align: center;'}))\n    password2: Final[CharField] = CharField(label='', required=True, widget=PasswordInput(attrs={'placeholder': 'Confirma\u00e7\u00e3o de senha*', 'class': 'mb-5 py-2', 'style': 'text-align: center;'}))\n    captcha: Final[CaptchaField] = CaptchaField()\n</code></pre>"},{"location":"Codebase/account/views.py/#class-loginform","title":"<code>class LogInForm</code>","text":"<p>Parents: <code>Form</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LogInForm(Form):\n    username: Final[CharField] = CharField(label='', required=True, widget=TextInput(attrs={'placeholder': 'Username*', 'class': 'py-2', 'style': 'text-align: center;', 'autofocus': 'autofocus'}))\n    password: Final[CharField] = CharField(label='', required=True, widget=PasswordInput(attrs={'placeholder': 'Pass*', 'class': 'mt-3 py-2', 'style': 'text-align: center;'}))\n</code></pre>"},{"location":"Codebase/account/views.py/#functions","title":"Functions","text":""},{"location":"Codebase/account/views.py/#def-register_view","title":"<code>def register_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse | HttpResponseRedirect</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def register_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.user.is_authenticated:\n        return HttpResponseRedirect(reverse('home:index'))\n    elif r.method != 'POST':\n        form: Form = RegisterForm()\n        return render(r, 'account/register.html', {'form': form})\n    form: Form = RegisterForm(r.POST)\n    if not form.is_valid():\n        return render(r, 'account/register.html', {'form': form})\n    password: str | None = form.cleaned_data.get('password')\n    password2: str | None = form.cleaned_data.get('password2')\n    if not password or not password2 or password != password2:\n        error(r, 'Senhas n\u00e3o compat\u00edveis')\n        return render(r, 'account/register.html', {'form': form})\n    username: str | None = form.cleaned_data.get('username')\n    email: str | None = form.cleaned_data.get('email')\n    if User.objects.filter(username=username).exists() or User.objects.filter(email=email).exists() or username is None or (email is None):\n        error(r, 'Username e/ou e-mail indispon\u00edvel')\n        return render(r, 'account/register.html', {'form': form})\n    first_name: str = cast(str, form.cleaned_data.get('first_name'))\n    last_name: str = cast(str, form.cleaned_data.get('last_name'))\n    user: User = User.objects.create_user(username=username, first_name=first_name, last_name=last_name, email=email, password=password, is_active=False)\n    send_email_activation_account_token(r.get_host(), user, password)\n    success(r, 'Conta criada. Acesse seu e-mail para ativar sua conta.')\n    return HttpResponseRedirect(reverse('account:login'))\n</code></pre>"},{"location":"Codebase/account/views.py/#def-activate_account_missing_parameter","title":"<code>def activate_account_missing_parameter</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponseRedirect</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest, uidb64: str | None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def activate_account_missing_parameter(r: HttpRequest, uidb64: str | None=None) -&gt; HttpResponseRedirect:\n    return HttpResponseRedirect(reverse('home:index'))\n</code></pre>"},{"location":"Codebase/account/views.py/#def-activate_account","title":"<code>def activate_account</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponseRedirect</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest, uidb64: str, token: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def activate_account(r: HttpRequest, uidb64: str, token: str) -&gt; HttpResponseRedirect:\n    if r.user.is_authenticated:\n        return HttpResponseRedirect(reverse('home:index'))\n    user: User | None = None\n    try:\n        id: int = int(force_str(urlsafe_base64_decode(uidb64)))\n        user = get_object_or_404(User, pk=id)\n    except (TypeError, ValueError, OverflowError, User.DoesNotExist):\n        raise Http404()\n    token_obj: ActivationAccountToken = get_object_or_404(ActivationAccountToken, value=token, used=False)\n    user.is_active = True\n    user.save()\n    token_obj.used = True\n    token_obj.save()\n    login(r, user)\n    send_email_activate_account_completed(str(user.email))\n    return HttpResponseRedirect(reverse('home:index'))\n</code></pre>"},{"location":"Codebase/account/views.py/#def-login_view","title":"<code>def login_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse | HttpResponseRedirect</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def login_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.user.is_authenticated:\n        return HttpResponseRedirect(reverse('home:index'))\n    elif r.method != 'POST':\n        return render(r, 'account/login.html', {'form': LogInForm()})\n    form: Final[Form] = LogInForm(r.POST)\n    if not form.is_valid():\n        return render(r, 'account/login.html', {'form': form})\n    username: Final[str] = str(form.cleaned_data.get('username')).strip()\n    password: Final[str] = str(form.cleaned_data.get('password')).strip()\n    user: AbstractBaseUser | None = authenticate(username=username, password=password)\n    if user is None:\n        error(r, 'Username e/ou senha inv\u00e1lida')\n        return render(r, 'account/login.html', {'form': form})\n    login(r, user)\n    return HttpResponseRedirect(reverse('home:index'))\n</code></pre>"},{"location":"Codebase/account/views.py/#def-logout_view","title":"<code>def logout_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse | HttpResponseRedirect</code></p> <p>Decorators: <code>login_required(login_url='/conta/entrar')</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_required(login_url='/conta/entrar')\ndef logout_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.method == 'POST':\n        logout(r)\n        return HttpResponseRedirect(reverse('account:login'))\n    return render(r, 'account/logout.html')\n</code></pre>"},{"location":"Codebase/account/views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/management/commands/populateuser.py/","title":"File: <code>populateuser.py</code>","text":"<p>Path: <code>SWARDEN.account.management.commands</code></p>"},{"location":"Codebase/account/management/commands/populateuser.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/management/commands/populateuser.py/#import-choice","title":"<code>import choice</code>","text":"<p>Path: <code>random</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from random import choice\n</code></pre>"},{"location":"Codebase/account/management/commands/populateuser.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/account/management/commands/populateuser.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/account/management/commands/populateuser.py/#import-basecommand","title":"<code>import BaseCommand</code>","text":"<p>Path: <code>django.core.management</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.management import BaseCommand\n</code></pre>"},{"location":"Codebase/account/management/commands/populateuser.py/#import-tqdm","title":"<code>import tqdm</code>","text":"<p>Path: <code>tqdm</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from tqdm import tqdm\n</code></pre>"},{"location":"Codebase/account/management/commands/populateuser.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/management/commands/populateuser.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/management/commands/populateuser.py/#class-command","title":"<code>class Command</code>","text":"<p>Parents: <code>BaseCommand</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Command(BaseCommand):\n\n    def handle(self, *args: Any, **options: Any) -&gt; None:\n        self.stdout.write('\\nPopulating account.User')\n        with open('./account/management/commands/populate_user.txt') as sample:\n            lines: list[list[str]] = [i.strip().split('::') for i in sample.readlines()]\n        for i in tqdm(lines, desc='Users', bar_format='{l_bar}{bar:100}{r_bar}{bar:-10b}'):\n            (username, email, password) = i\n            user: User = User.objects.create_user(username=username, email=email, password=password)\n            if choice([True, False]):\n                user.is_active = False\n            user.save()\n</code></pre>"},{"location":"Codebase/account/management/commands/populateuser.py/#functions","title":"Functions","text":""},{"location":"Codebase/account/management/commands/populateuser.py/#def-handle","title":"<code>def handle</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def handle(self, *args: Any, **options: Any) -&gt; None:\n    self.stdout.write('\\nPopulating account.User')\n    with open('./account/management/commands/populate_user.txt') as sample:\n        lines: list[list[str]] = [i.strip().split('::') for i in sample.readlines()]\n    for i in tqdm(lines, desc='Users', bar_format='{l_bar}{bar:100}{r_bar}{bar:-10b}'):\n        (username, email, password) = i\n        user: User = User.objects.create_user(username=username, email=email, password=password)\n        if choice([True, False]):\n            user.is_active = False\n        user.save()\n</code></pre>"},{"location":"Codebase/account/management/commands/populateuser.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/migrations/0001_initial.py/","title":"File: <code>0001_initial.py</code>","text":"<p>Path: <code>SWARDEN.account.migrations</code></p>"},{"location":"Codebase/account/migrations/0001_initial.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/migrations/0001_initial.py/#import-djangocontribauthmodels","title":"<code>import django.contrib.auth.models</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import django.contrib.auth.models\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#import-djangocontribauthvalidators","title":"<code>import django.contrib.auth.validators</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import django.contrib.auth.validators\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#import-djangocorevalidators","title":"<code>import django.core.validators</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import django.core.validators\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#import-djangodbmodelsdeletion","title":"<code>import django.db.models.deletion</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import django.db.models.deletion\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#import-djangoutilstimezone","title":"<code>import django.utils.timezone</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import django.utils.timezone\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#import-uuid","title":"<code>import uuid</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import uuid\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#import-settings","title":"<code>import settings</code>","text":"<p>Path: <code>django.conf</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.conf import settings\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#import-migrations","title":"<code>import migrations</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import migrations\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#import-models","title":"<code>import models</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import models\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/migrations/0001_initial.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/migrations/0001_initial.py/#class-migration","title":"<code>class Migration</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Migration(migrations.Migration):\n    initial = True\n    dependencies = [('auth', '0012_alter_user_first_name_max_length')]\n    operations = [migrations.CreateModel(name='User', fields=[('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('password', models.CharField(max_length=128, verbose_name='password')), ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')), ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')), ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')), ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')), ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')), ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')), ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Nome')), ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Sobrenome')), ('email', models.EmailField(max_length=254, unique=True)), ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')), ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'))], options={'verbose_name': 'user', 'verbose_name_plural': 'users', 'abstract': False}, managers=[('objects', django.contrib.auth.models.UserManager())]), migrations.CreateModel(name='ActivationAccountToken', fields=[('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)), ('value', models.CharField(max_length=64, validators=[django.core.validators.MinLengthValidator(64), django.core.validators.MaxLengthValidator(64)])), ('used', models.BooleanField(default=False, verbose_name='Usado?')), ('created', models.DateTimeField(auto_now_add=True)), ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL))], options={'verbose_name': 'Token de Ativa\u00e7\u00e3o', 'verbose_name_plural': 'Tokens de Ativa\u00e7\u00e3o'})]\n</code></pre>"},{"location":"Codebase/account/migrations/0001_initial.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/account/migrations/0001_initial.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/tests/test_models.py/","title":"File: <code>test_models.py</code>","text":"<p>Path: <code>SWARDEN.account.tests</code></p>"},{"location":"Codebase/account/tests/test_models.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/tests/test_models.py/#import-datetime","title":"<code>import datetime</code>","text":"<p>Path: <code>datetime</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from datetime import datetime\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#import-filterwarnings","title":"<code>import filterwarnings</code>","text":"<p>Path: <code>warnings</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from warnings import filterwarnings\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#import-validationerror","title":"<code>import ValidationError</code>","text":"<p>Path: <code>django.core.exceptions</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.exceptions import ValidationError\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#import-dataerror","title":"<code>import DataError</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import DataError\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#import-atomic","title":"<code>import atomic</code>","text":"<p>Path: <code>django.db.transaction</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.transaction import atomic\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#import-activationaccounttoken","title":"<code>import ActivationAccountToken</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import ActivationAccountToken\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/tests/test_models.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/tests/test_models.py/#class-activationaccounttokentestcase","title":"<code>class ActivationAccountTokenTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class ActivationAccountTokenTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        filterwarnings('ignore', category=RuntimeWarning)\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        self.token1: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=self.user, used=False)\n        self.token2: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=self.user, used=True)\n        self.token3: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=self.user, used=False, created=None)\n        try:\n            with atomic():\n                self.token4: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 65, user=self.user, used=False)\n        except DataError:\n            self.token4: ActivationAccountToken = ActivationAccountToken.objects.create(value=int, user=self.user, used=False)\n        self.token5: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 63, user=self.user, used=False)\n\n    def test_token_instance_validity(self) -&gt; None:\n        \"\"\"Tests token instance of correct class\"\"\"\n        for token in ActivationAccountToken.objects.all():\n            with self.subTest(token=token):\n                self.assertIsInstance(token, ActivationAccountToken)\n\n    def test_token_special_str_method_return(self) -&gt; None:\n        \"\"\"Tests token return value of __str__ method\"\"\"\n        token1: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token1.pk)\n        self.assertEqual(token1.__str__(), 'x' * 64)\n\n    def test_token_key_value_assertion(self) -&gt; None:\n        \"\"\"Tests token correct attribuition of value\"\"\"\n        token1: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token1.pk)\n        self.assertEqual(token1.value, 'x' * 64)\n        self.assertFalse(token1.used)\n        self.assertIsInstance(token1.created, datetime)\n\n    def test_token_create_validity(self) -&gt; None:\n        \"\"\"Tests token creation integrity and validation\"\"\"\n        token1: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token1.pk)\n        token2: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token2.pk)\n        token3: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token3.pk)\n        token4: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token4.pk)\n        token5: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token5.pk)\n        self.assertEqual(ActivationAccountToken.objects.all().count(), 5)\n        self.assertTrue(token1.is_valid())\n        self.assertTrue(token2.is_valid())\n        self.assertTrue(token3.is_valid())\n        self.assertFalse(token4.is_valid())\n        self.assertFalse(token5.is_valid())\n\n    def test_token_update_validity(self) -&gt; None:\n        \"\"\"Tests token update integrity and validation\"\"\"\n        ActivationAccountToken.objects.filter(pk=self.token4.pk).update(value='x' * 64, created='2009-6-5')\n        ActivationAccountToken.objects.filter(pk=self.token5.pk).update(value='x' * 64, used=True)\n        for token in ActivationAccountToken.objects.all():\n            with self.subTest(token=token):\n                self.assertTrue(token.is_valid())\n\n    def test_token_delete_validity(self) -&gt; None:\n        \"\"\"Tests token correct deletion\"\"\"\n        for token in ActivationAccountToken.objects.all():\n            if not token.is_valid():\n                token.delete()\n        self.assertEqual(ActivationAccountToken.objects.all().count(), 3)\n\n    def test_token_db_exception_raises(self) -&gt; None:\n        \"\"\"Tests token correct integrity and validation with raised exceptions\"\"\"\n        raise_kwargs: dict[str, dict[str, str | bool | int | None]] = {'token1': {'value': 'x' * 63}, 'token2': {'value': 'x' * 65}, 'token3': {'used': True}, 'token4': {'used': False}, 'token5': {'value': 'x' * 64, 'used': None}, 'token6': {'value': 'x' * 64, 'used': 'foo'}, 'token7': {'value': 'x' * 64, 'used': 2}, 'token8': {'value': 'x' * 64}}\n        for scenario in raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                with self.assertRaises(ValidationError):\n                    with atomic():\n                        instance = ActivationAccountToken(**raise_kwargs[scenario])\n                        instance.full_clean()\n        no_raise_kwargs: dict[str, dict[str, str | User | bool | datetime]] = {'token1': {'value': 'x' * 64, 'user': self.user}, 'token2': {'value': 'x' * 64, 'user': self.user, 'used': False}, 'token3': {'value': 'x' * 64, 'user': self.user, 'used': True}, 'token4': {'value': 'x' * 64, 'user': self.user, 'created': datetime(2004, 5, 25)}}\n        for scenario in no_raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                instance: ActivationAccountToken = ActivationAccountToken(**no_raise_kwargs[scenario])\n                instance.full_clean()\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#functions","title":"Functions","text":""},{"location":"Codebase/account/tests/test_models.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    filterwarnings('ignore', category=RuntimeWarning)\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    self.token1: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=self.user, used=False)\n    self.token2: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=self.user, used=True)\n    self.token3: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=self.user, used=False, created=None)\n    try:\n        with atomic():\n            self.token4: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 65, user=self.user, used=False)\n    except DataError:\n        self.token4: ActivationAccountToken = ActivationAccountToken.objects.create(value=int, user=self.user, used=False)\n    self.token5: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 63, user=self.user, used=False)\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#def-test_token_instance_validity","title":"<code>def test_token_instance_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_token_instance_validity(self) -&gt; None:\n    \"\"\"Tests token instance of correct class\"\"\"\n    for token in ActivationAccountToken.objects.all():\n        with self.subTest(token=token):\n            self.assertIsInstance(token, ActivationAccountToken)\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#def-test_token_special_str_method_return","title":"<code>def test_token_special_str_method_return</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_token_special_str_method_return(self) -&gt; None:\n    \"\"\"Tests token return value of __str__ method\"\"\"\n    token1: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token1.pk)\n    self.assertEqual(token1.__str__(), 'x' * 64)\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#def-test_token_key_value_assertion","title":"<code>def test_token_key_value_assertion</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_token_key_value_assertion(self) -&gt; None:\n    \"\"\"Tests token correct attribuition of value\"\"\"\n    token1: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token1.pk)\n    self.assertEqual(token1.value, 'x' * 64)\n    self.assertFalse(token1.used)\n    self.assertIsInstance(token1.created, datetime)\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#def-test_token_create_validity","title":"<code>def test_token_create_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_token_create_validity(self) -&gt; None:\n    \"\"\"Tests token creation integrity and validation\"\"\"\n    token1: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token1.pk)\n    token2: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token2.pk)\n    token3: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token3.pk)\n    token4: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token4.pk)\n    token5: ActivationAccountToken = ActivationAccountToken.objects.get(pk=self.token5.pk)\n    self.assertEqual(ActivationAccountToken.objects.all().count(), 5)\n    self.assertTrue(token1.is_valid())\n    self.assertTrue(token2.is_valid())\n    self.assertTrue(token3.is_valid())\n    self.assertFalse(token4.is_valid())\n    self.assertFalse(token5.is_valid())\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#def-test_token_update_validity","title":"<code>def test_token_update_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_token_update_validity(self) -&gt; None:\n    \"\"\"Tests token update integrity and validation\"\"\"\n    ActivationAccountToken.objects.filter(pk=self.token4.pk).update(value='x' * 64, created='2009-6-5')\n    ActivationAccountToken.objects.filter(pk=self.token5.pk).update(value='x' * 64, used=True)\n    for token in ActivationAccountToken.objects.all():\n        with self.subTest(token=token):\n            self.assertTrue(token.is_valid())\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#def-test_token_delete_validity","title":"<code>def test_token_delete_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_token_delete_validity(self) -&gt; None:\n    \"\"\"Tests token correct deletion\"\"\"\n    for token in ActivationAccountToken.objects.all():\n        if not token.is_valid():\n            token.delete()\n    self.assertEqual(ActivationAccountToken.objects.all().count(), 3)\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#def-test_token_db_exception_raises","title":"<code>def test_token_db_exception_raises</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_token_db_exception_raises(self) -&gt; None:\n    \"\"\"Tests token correct integrity and validation with raised exceptions\"\"\"\n    raise_kwargs: dict[str, dict[str, str | bool | int | None]] = {'token1': {'value': 'x' * 63}, 'token2': {'value': 'x' * 65}, 'token3': {'used': True}, 'token4': {'used': False}, 'token5': {'value': 'x' * 64, 'used': None}, 'token6': {'value': 'x' * 64, 'used': 'foo'}, 'token7': {'value': 'x' * 64, 'used': 2}, 'token8': {'value': 'x' * 64}}\n    for scenario in raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            with self.assertRaises(ValidationError):\n                with atomic():\n                    instance = ActivationAccountToken(**raise_kwargs[scenario])\n                    instance.full_clean()\n    no_raise_kwargs: dict[str, dict[str, str | User | bool | datetime]] = {'token1': {'value': 'x' * 64, 'user': self.user}, 'token2': {'value': 'x' * 64, 'user': self.user, 'used': False}, 'token3': {'value': 'x' * 64, 'user': self.user, 'used': True}, 'token4': {'value': 'x' * 64, 'user': self.user, 'created': datetime(2004, 5, 25)}}\n    for scenario in no_raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            instance: ActivationAccountToken = ActivationAccountToken(**no_raise_kwargs[scenario])\n            instance.full_clean()\n</code></pre>"},{"location":"Codebase/account/tests/test_models.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/account/tests/test_views.py/","title":"File: <code>test_views.py</code>","text":"<p>Path: <code>SWARDEN.account.tests</code></p>"},{"location":"Codebase/account/tests/test_views.py/#imports","title":"Imports","text":""},{"location":"Codebase/account/tests/test_views.py/#import-cast","title":"<code>import cast</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import cast\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#import-get_user","title":"<code>import get_user</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import get_user\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#import-force_bytes","title":"<code>import force_bytes</code>","text":"<p>Path: <code>django.utils.encoding</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.encoding import force_bytes\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#import-urlsafe_base64_encode","title":"<code>import urlsafe_base64_encode</code>","text":"<p>Path: <code>django.utils.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.http import urlsafe_base64_encode\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#import-activationaccounttoken","title":"<code>import ActivationAccountToken</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import ActivationAccountToken\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/account/tests/test_views.py/#classes","title":"Classes","text":""},{"location":"Codebase/account/tests/test_views.py/#class-baseaccounttestcase","title":"<code>class BaseAccountTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class BaseAccountTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        User.objects.create_user(username='user', password='password', email='user@email.com')\n        self.REGISTER_URL: str = reverse('account:register')\n        self.LOGIN_URL: str = reverse('account:login')\n        self.LOGOUT_URL: str = reverse('account:logout')\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#class-registerviewtestcase","title":"<code>class RegisterViewTestCase</code>","text":"<p>Parents: <code>BaseAccountTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class RegisterViewTestCase(BaseAccountTestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /conta/registrar | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.REGISTER_URL)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/register.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_invalid_form(self) -&gt; None:\n        \"\"\"POST /conta/registrar | anonymous user | invalid form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(self.REGISTER_URL, {'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'})\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/register.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_different_passwords(self) -&gt; None:\n        \"\"\"POST /conta/registrar | anonymous user | different passwords\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        post_data: dict[str, str] = {'username': 'username', 'first_name': 'first', 'last_name': 'last', 'email': 'another@example.com', 'password': '12345678', 'password2': '11223344', 'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'}\n        res: HttpResponse = self.client.post(self.REGISTER_URL, post_data)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/register.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_existing_register(self) -&gt; None:\n        \"\"\"POST /conta/registrar | anonymous user | register already exists\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        post_data: dict[str, str] = {'username': 'user', 'first_name': 'first', 'last_name': 'last', 'email': 'email@example.com', 'password': 'password', 'password2': 'password', 'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'}\n        res: HttpResponse = self.client.post(self.REGISTER_URL, post_data)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/register.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_empty_names(self) -&gt; None:\n        \"\"\"POST /conta/registrar | anonymous user | empty first_name and/or last_name\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        post_data: dict[str, str | None] = {'username': 'username', 'first_name': '', 'last_name': 'last', 'email': 'email@example.com', 'password': 'password', 'password2': 'password', 'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'}\n        res: HttpResponse = self.client.post(self.REGISTER_URL, post_data)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/register.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_valid_form(self) -&gt; None:\n        \"\"\"POST /conta/registrar | anonymous user | valid form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        post_data: dict[str, str] = {'username': 'username', 'first_name': 'first', 'last_name': 'last', 'email': 'another@example.com', 'password': 'password', 'password2': 'password', 'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'}\n        res: HttpResponse = self.client.post(self.REGISTER_URL, post_data, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /conta/registrar | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.REGISTER_URL)\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('home:index'))\n        res: HttpResponse = self.client.get(self.REGISTER_URL, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/index.html')\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#class-activateaccountviewtestcase","title":"<code>class ActivateAccountViewTestCase</code>","text":"<p>Parents: <code>BaseAccountTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class ActivateAccountViewTestCase(BaseAccountTestCase):\n\n    def test_GET_anonymous_user_no_parameter(self) -&gt; None:\n        \"\"\"GET /conta/ativar/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('account:activate_no_parameter'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('home:index'))\n        res: HttpResponse = self.client.get(reverse('account:activate_no_parameter'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/landing.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_anonymous_user_missing_token(self) -&gt; None:\n        \"\"\"GET /conta/ativar/&lt;Any&gt; | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('account:activate_no_token', args=['404']))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('home:index'))\n        res: HttpResponse = self.client.get(reverse('account:activate_no_token', args=['404']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/landing.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_anonymous_user_invalid_uidb64(self) -&gt; None:\n        \"\"\"GET /conta/ativar/&lt;uidb64&gt;/&lt;token&gt; | anonymous user | invalid uidb64\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('account:activate', args=['404', 'x' * 64]))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_anonymous_user_inexistent_token(self) -&gt; None:\n        \"\"\"GET /conta/ativar/&lt;uidb64&gt;/&lt;token&gt; | anonymous user | inexistent token\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        user: User = cast(User, User.objects.first())\n        user_pk: str = user.pk\n        uidb64_pk = urlsafe_base64_encode(force_bytes(user_pk))\n        res: HttpResponse = self.client.get(reverse('account:activate', args=[uidb64_pk, 'x' * 64]))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /conta/ativar/&lt;uidb64&gt;/&lt;token&gt; | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        user: User = cast(User, User.objects.first())\n        uidb64_pk = urlsafe_base64_encode(force_bytes(user.pk))\n        token: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=user, used=False)\n        res: HttpResponse = self.client.get(reverse('account:activate', args=[uidb64_pk, token.value]), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/index.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /conta/ativar/&lt;uidb64&gt;/&lt;token&gt; | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        user: User = cast(User, User.objects.first())\n        uidb64_pk = urlsafe_base64_encode(force_bytes(user.pk))\n        token: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=user, used=False)\n        res: HttpResponse = self.client.get(reverse('account:activate', args=[uidb64_pk, token.value]), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/index.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#class-loginviewtestcase","title":"<code>class LoginViewTestCase</code>","text":"<p>Parents: <code>BaseAccountTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LoginViewTestCase(BaseAccountTestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /conta/entrar | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.LOGIN_URL)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        res: HttpResponse = self.client.post(self.LOGIN_URL, {'username': 'user', 'password': 'password', 'email': 'email@example.com'}, follow=True)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_GET_anonymous_user_invalid_form(self) -&gt; None:\n        \"\"\"GET /conta/entrar | anonymous user | invalid form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.LOGIN_URL)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        res: HttpResponse = self.client.post(self.LOGIN_URL, {'username': 'user', 'email': 'email@example.com'}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_anonymous_user_user_is_None(self) -&gt; None:\n        \"\"\"GET /conta/entrar | anonymous user | user is None\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.LOGIN_URL)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        res: HttpResponse = self.client.post(self.LOGIN_URL, {'username': 'fake_user', 'password': 'password', 'email': 'email@example.com'}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /conta/entrar | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.LOGIN_URL)\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('home:index'))\n        res: HttpResponse = self.client.get(self.LOGIN_URL, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/index.html')\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#class-logoutviewtestcase","title":"<code>class LogoutViewTestCase</code>","text":"<p>Parents: <code>BaseAccountTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LogoutViewTestCase(BaseAccountTestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /conta/sair | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.LOGOUT_URL)\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, self.LOGIN_URL + '?next=' + self.LOGOUT_URL)\n        res: HttpResponse = self.client.get(self.LOGOUT_URL, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /conta/sair | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.LOGOUT_URL)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/logout.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user(self) -&gt; None:\n        \"\"\"POST /conta/sair | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(self.LOGOUT_URL)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertEqual(res.status_code, 302)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(self.LOGOUT_URL, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#functions","title":"Functions","text":""},{"location":"Codebase/account/tests/test_views.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    User.objects.create_user(username='user', password='password', email='user@email.com')\n    self.REGISTER_URL: str = reverse('account:register')\n    self.LOGIN_URL: str = reverse('account:login')\n    self.LOGOUT_URL: str = reverse('account:logout')\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /conta/registrar | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.REGISTER_URL)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/register.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_post_anonymous_user_invalid_form","title":"<code>def test_POST_anonymous_user_invalid_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_invalid_form(self) -&gt; None:\n    \"\"\"POST /conta/registrar | anonymous user | invalid form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(self.REGISTER_URL, {'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'})\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/register.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_post_anonymous_user_different_passwords","title":"<code>def test_POST_anonymous_user_different_passwords</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_different_passwords(self) -&gt; None:\n    \"\"\"POST /conta/registrar | anonymous user | different passwords\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    post_data: dict[str, str] = {'username': 'username', 'first_name': 'first', 'last_name': 'last', 'email': 'another@example.com', 'password': '12345678', 'password2': '11223344', 'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'}\n    res: HttpResponse = self.client.post(self.REGISTER_URL, post_data)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/register.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_post_anonymous_user_existing_register","title":"<code>def test_POST_anonymous_user_existing_register</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_existing_register(self) -&gt; None:\n    \"\"\"POST /conta/registrar | anonymous user | register already exists\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    post_data: dict[str, str] = {'username': 'user', 'first_name': 'first', 'last_name': 'last', 'email': 'email@example.com', 'password': 'password', 'password2': 'password', 'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'}\n    res: HttpResponse = self.client.post(self.REGISTER_URL, post_data)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/register.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_post_anonymous_user_empty_names","title":"<code>def test_POST_anonymous_user_empty_names</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_empty_names(self) -&gt; None:\n    \"\"\"POST /conta/registrar | anonymous user | empty first_name and/or last_name\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    post_data: dict[str, str | None] = {'username': 'username', 'first_name': '', 'last_name': 'last', 'email': 'email@example.com', 'password': 'password', 'password2': 'password', 'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'}\n    res: HttpResponse = self.client.post(self.REGISTER_URL, post_data)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/register.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_post_anonymous_user_valid_form","title":"<code>def test_POST_anonymous_user_valid_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_valid_form(self) -&gt; None:\n    \"\"\"POST /conta/registrar | anonymous user | valid form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    post_data: dict[str, str] = {'username': 'username', 'first_name': 'first', 'last_name': 'last', 'email': 'another@example.com', 'password': 'password', 'password2': 'password', 'captcha_0': 'dummy-value', 'captcha_1': 'PASSED'}\n    res: HttpResponse = self.client.post(self.REGISTER_URL, post_data, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_authenticated_user","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /conta/registrar | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.REGISTER_URL)\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('home:index'))\n    res: HttpResponse = self.client.get(self.REGISTER_URL, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/index.html')\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_no_parameter","title":"<code>def test_GET_anonymous_user_no_parameter</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_no_parameter(self) -&gt; None:\n    \"\"\"GET /conta/ativar/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('account:activate_no_parameter'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('home:index'))\n    res: HttpResponse = self.client.get(reverse('account:activate_no_parameter'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/landing.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_missing_token","title":"<code>def test_GET_anonymous_user_missing_token</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_missing_token(self) -&gt; None:\n    \"\"\"GET /conta/ativar/&lt;Any&gt; | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('account:activate_no_token', args=['404']))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('home:index'))\n    res: HttpResponse = self.client.get(reverse('account:activate_no_token', args=['404']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/landing.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_invalid_uidb64","title":"<code>def test_GET_anonymous_user_invalid_uidb64</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_invalid_uidb64(self) -&gt; None:\n    \"\"\"GET /conta/ativar/&lt;uidb64&gt;/&lt;token&gt; | anonymous user | invalid uidb64\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('account:activate', args=['404', 'x' * 64]))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_inexistent_token","title":"<code>def test_GET_anonymous_user_inexistent_token</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_inexistent_token(self) -&gt; None:\n    \"\"\"GET /conta/ativar/&lt;uidb64&gt;/&lt;token&gt; | anonymous user | inexistent token\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    user: User = cast(User, User.objects.first())\n    user_pk: str = user.pk\n    uidb64_pk = urlsafe_base64_encode(force_bytes(user_pk))\n    res: HttpResponse = self.client.get(reverse('account:activate', args=[uidb64_pk, 'x' * 64]))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_1","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /conta/ativar/&lt;uidb64&gt;/&lt;token&gt; | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    user: User = cast(User, User.objects.first())\n    uidb64_pk = urlsafe_base64_encode(force_bytes(user.pk))\n    token: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=user, used=False)\n    res: HttpResponse = self.client.get(reverse('account:activate', args=[uidb64_pk, token.value]), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/index.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_authenticated_user_1","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /conta/ativar/&lt;uidb64&gt;/&lt;token&gt; | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    user: User = cast(User, User.objects.first())\n    uidb64_pk = urlsafe_base64_encode(force_bytes(user.pk))\n    token: ActivationAccountToken = ActivationAccountToken.objects.create(value='x' * 64, user=user, used=False)\n    res: HttpResponse = self.client.get(reverse('account:activate', args=[uidb64_pk, token.value]), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/index.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_2","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /conta/entrar | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.LOGIN_URL)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    res: HttpResponse = self.client.post(self.LOGIN_URL, {'username': 'user', 'password': 'password', 'email': 'email@example.com'}, follow=True)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_invalid_form","title":"<code>def test_GET_anonymous_user_invalid_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_invalid_form(self) -&gt; None:\n    \"\"\"GET /conta/entrar | anonymous user | invalid form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.LOGIN_URL)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    res: HttpResponse = self.client.post(self.LOGIN_URL, {'username': 'user', 'email': 'email@example.com'}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_user_is_none","title":"<code>def test_GET_anonymous_user_user_is_None</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_user_is_None(self) -&gt; None:\n    \"\"\"GET /conta/entrar | anonymous user | user is None\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.LOGIN_URL)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    res: HttpResponse = self.client.post(self.LOGIN_URL, {'username': 'fake_user', 'password': 'password', 'email': 'email@example.com'}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_authenticated_user_2","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /conta/entrar | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.LOGIN_URL)\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('home:index'))\n    res: HttpResponse = self.client.get(self.LOGIN_URL, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/index.html')\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_anonymous_user_3","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /conta/sair | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.LOGOUT_URL)\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, self.LOGIN_URL + '?next=' + self.LOGOUT_URL)\n    res: HttpResponse = self.client.get(self.LOGOUT_URL, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_get_authenticated_user_3","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /conta/sair | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.LOGOUT_URL)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/logout.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#def-test_post_authenticated_user","title":"<code>def test_POST_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user(self) -&gt; None:\n    \"\"\"POST /conta/sair | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(self.LOGOUT_URL)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertEqual(res.status_code, 302)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(self.LOGOUT_URL, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/account/tests/test_views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/err/apps.py/","title":"File: <code>apps.py</code>","text":"<p>Path: <code>SWARDEN.err</code></p>"},{"location":"Codebase/err/apps.py/#imports","title":"Imports","text":""},{"location":"Codebase/err/apps.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/err/apps.py/#import-appconfig","title":"<code>import AppConfig</code>","text":"<p>Path: <code>django.apps</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.apps import AppConfig\n</code></pre>"},{"location":"Codebase/err/apps.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/err/apps.py/#classes","title":"Classes","text":""},{"location":"Codebase/err/apps.py/#class-errconfig","title":"<code>class ErrConfig</code>","text":"<p>Parents: <code>AppConfig</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class ErrConfig(AppConfig):\n    default_auto_field: Final[str] = 'django.db.models.BigAutoField'\n    name: Final[str] = 'err'\n</code></pre>"},{"location":"Codebase/err/apps.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/err/apps.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/err/urls.py/","title":"File: <code>urls.py</code>","text":"<p>Path: <code>SWARDEN.err</code></p>"},{"location":"Codebase/err/urls.py/#imports","title":"Imports","text":""},{"location":"Codebase/err/urls.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/err/urls.py/#import-urlpattern","title":"<code>import URLPattern</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLPattern\n</code></pre>"},{"location":"Codebase/err/urls.py/#import-path","title":"<code>import path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import path\n</code></pre>"},{"location":"Codebase/err/urls.py/#import-handle403","title":"<code>import handle403</code>","text":"<p>Path: <code>err.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from err.views import handle403\n</code></pre>"},{"location":"Codebase/err/urls.py/#import-handle404","title":"<code>import handle404</code>","text":"<p>Path: <code>err.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from err.views import handle404\n</code></pre>"},{"location":"Codebase/err/urls.py/#import-handle500","title":"<code>import handle500</code>","text":"<p>Path: <code>err.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from err.views import handle500\n</code></pre>"},{"location":"Codebase/err/urls.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/err/urls.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/err/urls.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/err/urls.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/err/views.py/","title":"File: <code>views.py</code>","text":"<p>Path: <code>SWARDEN.err</code></p>"},{"location":"Codebase/err/views.py/#imports","title":"Imports","text":""},{"location":"Codebase/err/views.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/err/views.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/err/views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/err/views.py/#import-render","title":"<code>import render</code>","text":"<p>Path: <code>django.shortcuts</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.shortcuts import render\n</code></pre>"},{"location":"Codebase/err/views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/err/views.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/err/views.py/#functions","title":"Functions","text":""},{"location":"Codebase/err/views.py/#def-handle403","title":"<code>def handle403</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def handle403(r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n    return render(r, 'err/error_template.html', {'code': 403, 'message1': 'Voc\u00ea n\u00e3o tem autoriza\u00e7\u00e3o para proseguir.', 'message2': 'Retorne para onde estava ou v\u00e1 para a homepage.'})\n</code></pre>"},{"location":"Codebase/err/views.py/#def-handle404","title":"<code>def handle404</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def handle404(r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n    return render(r, 'err/error_template.html', {'code': 404, 'message1': 'O endere\u00e7o requisitado n\u00e3o foi encontrado.', 'message2': 'Retorne para onde estava ou v\u00e1 para a homepage.'})\n</code></pre>"},{"location":"Codebase/err/views.py/#def-handle500","title":"<code>def handle500</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def handle500(r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n    return render(r, 'err/error_template.html', {'code': 500, 'message1': 'Ocorreu um problema com o servidor.', 'message2': 'Informe o problema para a equipe do site.'})\n</code></pre>"},{"location":"Codebase/err/views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/err/tests/test_views.py/","title":"File: <code>test_views.py</code>","text":"<p>Path: <code>SWARDEN.err.tests</code></p>"},{"location":"Codebase/err/tests/test_views.py/#imports","title":"Imports","text":""},{"location":"Codebase/err/tests/test_views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/err/tests/test_views.py/#classes","title":"Classes","text":""},{"location":"Codebase/err/tests/test_views.py/#class-error403viewtestcase","title":"<code>class Error403ViewTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Error403ViewTestCase(TestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /erro/403\"\"\"\n        res: HttpResponse = self.client.get(reverse('err:403'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertEqual(res.context.get('code'), 403)\n        self.assertEqual(res.context.get('message1'), 'Voc\u00ea n\u00e3o tem autoriza\u00e7\u00e3o para proseguir.')\n        self.assertEqual(res.context.get('message2'), 'Retorne para onde estava ou v\u00e1 para a homepage.')\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#class-error404viewtestcase","title":"<code>class Error404ViewTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Error404ViewTestCase(TestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /erro/404\"\"\"\n        res: HttpResponse = self.client.get(reverse('err:404'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertEqual(res.context.get('code'), 404)\n        self.assertEqual(res.context.get('message1'), 'O endere\u00e7o requisitado n\u00e3o foi encontrado.')\n        self.assertEqual(res.context.get('message2'), 'Retorne para onde estava ou v\u00e1 para a homepage.')\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#class-error500viewtestcase","title":"<code>class Error500ViewTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Error500ViewTestCase(TestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /erro/500\"\"\"\n        res: HttpResponse = self.client.get(reverse('err:500'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertEqual(res.context.get('code'), 500)\n        self.assertEqual(res.context.get('message1'), 'Ocorreu um problema com o servidor.')\n        self.assertEqual(res.context.get('message2'), 'Informe o problema para a equipe do site.')\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#functions","title":"Functions","text":""},{"location":"Codebase/err/tests/test_views.py/#def-test_get_anonymous_user","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /erro/403\"\"\"\n    res: HttpResponse = self.client.get(reverse('err:403'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertEqual(res.context.get('code'), 403)\n    self.assertEqual(res.context.get('message1'), 'Voc\u00ea n\u00e3o tem autoriza\u00e7\u00e3o para proseguir.')\n    self.assertEqual(res.context.get('message2'), 'Retorne para onde estava ou v\u00e1 para a homepage.')\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#def-test_get_anonymous_user_1","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /erro/404\"\"\"\n    res: HttpResponse = self.client.get(reverse('err:404'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertEqual(res.context.get('code'), 404)\n    self.assertEqual(res.context.get('message1'), 'O endere\u00e7o requisitado n\u00e3o foi encontrado.')\n    self.assertEqual(res.context.get('message2'), 'Retorne para onde estava ou v\u00e1 para a homepage.')\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#def-test_get_anonymous_user_2","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /erro/500\"\"\"\n    res: HttpResponse = self.client.get(reverse('err:500'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertEqual(res.context.get('code'), 500)\n    self.assertEqual(res.context.get('message1'), 'Ocorreu um problema com o servidor.')\n    self.assertEqual(res.context.get('message2'), 'Informe o problema para a equipe do site.')\n</code></pre>"},{"location":"Codebase/err/tests/test_views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/general/apps.py/","title":"File: <code>apps.py</code>","text":"<p>Path: <code>SWARDEN.general</code></p>"},{"location":"Codebase/general/apps.py/#imports","title":"Imports","text":""},{"location":"Codebase/general/apps.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/general/apps.py/#import-appconfig","title":"<code>import AppConfig</code>","text":"<p>Path: <code>django.apps</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.apps import AppConfig\n</code></pre>"},{"location":"Codebase/general/apps.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/general/apps.py/#classes","title":"Classes","text":""},{"location":"Codebase/general/apps.py/#class-generalconfig","title":"<code>class GeneralConfig</code>","text":"<p>Parents: <code>AppConfig</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class GeneralConfig(AppConfig):\n    default_auto_field: Final[str] = 'django.db.models.BigAutoField'\n    name: Final[str] = 'general'\n</code></pre>"},{"location":"Codebase/general/apps.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/general/apps.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/general/urls.py/","title":"File: <code>urls.py</code>","text":"<p>Path: <code>SWARDEN.general</code></p>"},{"location":"Codebase/general/urls.py/#imports","title":"Imports","text":""},{"location":"Codebase/general/urls.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/general/urls.py/#import-urlpattern","title":"<code>import URLPattern</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLPattern\n</code></pre>"},{"location":"Codebase/general/urls.py/#import-path","title":"<code>import path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import path\n</code></pre>"},{"location":"Codebase/general/urls.py/#import-index","title":"<code>import index</code>","text":"<p>Path: <code>general.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from general.views import index\n</code></pre>"},{"location":"Codebase/general/urls.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/general/urls.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/general/urls.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/general/urls.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/general/views.py/","title":"File: <code>views.py</code>","text":"<p>Path: <code>SWARDEN.general</code></p>"},{"location":"Codebase/general/views.py/#imports","title":"Imports","text":""},{"location":"Codebase/general/views.py/#import-login_required","title":"<code>import login_required</code>","text":"<p>Path: <code>django.contrib.auth.decorators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.decorators import login_required\n</code></pre>"},{"location":"Codebase/general/views.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/general/views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/general/views.py/#import-render","title":"<code>import render</code>","text":"<p>Path: <code>django.shortcuts</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.shortcuts import render\n</code></pre>"},{"location":"Codebase/general/views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/general/views.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/general/views.py/#functions","title":"Functions","text":""},{"location":"Codebase/general/views.py/#def-index","title":"<code>def index</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>login_required(login_url='/conta/entrar')</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_required(login_url='/conta/entrar')\ndef index(r: HttpRequest) -&gt; HttpResponse:\n    return render(r, 'general/index.html')\n</code></pre>"},{"location":"Codebase/general/views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/general/tests/test_views.py/","title":"File: <code>test_views.py</code>","text":"<p>Path: <code>SWARDEN.general.tests</code></p>"},{"location":"Codebase/general/tests/test_views.py/#imports","title":"Imports","text":""},{"location":"Codebase/general/tests/test_views.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#import-get_user","title":"<code>import get_user</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import get_user\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/general/tests/test_views.py/#classes","title":"Classes","text":""},{"location":"Codebase/general/tests/test_views.py/#class-indexviewtestcase","title":"<code>class IndexViewTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class IndexViewTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        User.objects.create_user(username='user', password='password', email='user@email.com')\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /geral/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('general:index'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('general:index'))\n        res: HttpResponse = self.client.get(reverse('general:index'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /geral/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('general:index'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'general/index.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user(self) -&gt; None:\n        \"\"\"POST /geral/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('general:index'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'general/index.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#functions","title":"Functions","text":""},{"location":"Codebase/general/tests/test_views.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    User.objects.create_user(username='user', password='password', email='user@email.com')\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#def-test_get_anonymous_user","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /geral/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('general:index'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('general:index'))\n    res: HttpResponse = self.client.get(reverse('general:index'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#def-test_get_authenticated_user","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /geral/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('general:index'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'general/index.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#def-test_post_authenticated_user","title":"<code>def test_POST_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user(self) -&gt; None:\n    \"\"\"POST /geral/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('general:index'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'general/index.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/general/tests/test_views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/home/apps.py/","title":"File: <code>apps.py</code>","text":"<p>Path: <code>SWARDEN.home</code></p>"},{"location":"Codebase/home/apps.py/#imports","title":"Imports","text":""},{"location":"Codebase/home/apps.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/home/apps.py/#import-appconfig","title":"<code>import AppConfig</code>","text":"<p>Path: <code>django.apps</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.apps import AppConfig\n</code></pre>"},{"location":"Codebase/home/apps.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/home/apps.py/#classes","title":"Classes","text":""},{"location":"Codebase/home/apps.py/#class-homeconfig","title":"<code>class HomeConfig</code>","text":"<p>Parents: <code>AppConfig</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class HomeConfig(AppConfig):\n    default_auto_field: Final[str] = 'django.db.models.BigAutoField'\n    name: Final[str] = 'home'\n</code></pre>"},{"location":"Codebase/home/apps.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/home/apps.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/home/urls.py/","title":"File: <code>urls.py</code>","text":"<p>Path: <code>SWARDEN.home</code></p>"},{"location":"Codebase/home/urls.py/#imports","title":"Imports","text":""},{"location":"Codebase/home/urls.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/home/urls.py/#import-urlpattern","title":"<code>import URLPattern</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLPattern\n</code></pre>"},{"location":"Codebase/home/urls.py/#import-path","title":"<code>import path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import path\n</code></pre>"},{"location":"Codebase/home/urls.py/#import-index","title":"<code>import index</code>","text":"<p>Path: <code>home.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from home.views import index\n</code></pre>"},{"location":"Codebase/home/urls.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/home/urls.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/home/urls.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/home/urls.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/home/views.py/","title":"File: <code>views.py</code>","text":"<p>Path: <code>SWARDEN.home</code></p>"},{"location":"Codebase/home/views.py/#imports","title":"Imports","text":""},{"location":"Codebase/home/views.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/home/views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/home/views.py/#import-render","title":"<code>import render</code>","text":"<p>Path: <code>django.shortcuts</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.shortcuts import render\n</code></pre>"},{"location":"Codebase/home/views.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/home/views.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/home/views.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/home/views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/home/views.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/home/views.py/#functions","title":"Functions","text":""},{"location":"Codebase/home/views.py/#def-index","title":"<code>def index</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def index(r: HttpRequest) -&gt; HttpResponse:\n    if r.user.is_authenticated:\n        credentials: LoginCredential = r.user.credentials.all()\n        cards: Card = r.user.cards.all()\n        notes: SecurityNote = r.user.notes.all()\n        return render(r, 'home/index.html', {'credentials': credentials[:4], 'cards': cards[:4], 'notes': notes[:4], 'credentials_count': credentials.count(), 'cards_count': cards.count(), 'notes_count': notes.count()})\n    return render(r, 'home/landing.html')\n</code></pre>"},{"location":"Codebase/home/views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/","title":"File: <code>testwithcoverage.py</code>","text":"<p>Path: <code>SWARDEN.home.management.commands</code></p>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#imports","title":"Imports","text":""},{"location":"Codebase/home/management/commands/testwithcoverage.py/#import-system","title":"<code>import system</code>","text":"<p>Path: <code>os</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from os import system\n</code></pre>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#import-literal","title":"<code>import Literal</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Literal\n</code></pre>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#import-basecommand","title":"<code>import BaseCommand</code>","text":"<p>Path: <code>django.core.management</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.management import BaseCommand\n</code></pre>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#classes","title":"Classes","text":""},{"location":"Codebase/home/management/commands/testwithcoverage.py/#class-command","title":"<code>class Command</code>","text":"<p>Parents: <code>BaseCommand</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Command(BaseCommand):\n\n    def add_arguments(self, parser):\n        parser.add_argument('--app', type=str, help='App to be covered - \".\" if nothing is defined.', default='.')\n\n    def handle(self, *args: Any, **options: Any) -&gt; None:\n        omit_list: list[str] = ['*/month/*,', '*/migrations/*,', '*/admin.py,', 'manage.py,', '*/CORE/*,']\n        app: Literal['.'] | str = options['app']\n        source: str = f\"--source='{app}'\"\n        omit: str = f\"--omit='{','.join(omit_list)}'\"\n        cmd: str = f'coverage run {source} {omit} manage.py test {app}'\n        system(cmd)\n        system('coverage html')\n        self.stdout.write(self.style.SUCCESS('Coverage done + HTML file generated.'))\n</code></pre>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#functions","title":"Functions","text":""},{"location":"Codebase/home/management/commands/testwithcoverage.py/#def-add_arguments","title":"<code>def add_arguments</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, parser: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def add_arguments(self, parser):\n    parser.add_argument('--app', type=str, help='App to be covered - \".\" if nothing is defined.', default='.')\n</code></pre>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#def-handle","title":"<code>def handle</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def handle(self, *args: Any, **options: Any) -&gt; None:\n    omit_list: list[str] = ['*/month/*,', '*/migrations/*,', '*/admin.py,', 'manage.py,', '*/CORE/*,']\n    app: Literal['.'] | str = options['app']\n    source: str = f\"--source='{app}'\"\n    omit: str = f\"--omit='{','.join(omit_list)}'\"\n    cmd: str = f'coverage run {source} {omit} manage.py test {app}'\n    system(cmd)\n    system('coverage html')\n    self.stdout.write(self.style.SUCCESS('Coverage done + HTML file generated.'))\n</code></pre>"},{"location":"Codebase/home/management/commands/testwithcoverage.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/home/tests/test_views.py/","title":"File: <code>test_views.py</code>","text":"<p>Path: <code>SWARDEN.home.tests</code></p>"},{"location":"Codebase/home/tests/test_views.py/#imports","title":"Imports","text":""},{"location":"Codebase/home/tests/test_views.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#import-get_user","title":"<code>import get_user</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import get_user\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#import-month","title":"<code>import Month</code>","text":"<p>Path: <code>secret.month.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.month.models import Month\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/home/tests/test_views.py/#classes","title":"Classes","text":""},{"location":"Codebase/home/tests/test_views.py/#class-homeviewstestcase","title":"<code>class HomeViewsTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class HomeViewsTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        Card.objects.create(owner=user, name='Personal Main Card', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card', owners_name='TEST USER')\n        LoginCredential.objects.create(owner=user, service='google--', name='Personal Main Account', slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123@gmail.com', password='ilovemenotyou')\n        LoginCredential.objects.create(owner=user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=True, thirdy_party_login_name='Personal Main Account', login='-----', password='-----')\n        SecurityNote.objects.create(owner=user, title='How to draw an apple', slug='how-to-draw-an-apple', content='Just draw an apple tree and erase the tree.')\n\n    def test_GET_anonymous_user(self):\n        \"\"\"GET / | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('home:index'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/landing.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self):\n        \"\"\"GET / | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.client.login(username='user', password='password')\n        res: HttpResponse = self.client.get(reverse('home:index'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/index.html')\n        self.assertIn('cards', res.context.keys())\n        self.assertIn('credentials', res.context.keys())\n        self.assertIn('notes', res.context.keys())\n        self.assertEqual(len(res.context['cards']), 1)\n        self.assertEqual(len(res.context['credentials']), 2)\n        self.assertEqual(len(res.context['notes']), 1)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#functions","title":"Functions","text":""},{"location":"Codebase/home/tests/test_views.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    Card.objects.create(owner=user, name='Personal Main Card', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card', owners_name='TEST USER')\n    LoginCredential.objects.create(owner=user, service='google--', name='Personal Main Account', slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123@gmail.com', password='ilovemenotyou')\n    LoginCredential.objects.create(owner=user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=True, thirdy_party_login_name='Personal Main Account', login='-----', password='-----')\n    SecurityNote.objects.create(owner=user, title='How to draw an apple', slug='how-to-draw-an-apple', content='Just draw an apple tree and erase the tree.')\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#def-test_get_anonymous_user","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self):\n    \"\"\"GET / | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('home:index'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/landing.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#def-test_get_authenticated_user","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self):\n    \"\"\"GET / | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.client.login(username='user', password='password')\n    res: HttpResponse = self.client.get(reverse('home:index'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/index.html')\n    self.assertIn('cards', res.context.keys())\n    self.assertIn('credentials', res.context.keys())\n    self.assertIn('notes', res.context.keys())\n    self.assertEqual(len(res.context['cards']), 1)\n    self.assertEqual(len(res.context['credentials']), 2)\n    self.assertEqual(len(res.context['notes']), 1)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/home/tests/test_views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/honeypot/admin.py/","title":"File: <code>admin.py</code>","text":"<p>Path: <code>SWARDEN.honeypot</code></p>"},{"location":"Codebase/honeypot/admin.py/#imports","title":"Imports","text":""},{"location":"Codebase/honeypot/admin.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/honeypot/admin.py/#import-swarden_admin","title":"<code>import swarden_admin</code>","text":"<p>Path: <code>CORE.admin</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from CORE.admin import swarden_admin\n</code></pre>"},{"location":"Codebase/honeypot/admin.py/#import-admin","title":"<code>import admin</code>","text":"<p>Path: <code>django.contrib</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib import admin\n</code></pre>"},{"location":"Codebase/honeypot/admin.py/#import-attempt","title":"<code>import Attempt</code>","text":"<p>Path: <code>honeypot.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from honeypot.models import Attempt\n</code></pre>"},{"location":"Codebase/honeypot/admin.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/honeypot/admin.py/#classes","title":"Classes","text":""},{"location":"Codebase/honeypot/admin.py/#class-attempadmin","title":"<code>class AttempAdmin</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class AttempAdmin(admin.ModelAdmin):\n    readonly_fields: Final = ('IP', 'username', 'password', 'URL', 'timestamp')\n</code></pre>"},{"location":"Codebase/honeypot/admin.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/honeypot/admin.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/honeypot/apps.py/","title":"File: <code>apps.py</code>","text":"<p>Path: <code>SWARDEN.honeypot</code></p>"},{"location":"Codebase/honeypot/apps.py/#imports","title":"Imports","text":""},{"location":"Codebase/honeypot/apps.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/honeypot/apps.py/#import-appconfig","title":"<code>import AppConfig</code>","text":"<p>Path: <code>django.apps</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.apps import AppConfig\n</code></pre>"},{"location":"Codebase/honeypot/apps.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/honeypot/apps.py/#classes","title":"Classes","text":""},{"location":"Codebase/honeypot/apps.py/#class-honeypotconfig","title":"<code>class HoneypotConfig</code>","text":"<p>Parents: <code>AppConfig</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class HoneypotConfig(AppConfig):\n    default_auto_field: Final[str] = 'django.db.models.BigAutoField'\n    name: Final[str] = 'honeypot'\n</code></pre>"},{"location":"Codebase/honeypot/apps.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/honeypot/apps.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/honeypot/models.py/","title":"File: <code>models.py</code>","text":"<p>Path: <code>SWARDEN.honeypot</code></p>"},{"location":"Codebase/honeypot/models.py/#imports","title":"Imports","text":""},{"location":"Codebase/honeypot/models.py/#import-datetime","title":"<code>import datetime</code>","text":"<p>Path: <code>datetime</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from datetime import datetime\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#import-uuid4","title":"<code>import uuid4</code>","text":"<p>Path: <code>uuid</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from uuid import uuid4\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#import-maxlengthvalidator","title":"<code>import MaxLengthValidator</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import MaxLengthValidator\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#import-charfield","title":"<code>import CharField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CharField\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#import-datetimefield","title":"<code>import DateTimeField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import DateTimeField\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#import-model","title":"<code>import Model</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import Model\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#import-uuidfield","title":"<code>import UUIDField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import UUIDField\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#consts","title":"Consts","text":""},{"location":"Codebase/honeypot/models.py/#ip","title":"<code>IP</code>","text":"<p>Type: <code>Final[CharField]</code></p> <p>Value: <code>CharField(max_length=64, validators=[MaxLengthValidator(64)])</code></p> SNIPPET Python<pre><code>IP: Final[CharField] = CharField(max_length=64, validators=[MaxLengthValidator(64)])\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#url","title":"<code>URL</code>","text":"<p>Type: <code>Final[CharField]</code></p> <p>Value: <code>CharField(max_length=256, validators=[MaxLengthValidator(256)])</code></p> SNIPPET Python<pre><code>URL: Final[CharField] = CharField(max_length=256, validators=[MaxLengthValidator(256)])\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#classes","title":"Classes","text":""},{"location":"Codebase/honeypot/models.py/#class-attempt","title":"<code>class Attempt</code>","text":"<p>Parents: <code>Model</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Attempt(Model):\n    id: Final[UUIDField] = UUIDField(default=uuid4, unique=True, primary_key=True, editable=False)\n    IP: Final[CharField] = CharField(max_length=64, validators=[MaxLengthValidator(64)])\n    username: Final[CharField] = CharField(max_length=256, verbose_name='Nome de Usu\u00e1rio', validators=[MaxLengthValidator(256)], blank=True, null=True)\n    password: Final[CharField] = CharField(max_length=256, verbose_name='Senha', validators=[MaxLengthValidator(256)], blank=True, null=True)\n    URL: Final[CharField] = CharField(max_length=256, validators=[MaxLengthValidator(256)])\n    timestamp: Final[DateTimeField] = DateTimeField(auto_now_add=True, verbose_name='Data e Hora')\n\n    class Meta:\n        verbose_name: Final[str] = 'Registro'\n        verbose_name_plural: Final[str] = 'Registros'\n\n    def __str__(self) -&gt; str:\n        date: datetime = self.timestamp\n        d: int = date.day\n        m: int = date.month\n        y: int = date.year\n        h: int = date.hour\n        min: int = date.minute\n        s: int = date.second\n        return f'{self.pk}: {d}/{m}/{y} ({h}h{min}m{s}s) UTC+3'\n\n    def is_valid(self) -&gt; bool:\n        if self.IP and len(self.IP) &lt;= 64 and self.username and (len(self.username) &lt;= 256) and self.password and (len(self.password) &lt;= 256) and self.URL and (len(self.URL) &lt;= 256) and self.timestamp and isinstance(self.timestamp, datetime):\n            return True\n        return False\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#class-meta","title":"<code>class Meta</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Meta:\n    verbose_name: Final[str] = 'Registro'\n    verbose_name_plural: Final[str] = 'Registros'\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#functions","title":"Functions","text":""},{"location":"Codebase/honeypot/models.py/#def-__str__","title":"<code>def __str__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __str__(self) -&gt; str:\n    date: datetime = self.timestamp\n    d: int = date.day\n    m: int = date.month\n    y: int = date.year\n    h: int = date.hour\n    min: int = date.minute\n    s: int = date.second\n    return f'{self.pk}: {d}/{m}/{y} ({h}h{min}m{s}s) UTC+3'\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#def-is_valid","title":"<code>def is_valid</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def is_valid(self) -&gt; bool:\n    if self.IP and len(self.IP) &lt;= 64 and self.username and (len(self.username) &lt;= 256) and self.password and (len(self.password) &lt;= 256) and self.URL and (len(self.URL) &lt;= 256) and self.timestamp and isinstance(self.timestamp, datetime):\n        return True\n    return False\n</code></pre>"},{"location":"Codebase/honeypot/models.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/honeypot/urls.py/","title":"File: <code>urls.py</code>","text":"<p>Path: <code>SWARDEN.honeypot</code></p>"},{"location":"Codebase/honeypot/urls.py/#imports","title":"Imports","text":""},{"location":"Codebase/honeypot/urls.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/honeypot/urls.py/#import-urlpattern","title":"<code>import URLPattern</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLPattern\n</code></pre>"},{"location":"Codebase/honeypot/urls.py/#import-path","title":"<code>import path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import path\n</code></pre>"},{"location":"Codebase/honeypot/urls.py/#import-re_path","title":"<code>import re_path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import re_path\n</code></pre>"},{"location":"Codebase/honeypot/urls.py/#import-honeypot","title":"<code>import honeypot</code>","text":"<p>Path: <code>honeypot.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from honeypot.views import honeypot\n</code></pre>"},{"location":"Codebase/honeypot/urls.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/honeypot/urls.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/honeypot/urls.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/honeypot/urls.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/honeypot/views.py/","title":"File: <code>views.py</code>","text":"<p>Path: <code>SWARDEN.honeypot</code></p>"},{"location":"Codebase/honeypot/views.py/#imports","title":"Imports","text":""},{"location":"Codebase/honeypot/views.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/honeypot/views.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/honeypot/views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/honeypot/views.py/#import-render","title":"<code>import render</code>","text":"<p>Path: <code>django.shortcuts</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.shortcuts import render\n</code></pre>"},{"location":"Codebase/honeypot/views.py/#import-get_ip_address","title":"<code>import get_ip_address</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import get_ip_address\n</code></pre>"},{"location":"Codebase/honeypot/views.py/#import-attempt","title":"<code>import Attempt</code>","text":"<p>Path: <code>honeypot.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from honeypot.models import Attempt\n</code></pre>"},{"location":"Codebase/honeypot/views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/honeypot/views.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/honeypot/views.py/#functions","title":"Functions","text":""},{"location":"Codebase/honeypot/views.py/#def-honeypot","title":"<code>def honeypot</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest, path: str | None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def honeypot(r: HttpRequest, path: str | None=None) -&gt; HttpResponse:\n    if r.method != 'POST':\n        if r.user.is_authenticated:\n            return render(r, 'honeypot/authenticated.html', {'next': r.path, 'user': r.user.username})\n        return render(r, 'honeypot/honeypot.html', {'next': r.path})\n    ip: Any | None = get_ip_address(r)\n    username: str | None = r.POST.get('username')\n    password: str | None = r.POST.get('password')\n    url: str = r.get_full_path()\n    Attempt.objects.create(IP=ip, username=username, password=password, URL=url)\n    if r.user.is_authenticated:\n        return render(r, 'honeypot/authenticated.html', {'next': r.path, 'user': r.user.username})\n    return render(r, 'honeypot/loop.html', {'next': url})\n</code></pre>"},{"location":"Codebase/honeypot/views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/","title":"File: <code>0001_initial.py</code>","text":"<p>Path: <code>SWARDEN.honeypot.migrations</code></p>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/#imports","title":"Imports","text":""},{"location":"Codebase/honeypot/migrations/0001_initial.py/#import-djangocorevalidators","title":"<code>import django.core.validators</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import django.core.validators\n</code></pre>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/#import-uuid","title":"<code>import uuid</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import uuid\n</code></pre>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/#import-migrations","title":"<code>import migrations</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import migrations\n</code></pre>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/#import-models","title":"<code>import models</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import models\n</code></pre>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/#classes","title":"Classes","text":""},{"location":"Codebase/honeypot/migrations/0001_initial.py/#class-migration","title":"<code>class Migration</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [migrations.CreateModel(name='Attempt', fields=[('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)), ('IP', models.CharField(max_length=64, validators=[django.core.validators.MaxLengthValidator(64)])), ('username', models.CharField(blank=True, max_length=256, null=True, validators=[django.core.validators.MaxLengthValidator(256)], verbose_name='Nome de Usu\u00e1rio')), ('password', models.CharField(blank=True, max_length=256, null=True, validators=[django.core.validators.MaxLengthValidator(256)], verbose_name='Senha')), ('URL', models.CharField(max_length=256, validators=[django.core.validators.MaxLengthValidator(256)])), ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Data e Hora'))], options={'verbose_name': 'Registro', 'verbose_name_plural': 'Registros'})]\n</code></pre>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/honeypot/migrations/0001_initial.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/honeypot/tests/test_models.py/","title":"File: <code>test_models.py</code>","text":"<p>Path: <code>SWARDEN.honeypot.tests</code></p>"},{"location":"Codebase/honeypot/tests/test_models.py/#imports","title":"Imports","text":""},{"location":"Codebase/honeypot/tests/test_models.py/#import-datetime","title":"<code>import datetime</code>","text":"<p>Path: <code>datetime</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from datetime import datetime\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#import-filterwarnings","title":"<code>import filterwarnings</code>","text":"<p>Path: <code>warnings</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from warnings import filterwarnings\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#import-validationerror","title":"<code>import ValidationError</code>","text":"<p>Path: <code>django.core.exceptions</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.exceptions import ValidationError\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#import-atomic","title":"<code>import atomic</code>","text":"<p>Path: <code>django.db.transaction</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.transaction import atomic\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#import-attempt","title":"<code>import Attempt</code>","text":"<p>Path: <code>honeypot.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from honeypot.models import Attempt\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/honeypot/tests/test_models.py/#classes","title":"Classes","text":""},{"location":"Codebase/honeypot/tests/test_models.py/#class-attempttestcase","title":"<code>class AttemptTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class AttemptTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        filterwarnings('ignore', category=RuntimeWarning)\n        self.attempt1: Attempt = Attempt.objects.create(IP='255.255.255.255', username='username', password='password', URL='&lt;script&gt;alert(1)&lt;/script&gt;', timestamp=datetime(2017, 7, 8))\n        self.attempt2: Attempt = Attempt.objects.create(IP='0' * 64, username='u' * 256, password='p' * 256, URL='!' * 256)\n        self.attempt3: Attempt = Attempt.objects.create(IP='0' * 64, username='u' * 256, password='p' * 256, URL='!' * 256, timestamp='string')\n        self.attempt4: Attempt = Attempt.objects.create(IP='0' * 64, password='p' * 256, URL='!' * 256)\n        self.attempt5: Attempt = Attempt.objects.create(username='u' * 256, password='p' * 256, URL='!' * 256)\n\n    def test_attempt_instance_validity(self) -&gt; None:\n        \"\"\"Tests attempt instance of correct class\"\"\"\n        for attempt in Attempt.objects.all():\n            with self.subTest(attempt=attempt):\n                self.assertIsInstance(attempt, Attempt)\n\n    def test_attempt_special_str_method_return(self) -&gt; None:\n        \"\"\"Tests attempt return value of __str__ method\"\"\"\n        attempt1: Attempt = Attempt.objects.get(pk=self.attempt1.pk)\n        date: datetime = attempt1.timestamp\n        d: int = date.day\n        m: int = date.month\n        y: int = date.year\n        h: int = date.hour\n        min: int = date.minute\n        s: int = date.second\n        self.assertEqual(attempt1.__str__(), f'{attempt1.pk}: {d}/{m}/{y} ({h}h{min}m{s}s) UTC+3')\n\n    def test_attempt_key_value_assertion(self) -&gt; None:\n        \"\"\"Tests attempt correct attribuition of value\"\"\"\n        attempt1: Attempt = Attempt.objects.get(pk=self.attempt1.pk)\n        self.assertEqual(attempt1.IP, '255.255.255.255')\n        self.assertEqual(attempt1.username, 'username')\n        self.assertEqual(attempt1.password, 'password')\n        self.assertEqual(attempt1.URL, '&lt;script&gt;alert(1)&lt;/script&gt;')\n        self.assertNotEqual(attempt1.timestamp, datetime(2017, 7, 8))\n\n    def test_attempt_create_validity(self) -&gt; None:\n        \"\"\"Tests attempt creation integrity and validation\"\"\"\n        attempt1: Attempt = Attempt.objects.get(pk=self.attempt1.pk)\n        attempt2: Attempt = Attempt.objects.get(pk=self.attempt2.pk)\n        attempt3: Attempt = Attempt.objects.get(pk=self.attempt3.pk)\n        attempt4: Attempt = Attempt.objects.get(pk=self.attempt4.pk)\n        attempt5: Attempt = Attempt.objects.get(pk=self.attempt5.pk)\n        self.assertEqual(Attempt.objects.all().count(), 5)\n        self.assertTrue(attempt1.is_valid())\n        self.assertTrue(attempt2.is_valid())\n        self.assertTrue(attempt3.is_valid())\n        self.assertFalse(attempt4.is_valid())\n        self.assertFalse(attempt5.is_valid())\n\n    def test_attempt_update_validity(self) -&gt; None:\n        \"\"\"Tests attempt update integrity and validation\"\"\"\n        Attempt.objects.filter(pk=self.attempt4.pk).update(username='bob_a_bob')\n        Attempt.objects.filter(pk=self.attempt5.pk).update(IP='192.168.55.36')\n        for attempt in Attempt.objects.all():\n            with self.subTest(attempt=attempt):\n                self.assertTrue(attempt.is_valid())\n\n    def test_attempt_delete_validity(self) -&gt; None:\n        \"\"\"Tests attempt correct deletion\"\"\"\n        for attempt in Attempt.objects.all():\n            if not attempt.is_valid():\n                attempt.delete()\n        self.assertEqual(Attempt.objects.all().count(), 3)\n\n    def test_attempt_db_exception_raises(self) -&gt; None:\n        \"\"\"Tests attempt correct integrity and validation with raised exceptions\"\"\"\n        raise_kwargs: dict[str, dict[str, str | None]] = {'attemp1': {'IP': 'foobarbazqux'}, 'attemp2': {'IP': 'x' * 65}, 'attemp3': {'IP': None}, 'attemp4': {'username': 'foobarbazqux'}, 'attemp5': {'username': 'x' * 257}, 'attemp6': {'username': None}, 'attemp7': {'password': 'foobarbazqux'}, 'attemp8': {'password': 'x' * 257}, 'attemp9': {'password': None}, 'attemp10': {'URL': 'foobarbazqux'}, 'attemp11': {'URL': 'x' * 257}, 'attemp12': {'URL': None}, 'attemp13': {'timestamp': 'foobarbazqux'}, 'attemp14': {'timestamp': None}}\n        for scenario in raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                with self.assertRaises(ValidationError):\n                    with atomic():\n                        instance: Attempt = Attempt(**raise_kwargs[scenario])\n                        instance.full_clean()\n        no_raise_kwargs: dict[str, dict[str, str | int | datetime]] = {'attemp1': {'IP': '255.255.255.255', 'username': 'username', 'password': 'password', 'URL': 'URL'}, 'attemp2': {'IP': '255.255.255.255', 'username': 'username', 'password': 'password', 'URL': 'https://www.youtube.com/watch?v=dQw4w9WgXcQ', 'timestamp': datetime(1980, 4, 25)}, 'attemp3': {'IP': '255.255.255.255', 'username': 10 ** 255, 'password': 10 ** 255, 'URL': '&lt;script&gt;alert(404)&lt;/script&gt;', 'timestamp': '2023-10-15'}, 'attemp4': {'IP': 'x' * 64, 'username': 'x' * 256, 'password': 'x' * 256, 'URL': 'x' * 256, 'timestamp': datetime(2023, 10, 15)}}\n        for scenario in no_raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                instance: Attempt = Attempt(**no_raise_kwargs[scenario])\n                instance.full_clean()\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#functions","title":"Functions","text":""},{"location":"Codebase/honeypot/tests/test_models.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    filterwarnings('ignore', category=RuntimeWarning)\n    self.attempt1: Attempt = Attempt.objects.create(IP='255.255.255.255', username='username', password='password', URL='&lt;script&gt;alert(1)&lt;/script&gt;', timestamp=datetime(2017, 7, 8))\n    self.attempt2: Attempt = Attempt.objects.create(IP='0' * 64, username='u' * 256, password='p' * 256, URL='!' * 256)\n    self.attempt3: Attempt = Attempt.objects.create(IP='0' * 64, username='u' * 256, password='p' * 256, URL='!' * 256, timestamp='string')\n    self.attempt4: Attempt = Attempt.objects.create(IP='0' * 64, password='p' * 256, URL='!' * 256)\n    self.attempt5: Attempt = Attempt.objects.create(username='u' * 256, password='p' * 256, URL='!' * 256)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#def-test_attempt_instance_validity","title":"<code>def test_attempt_instance_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_attempt_instance_validity(self) -&gt; None:\n    \"\"\"Tests attempt instance of correct class\"\"\"\n    for attempt in Attempt.objects.all():\n        with self.subTest(attempt=attempt):\n            self.assertIsInstance(attempt, Attempt)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#def-test_attempt_special_str_method_return","title":"<code>def test_attempt_special_str_method_return</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_attempt_special_str_method_return(self) -&gt; None:\n    \"\"\"Tests attempt return value of __str__ method\"\"\"\n    attempt1: Attempt = Attempt.objects.get(pk=self.attempt1.pk)\n    date: datetime = attempt1.timestamp\n    d: int = date.day\n    m: int = date.month\n    y: int = date.year\n    h: int = date.hour\n    min: int = date.minute\n    s: int = date.second\n    self.assertEqual(attempt1.__str__(), f'{attempt1.pk}: {d}/{m}/{y} ({h}h{min}m{s}s) UTC+3')\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#def-test_attempt_key_value_assertion","title":"<code>def test_attempt_key_value_assertion</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_attempt_key_value_assertion(self) -&gt; None:\n    \"\"\"Tests attempt correct attribuition of value\"\"\"\n    attempt1: Attempt = Attempt.objects.get(pk=self.attempt1.pk)\n    self.assertEqual(attempt1.IP, '255.255.255.255')\n    self.assertEqual(attempt1.username, 'username')\n    self.assertEqual(attempt1.password, 'password')\n    self.assertEqual(attempt1.URL, '&lt;script&gt;alert(1)&lt;/script&gt;')\n    self.assertNotEqual(attempt1.timestamp, datetime(2017, 7, 8))\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#def-test_attempt_create_validity","title":"<code>def test_attempt_create_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_attempt_create_validity(self) -&gt; None:\n    \"\"\"Tests attempt creation integrity and validation\"\"\"\n    attempt1: Attempt = Attempt.objects.get(pk=self.attempt1.pk)\n    attempt2: Attempt = Attempt.objects.get(pk=self.attempt2.pk)\n    attempt3: Attempt = Attempt.objects.get(pk=self.attempt3.pk)\n    attempt4: Attempt = Attempt.objects.get(pk=self.attempt4.pk)\n    attempt5: Attempt = Attempt.objects.get(pk=self.attempt5.pk)\n    self.assertEqual(Attempt.objects.all().count(), 5)\n    self.assertTrue(attempt1.is_valid())\n    self.assertTrue(attempt2.is_valid())\n    self.assertTrue(attempt3.is_valid())\n    self.assertFalse(attempt4.is_valid())\n    self.assertFalse(attempt5.is_valid())\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#def-test_attempt_update_validity","title":"<code>def test_attempt_update_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_attempt_update_validity(self) -&gt; None:\n    \"\"\"Tests attempt update integrity and validation\"\"\"\n    Attempt.objects.filter(pk=self.attempt4.pk).update(username='bob_a_bob')\n    Attempt.objects.filter(pk=self.attempt5.pk).update(IP='192.168.55.36')\n    for attempt in Attempt.objects.all():\n        with self.subTest(attempt=attempt):\n            self.assertTrue(attempt.is_valid())\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#def-test_attempt_delete_validity","title":"<code>def test_attempt_delete_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_attempt_delete_validity(self) -&gt; None:\n    \"\"\"Tests attempt correct deletion\"\"\"\n    for attempt in Attempt.objects.all():\n        if not attempt.is_valid():\n            attempt.delete()\n    self.assertEqual(Attempt.objects.all().count(), 3)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#def-test_attempt_db_exception_raises","title":"<code>def test_attempt_db_exception_raises</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_attempt_db_exception_raises(self) -&gt; None:\n    \"\"\"Tests attempt correct integrity and validation with raised exceptions\"\"\"\n    raise_kwargs: dict[str, dict[str, str | None]] = {'attemp1': {'IP': 'foobarbazqux'}, 'attemp2': {'IP': 'x' * 65}, 'attemp3': {'IP': None}, 'attemp4': {'username': 'foobarbazqux'}, 'attemp5': {'username': 'x' * 257}, 'attemp6': {'username': None}, 'attemp7': {'password': 'foobarbazqux'}, 'attemp8': {'password': 'x' * 257}, 'attemp9': {'password': None}, 'attemp10': {'URL': 'foobarbazqux'}, 'attemp11': {'URL': 'x' * 257}, 'attemp12': {'URL': None}, 'attemp13': {'timestamp': 'foobarbazqux'}, 'attemp14': {'timestamp': None}}\n    for scenario in raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            with self.assertRaises(ValidationError):\n                with atomic():\n                    instance: Attempt = Attempt(**raise_kwargs[scenario])\n                    instance.full_clean()\n    no_raise_kwargs: dict[str, dict[str, str | int | datetime]] = {'attemp1': {'IP': '255.255.255.255', 'username': 'username', 'password': 'password', 'URL': 'URL'}, 'attemp2': {'IP': '255.255.255.255', 'username': 'username', 'password': 'password', 'URL': 'https://www.youtube.com/watch?v=dQw4w9WgXcQ', 'timestamp': datetime(1980, 4, 25)}, 'attemp3': {'IP': '255.255.255.255', 'username': 10 ** 255, 'password': 10 ** 255, 'URL': '&lt;script&gt;alert(404)&lt;/script&gt;', 'timestamp': '2023-10-15'}, 'attemp4': {'IP': 'x' * 64, 'username': 'x' * 256, 'password': 'x' * 256, 'URL': 'x' * 256, 'timestamp': datetime(2023, 10, 15)}}\n    for scenario in no_raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            instance: Attempt = Attempt(**no_raise_kwargs[scenario])\n            instance.full_clean()\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_models.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/honeypot/tests/test_views.py/","title":"File: <code>test_views.py</code>","text":"<p>Path: <code>SWARDEN.honeypot.tests</code></p>"},{"location":"Codebase/honeypot/tests/test_views.py/#imports","title":"Imports","text":""},{"location":"Codebase/honeypot/tests/test_views.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#import-get_user","title":"<code>import get_user</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import get_user\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#import-attempt","title":"<code>import Attempt</code>","text":"<p>Path: <code>honeypot.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from honeypot.models import Attempt\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/honeypot/tests/test_views.py/#classes","title":"Classes","text":""},{"location":"Codebase/honeypot/tests/test_views.py/#class-honeypotviewstestcase","title":"<code>class HoneypotViewsTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class HoneypotViewsTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        User.objects.create_user(username='user', password='password', email='user@email.com')\n\n    def test_GET_anonymous_user_no_argument(self) -&gt; None:\n        \"\"\"GET /admin/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('honeypot:empty_redirect'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/honeypot.html')\n        res: HttpResponse = self.client.get(reverse('honeypot:empty_redirect'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/honeypot.html')\n        self.assertEqual(Attempt.objects.all().count(), 0)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user_no_argument(self) -&gt; None:\n        \"\"\"GET /admin/ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('honeypot:empty_redirect'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        res: HttpResponse = self.client.get(reverse('honeypot:empty_redirect'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        self.assertEqual(Attempt.objects.all().count(), 0)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_no_argument(self) -&gt; None:\n        \"\"\"POST /admin/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('honeypot:empty_redirect'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/loop.html')\n        res: HttpResponse = self.client.post(reverse('honeypot:empty_redirect'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/loop.html')\n        self.assertEqual(Attempt.objects.all().count(), 2)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_no_argument(self) -&gt; None:\n        \"\"\"POST /admin/ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('honeypot:empty_redirect'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        res: HttpResponse = self.client.post(reverse('honeypot:empty_redirect'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        self.assertEqual(Attempt.objects.all().count(), 2)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_GET_anonymous_user_argument(self) -&gt; None:\n        \"\"\"GET /admin/^(?P&lt;path&gt;.*)/$ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/honeypot.html')\n        res: HttpResponse = self.client.get(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/honeypot.html')\n        self.assertEqual(Attempt.objects.all().count(), 0)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user_argument(self) -&gt; None:\n        \"\"\"GET /admin/^(?P&lt;path&gt;.*)/$ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        res: HttpResponse = self.client.get(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        self.assertEqual(Attempt.objects.all().count(), 0)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_argument(self) -&gt; None:\n        \"\"\"POST /admin/^(?P&lt;path&gt;.*)/$ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/loop.html')\n        res: HttpResponse = self.client.post(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/loop.html')\n        self.assertEqual(Attempt.objects.all().count(), 2)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_argument(self) -&gt; None:\n        \"\"\"POST /admin/^(?P&lt;path&gt;.*)/$ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        res: HttpResponse = self.client.post(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        self.assertEqual(Attempt.objects.all().count(), 2)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_posting_username(self) -&gt; None:\n        \"\"\"POST /admin/login | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'username': 'username'})\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/loop.html')\n        res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'username': \"' OR 1=1 --\"}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/loop.html')\n        self.assertEqual(Attempt.objects.all().count(), 2)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_posting_username(self) -&gt; None:\n        \"\"\"POST /admin/login | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'username': 'username'})\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'username': \"' OR 1=1 --\"}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        self.assertEqual(Attempt.objects.all().count(), 2)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_posting_password(self) -&gt; None:\n        \"\"\"POST /admin/login | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'password': 'password'})\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/loop.html')\n        res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'password': 'drop table'}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/loop.html')\n        self.assertEqual(Attempt.objects.all().count(), 2)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_posting_password(self) -&gt; None:\n        \"\"\"POST /admin/login | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'password': 'password'})\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'password': 'drop table'}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n        self.assertEqual(Attempt.objects.all().count(), 2)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#functions","title":"Functions","text":""},{"location":"Codebase/honeypot/tests/test_views.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    User.objects.create_user(username='user', password='password', email='user@email.com')\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_get_anonymous_user_no_argument","title":"<code>def test_GET_anonymous_user_no_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_no_argument(self) -&gt; None:\n    \"\"\"GET /admin/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('honeypot:empty_redirect'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/honeypot.html')\n    res: HttpResponse = self.client.get(reverse('honeypot:empty_redirect'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/honeypot.html')\n    self.assertEqual(Attempt.objects.all().count(), 0)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_get_authenticated_user_no_argument","title":"<code>def test_GET_authenticated_user_no_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user_no_argument(self) -&gt; None:\n    \"\"\"GET /admin/ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('honeypot:empty_redirect'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    res: HttpResponse = self.client.get(reverse('honeypot:empty_redirect'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    self.assertEqual(Attempt.objects.all().count(), 0)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_post_anonymous_user_no_argument","title":"<code>def test_POST_anonymous_user_no_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_no_argument(self) -&gt; None:\n    \"\"\"POST /admin/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('honeypot:empty_redirect'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/loop.html')\n    res: HttpResponse = self.client.post(reverse('honeypot:empty_redirect'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/loop.html')\n    self.assertEqual(Attempt.objects.all().count(), 2)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_post_authenticated_user_no_argument","title":"<code>def test_POST_authenticated_user_no_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_no_argument(self) -&gt; None:\n    \"\"\"POST /admin/ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('honeypot:empty_redirect'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    res: HttpResponse = self.client.post(reverse('honeypot:empty_redirect'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    self.assertEqual(Attempt.objects.all().count(), 2)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_get_anonymous_user_argument","title":"<code>def test_GET_anonymous_user_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_argument(self) -&gt; None:\n    \"\"\"GET /admin/^(?P&lt;path&gt;.*)/$ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/honeypot.html')\n    res: HttpResponse = self.client.get(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/honeypot.html')\n    self.assertEqual(Attempt.objects.all().count(), 0)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_get_authenticated_user_argument","title":"<code>def test_GET_authenticated_user_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user_argument(self) -&gt; None:\n    \"\"\"GET /admin/^(?P&lt;path&gt;.*)/$ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    res: HttpResponse = self.client.get(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    self.assertEqual(Attempt.objects.all().count(), 0)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_post_anonymous_user_argument","title":"<code>def test_POST_anonymous_user_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_argument(self) -&gt; None:\n    \"\"\"POST /admin/^(?P&lt;path&gt;.*)/$ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/loop.html')\n    res: HttpResponse = self.client.post(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/loop.html')\n    self.assertEqual(Attempt.objects.all().count(), 2)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_post_authenticated_user_argument","title":"<code>def test_POST_authenticated_user_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_argument(self) -&gt; None:\n    \"\"\"POST /admin/^(?P&lt;path&gt;.*)/$ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    res: HttpResponse = self.client.post(reverse('honeypot:re_redirect', args=['&lt;script&gt;alert(1)&lt;/script&gt;']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    self.assertEqual(Attempt.objects.all().count(), 2)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_post_anonymous_user_posting_username","title":"<code>def test_POST_anonymous_user_posting_username</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_posting_username(self) -&gt; None:\n    \"\"\"POST /admin/login | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'username': 'username'})\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/loop.html')\n    res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'username': \"' OR 1=1 --\"}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/loop.html')\n    self.assertEqual(Attempt.objects.all().count(), 2)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_post_authenticated_user_posting_username","title":"<code>def test_POST_authenticated_user_posting_username</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_posting_username(self) -&gt; None:\n    \"\"\"POST /admin/login | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'username': 'username'})\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'username': \"' OR 1=1 --\"}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    self.assertEqual(Attempt.objects.all().count(), 2)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_post_anonymous_user_posting_password","title":"<code>def test_POST_anonymous_user_posting_password</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_posting_password(self) -&gt; None:\n    \"\"\"POST /admin/login | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'password': 'password'})\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/loop.html')\n    res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'password': 'drop table'}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/loop.html')\n    self.assertEqual(Attempt.objects.all().count(), 2)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#def-test_post_authenticated_user_posting_password","title":"<code>def test_POST_authenticated_user_posting_password</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_posting_password(self) -&gt; None:\n    \"\"\"POST /admin/login | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'password': 'password'})\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    res: HttpResponse = self.client.post(reverse('honeypot:honeypot'), {'password': 'drop table'}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'honeypot/authenticated.html')\n    self.assertEqual(Attempt.objects.all().count(), 2)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/honeypot/tests/test_views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/mail/apps.py/","title":"File: <code>apps.py</code>","text":"<p>Path: <code>SWARDEN.mail</code></p>"},{"location":"Codebase/mail/apps.py/#imports","title":"Imports","text":""},{"location":"Codebase/mail/apps.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/mail/apps.py/#import-appconfig","title":"<code>import AppConfig</code>","text":"<p>Path: <code>django.apps</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.apps import AppConfig\n</code></pre>"},{"location":"Codebase/mail/apps.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/mail/apps.py/#classes","title":"Classes","text":""},{"location":"Codebase/mail/apps.py/#class-mailconfig","title":"<code>class MailConfig</code>","text":"<p>Parents: <code>AppConfig</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class MailConfig(AppConfig):\n    default_auto_field: Final[str] = 'django.db.models.BigAutoField'\n    name: Final[str] = 'mail'\n</code></pre>"},{"location":"Codebase/mail/apps.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/mail/apps.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/mail/models.py/","title":"File: <code>models.py</code>","text":"<p>Path: <code>SWARDEN.mail</code></p>"},{"location":"Codebase/mail/models.py/#imports","title":"Imports","text":""},{"location":"Codebase/mail/models.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/mail/models.py/#import-datefield","title":"<code>import DateField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import DateField\n</code></pre>"},{"location":"Codebase/mail/models.py/#import-model","title":"<code>import Model</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import Model\n</code></pre>"},{"location":"Codebase/mail/models.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/mail/models.py/#classes","title":"Classes","text":""},{"location":"Codebase/mail/models.py/#class-wakedatabase","title":"<code>class WakeDatabase</code>","text":"<p>Parents: <code>Model</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class WakeDatabase(Model):\n    created: Final[DateField] = DateField(auto_created=True, auto_now_add=True)\n</code></pre>"},{"location":"Codebase/mail/models.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/mail/models.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/mail/urls.py/","title":"File: <code>urls.py</code>","text":"<p>Path: <code>SWARDEN.mail</code></p>"},{"location":"Codebase/mail/urls.py/#imports","title":"Imports","text":""},{"location":"Codebase/mail/urls.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/mail/urls.py/#import-urlpattern","title":"<code>import URLPattern</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLPattern\n</code></pre>"},{"location":"Codebase/mail/urls.py/#import-path","title":"<code>import path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import path\n</code></pre>"},{"location":"Codebase/mail/urls.py/#import-export_secrets","title":"<code>import export_secrets</code>","text":"<p>Path: <code>mail.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from mail.views import export_secrets\n</code></pre>"},{"location":"Codebase/mail/urls.py/#import-export_secrets_no_argument","title":"<code>import export_secrets_no_argument</code>","text":"<p>Path: <code>mail.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from mail.views import export_secrets_no_argument\n</code></pre>"},{"location":"Codebase/mail/urls.py/#import-wake_db","title":"<code>import wake_db</code>","text":"<p>Path: <code>mail.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from mail.views import wake_db\n</code></pre>"},{"location":"Codebase/mail/urls.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/mail/urls.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/mail/urls.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/mail/urls.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/mail/views.py/","title":"File: <code>views.py</code>","text":"<p>Path: <code>SWARDEN.mail</code></p>"},{"location":"Codebase/mail/views.py/#imports","title":"Imports","text":""},{"location":"Codebase/mail/views.py/#import-writer","title":"<code>import writer</code>","text":"<p>Path: <code>csv</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from csv import writer\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-stringio","title":"<code>import StringIO</code>","text":"<p>Path: <code>io</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from io import StringIO\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-literal","title":"<code>import Literal</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Literal\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-type","title":"<code>import Type</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Type\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-login_required","title":"<code>import login_required</code>","text":"<p>Path: <code>django.contrib.auth.decorators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.decorators import login_required\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-error","title":"<code>import error</code>","text":"<p>Path: <code>django.contrib.messages</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.messages import error\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-success","title":"<code>import success</code>","text":"<p>Path: <code>django.contrib.messages</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.messages import success\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-warning","title":"<code>import warning</code>","text":"<p>Path: <code>django.contrib.messages</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.messages import warning\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-queryset","title":"<code>import QuerySet</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import QuerySet\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-httpresponseredirect","title":"<code>import HttpResponseRedirect</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponseRedirect\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-no_data_to_export","title":"<code>import NO_DATA_TO_EXPORT</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import NO_DATA_TO_EXPORT\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-success_data_exporting","title":"<code>import SUCCESS_DATA_EXPORTING</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import SUCCESS_DATA_EXPORTING\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-send_email_exporting_secrets","title":"<code>import send_email_exporting_secrets</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import send_email_exporting_secrets\n</code></pre>"},{"location":"Codebase/mail/views.py/#import-wakedatabase","title":"<code>import WakeDatabase</code>","text":"<p>Path: <code>mail.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from mail.models import WakeDatabase\n</code></pre>"},{"location":"Codebase/mail/views.py/#consts","title":"Consts","text":""},{"location":"Codebase/mail/views.py/#credentials","title":"<code>CREDENTIALS</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'Credenciais'</code></p> SNIPPET Python<pre><code>CREDENTIALS: Final[str] = 'Credenciais'\n</code></pre>"},{"location":"Codebase/mail/views.py/#cards","title":"<code>CARDS</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'Cart\u00f5es'</code></p> SNIPPET Python<pre><code>CARDS: Final[str] = 'Cart\u00f5es'\n</code></pre>"},{"location":"Codebase/mail/views.py/#security_notes","title":"<code>SECURITY_NOTES</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'Anota\u00e7\u00f5es'</code></p> SNIPPET Python<pre><code>SECURITY_NOTES: Final[str] = 'Anota\u00e7\u00f5es'\n</code></pre>"},{"location":"Codebase/mail/views.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/mail/views.py/#functions","title":"Functions","text":""},{"location":"Codebase/mail/views.py/#def-export_secrets_no_argument","title":"<code>def export_secrets_no_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>login_required(login_url='/conta/entrar')</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_required(login_url='/conta/entrar')\ndef export_secrets_no_argument(r: HttpRequest):\n    return HttpResponseRedirect(reverse('home:index'))\n</code></pre>"},{"location":"Codebase/mail/views.py/#def-export_secrets","title":"<code>def export_secrets</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponseRedirect</code></p> <p>Decorators: <code>login_required(login_url='/conta/entrar')</code></p> <p>Args: <code>r: HttpRequest, secret_type: Literal['Credenciais', 'Cart\u00f5es', 'Anota\u00e7\u00f5es']</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_required(login_url='/conta/entrar')\ndef export_secrets(r: HttpRequest, secret_type: Literal['Credenciais', 'Cart\u00f5es', 'Anota\u00e7\u00f5es']) -&gt; HttpResponseRedirect:\n    CREDENTIALS: Final[str] = 'Credenciais'\n    CARDS: Final[str] = 'Cart\u00f5es'\n    SECURITY_NOTES: Final[str] = 'Anota\u00e7\u00f5es'\n    if secret_type not in [CREDENTIALS, CARDS, SECURITY_NOTES]:\n        warning(r, 'Imposs\u00edvel exportar segredos do tipo informado.')\n        return HttpResponseRedirect(reverse('home:index'))\n    dispatch_models: dict[str, Type[LoginCredential] | Type[Card] | Type[SecurityNote]] = {CREDENTIALS: LoginCredential, CARDS: Card, SECURITY_NOTES: SecurityNote}\n    query: QuerySet = dispatch_models[secret_type].objects.filter(owner=r.user)\n    dispatch_redirect: dict[str, str] = {CREDENTIALS: 'secret:credential_list_view', CARDS: 'secret:card_list_view', SECURITY_NOTES: 'secret:note_list_view'}\n    if not query.exists():\n        error(r, NO_DATA_TO_EXPORT)\n        return HttpResponseRedirect(reverse(dispatch_redirect[secret_type]))\n    csvfile: StringIO = StringIO()\n    csvwriter = writer(csvfile, delimiter='\u00ac', doublequote=True)\n    if secret_type == CREDENTIALS:\n        csvwriter.writerow(['Servi\u00e7o', 'Apelido', 'Login 3rd', 'Apelido Login 3rd', 'Login', 'Senha'])\n        for i in query:\n            csvwriter.writerow([i.get_service_display(), i.name, i.thirdy_party_login, i.thirdy_party_login_name, i.login, i.password])\n    elif secret_type == CARDS:\n        csvwriter.writerow(['Apelido', 'Tipo', 'N\u00famero', 'Expira\u00e7\u00e3o', 'CVV', 'Banco', 'Bandeira', 'Titular'])\n        for i in query:\n            csvwriter.writerow([i.name, i.get_card_type_display(), i.number, i.expiration, i.cvv, i.get_bank_display(), i.get_brand_display(), i.owners_name])\n    elif secret_type == SECURITY_NOTES:\n        csvwriter.writerow(['T\u00edtulo', 'Conte\u00fado'])\n        for i in query:\n            csvwriter.writerow([i.title, i.content])\n    send_email_exporting_secrets(secret_type, csvfile, str(r.user.email))\n    success(r, SUCCESS_DATA_EXPORTING)\n    return HttpResponseRedirect(reverse(dispatch_redirect[secret_type]))\n</code></pre>"},{"location":"Codebase/mail/views.py/#def-wake_db","title":"<code>def wake_db</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def wake_db(r: HttpRequest) -&gt; HttpResponse:\n    WakeDatabase.objects.create()\n    e = WakeDatabase.objects.all()\n    if e.count() &gt; 3:\n        e.delete()\n    return HttpResponse(e.count())\n</code></pre>"},{"location":"Codebase/mail/views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/mail/migrations/0001_initial.py/","title":"File: <code>0001_initial.py</code>","text":"<p>Path: <code>SWARDEN.mail.migrations</code></p>"},{"location":"Codebase/mail/migrations/0001_initial.py/#imports","title":"Imports","text":""},{"location":"Codebase/mail/migrations/0001_initial.py/#import-migrations","title":"<code>import migrations</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import migrations\n</code></pre>"},{"location":"Codebase/mail/migrations/0001_initial.py/#import-models","title":"<code>import models</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import models\n</code></pre>"},{"location":"Codebase/mail/migrations/0001_initial.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/mail/migrations/0001_initial.py/#classes","title":"Classes","text":""},{"location":"Codebase/mail/migrations/0001_initial.py/#class-migration","title":"<code>class Migration</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [migrations.CreateModel(name='WakeDatabase', fields=[('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('created', models.DateField(auto_created=True, auto_now_add=True))])]\n</code></pre>"},{"location":"Codebase/mail/migrations/0001_initial.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/mail/migrations/0001_initial.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/mail/tests/test_views.py/","title":"File: <code>test_views.py</code>","text":"<p>Path: <code>SWARDEN.mail.tests</code></p>"},{"location":"Codebase/mail/tests/test_views.py/#imports","title":"Imports","text":""},{"location":"Codebase/mail/tests/test_views.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-get_user","title":"<code>import get_user</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import get_user\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-mail","title":"<code>import mail</code>","text":"<p>Path: <code>django.core</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core import mail\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-validationerror","title":"<code>import ValidationError</code>","text":"<p>Path: <code>django.core.exceptions</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.exceptions import ValidationError\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-month","title":"<code>import Month</code>","text":"<p>Path: <code>secret.month.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.month.models import Month\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-create_scenarios","title":"<code>import create_scenarios</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import create_scenarios\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-send_email_activate_account_completed","title":"<code>import send_email_activate_account_completed</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import send_email_activate_account_completed\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#import-send_email_activation_account_token","title":"<code>import send_email_activation_account_token</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import send_email_activation_account_token\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/mail/tests/test_views.py/#classes","title":"Classes","text":""},{"location":"Codebase/mail/tests/test_views.py/#class-basemailtestcase","title":"<code>class BaseMailTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class BaseMailTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#class-exportsecretsviewtestcase","title":"<code>class ExportSecretsViewTestCase</code>","text":"<p>Parents: <code>BaseMailTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class ExportSecretsViewTestCase(BaseMailTestCase):\n\n    def test_GET_anonymous_user_no_argument(self) -&gt; None:\n        \"\"\"GET /enviar-email/exportar-segredos/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets_no_argument'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('mail:export_secrets_no_argument'))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets_no_argument'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user_no_argument(self) -&gt; None:\n        \"\"\"GET /enviar-email/exportar-segredos/ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets_no_argument'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('home:index'))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets_no_argument'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/index.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_GET_anonymous_user_invalid_secret(self) -&gt; None:\n        \"\"\"GET /enviar-email/exportar-segredos/&lt;Any&gt; | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['invalid']))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('mail:export_secrets', args=['invalid']))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['invalid']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user_invalid_secret(self) -&gt; None:\n        \"\"\"GET /enviar-email/exportar-segredos/&lt;Any&gt; | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['invalid']))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('home:index'))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['invalid']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'home/index.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user_no_secret(self) -&gt; None:\n        \"\"\"GET /enviar-email/exportar-segredos/&lt;Credenciais | Cart\u00f5es | Anota\u00e7\u00f5es&gt; | authenticated user | no secret\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        secrets: list[tuple[str, str]] = [('Credenciais', 'secret:credential_list_view'), ('Cart\u00f5es', 'secret:card_list_view'), ('Anota\u00e7\u00f5es', 'secret:note_list_view')]\n        for (secret, url) in secrets:\n            with self.subTest(secret=secret):\n                res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=[secret]))\n                self.assertEqual(res.status_code, 302)\n                self.assertRedirects(res, reverse(url))\n                res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=[secret]), follow=True)\n                self.assertEqual(res.status_code, 200)\n                self.assertTemplateUsed(res, 'secret/list_view.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user_credential(self) -&gt; None:\n        \"\"\"GET /enviar-email/exportar-segredos/Credenciais | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        LoginCredential.objects.create(owner=self.user, service='google--', name='Personal Main Account', slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123@gcom', password='ilovemenotyou')\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Credenciais']))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('secret:credential_list_view'))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Credenciais']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/list_view.html')\n        self.assertEqual(len(mail.outbox), 2)\n        self.assertEqual(mail.outbox[-1].subject, 'Exporta\u00e7\u00e3o de Segredos | sWarden')\n        self.assertEqual(mail.outbox[-1].to, ['user@email.com'])\n        self.assertEqual(mail.outbox[-1].body, 'Aqui est\u00e3o seus segredos armazenados em \"Credenciais\" no sWarden.\\n\\nEquipe sWarden')\n\n    def test_GET_authenticated_user_card(self) -&gt; None:\n        \"\"\"GET /enviar-email/exportar-segredos/Cart\u00f5es | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        Card.objects.create(owner=self.user, name='Personal Main Card', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card', owners_name='TEST USER')\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Cart\u00f5es']))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('secret:card_list_view'))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Cart\u00f5es']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/list_view.html')\n        self.assertEqual(len(mail.outbox), 2)\n        self.assertEqual(mail.outbox[-1].subject, 'Exporta\u00e7\u00e3o de Segredos | sWarden')\n        self.assertEqual(mail.outbox[-1].to, ['user@email.com'])\n        self.assertEqual(mail.outbox[-1].body, 'Aqui est\u00e3o seus segredos armazenados em \"Cart\u00f5es\" no sWarden.\\n\\nEquipe sWarden')\n\n    def test_GET_authenticated_user_note(self) -&gt; None:\n        \"\"\"GET /enviar-email/exportar-segredos/Anota\u00e7\u00f5es | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        SecurityNote.objects.create(owner=self.user, title='How to draw an apple', slug='how-to-draw-an-apple', content='Just draw an apple tree and erase the tree.')\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Anota\u00e7\u00f5es']))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('secret:note_list_view'))\n        res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Anota\u00e7\u00f5es']), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/list_view.html')\n        self.assertEqual(len(mail.outbox), 2)\n        self.assertEqual(mail.outbox[-1].subject, 'Exporta\u00e7\u00e3o de Segredos | sWarden')\n        self.assertEqual(mail.outbox[-1].to, ['user@email.com'])\n        self.assertEqual(mail.outbox[-1].body, 'Aqui est\u00e3o seus segredos armazenados em \"Anota\u00e7\u00f5es\" no sWarden.\\n\\nEquipe sWarden')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#class-emailactivationaccounttokentestcase","title":"<code>class EmailActivationAccountTokenTestCase</code>","text":"<p>Parents: <code>BaseMailTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class EmailActivationAccountTokenTestCase(BaseMailTestCase):\n\n    def test_ideal(self) -&gt; None:\n        \"\"\"\n        send_email_activation_account_token(\n            domain: str,\n            user: User,\n            password: str\n        )\n        \"\"\"\n        self.assertIsNone(send_email_activation_account_token('domain', self.user, 'password'))\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertTrue(mail.outbox[-1].subject, 'Ativa\u00e7\u00e3o de Conta | sWarden')\n        self.assertTrue(mail.outbox[-1].to, ['user@email.com'])\n\n    def test_invalid_User(self) -&gt; None:\n        \"\"\"\n        send_email_activation_account_token(\n            domain: str,\n            user: User,\n            password: str\n        )\n        \"\"\"\n        user: User = User()\n        with self.assertRaises(ValidationError):\n            send_email_activation_account_token('domain', user, 'password')\n\n    def test_wrong_type_domain_arg(self) -&gt; None:\n        \"\"\"\n        send_email_activation_account_token(\n            domain: not str,\n            user: User,\n            password: str\n        )\n        \"\"\"\n        with self.assertRaises(TypeError):\n            send_email_activation_account_token(500, self.user, 'password')\n\n    def test_wrong_type_user_arg(self) -&gt; None:\n        \"\"\"\n        send_email_activation_account_token(\n            domain: str,\n            user: not User,\n            password: str\n        )\n        \"\"\"\n        with self.assertRaises(TypeError):\n            send_email_activation_account_token('domain', 'self.user', 'password')\n\n    def test_wrong_type_password_arg(self) -&gt; None:\n        \"\"\"\n        send_email_activation_account_token(\n            domain: str,\n            user: User,\n            password: not str\n        )\n        \"\"\"\n        with self.assertRaises(TypeError):\n            send_email_activation_account_token('domain', self.user, 500)\n\n    def test_missing_args(self) -&gt; None:\n        \"\"\"\n        send_email_activation_account_token(\n            domain: str | None,\n            user: User | None,\n            password: str | None\n        )\n        \"\"\"\n        params: list[dict[str, str | User]] = [{'domain': 'domain'}, {'user': self.user}, {'password': 'password'}]\n        for (case, scenario) in create_scenarios(params):\n            with self.subTest(scenario=case):\n                with self.assertRaises(TypeError):\n                    send_email_activation_account_token(**scenario)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#class-emailactivationaccountdonetestcase","title":"<code>class EmailActivationAccountDoneTestCase</code>","text":"<p>Parents: <code>BaseMailTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class EmailActivationAccountDoneTestCase(BaseMailTestCase):\n\n    def test_ideal(self) -&gt; None:\n        \"\"\"send_email_activate_account_completed(user_email: str)\"\"\"\n        self.assertIsNone(send_email_activate_account_completed('user@email.com'))\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertTrue(mail.outbox[-1].subject, 'Ativa\u00e7\u00e3o de Conta | sWarden')\n        self.assertTrue(mail.outbox[-1].to, ['user@email.com'])\n\n    def test_invalid_email(self) -&gt; None:\n        \"\"\"send_email_activate_account_completed(user_email: not str)\"\"\"\n        with self.assertRaises(TypeError):\n            send_email_activate_account_completed(4)\n\n    def test_function_behavior_no_argument(self) -&gt; None:\n        \"\"\"send_email_activate_account_completed(user_email: str | None)\"\"\"\n        with self.assertRaises(TypeError):\n            send_email_activate_account_completed()\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#class-wakedatabaseviewtestcase","title":"<code>class WakeDatabaseViewTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class WakeDatabaseViewTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        self.ENDPOINT: str = reverse('mail:wake')\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /enviar-email/wake | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(self.ENDPOINT)\n        self.assertEqual(res.status_code, 200)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /enviar-email/wake | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(self.ENDPOINT)\n        self.assertEqual(res.status_code, 200)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user(self) -&gt; None:\n        \"\"\"POST /enviar-email/wake | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(self.ENDPOINT, {'DATA': 'HERE'}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user(self) -&gt; None:\n        \"\"\"POST /enviar-email/wake | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(self.ENDPOINT, {'DATA': 'HERE'}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_return_values(self) -&gt; None:\n        \"\"\"POST /enviar-email/wake | return values based on num of reqs\"\"\"\n        for i in range(1, 17):\n            with self.subTest(i=i):\n                res: HttpResponse = self.client.get(self.ENDPOINT)\n                self.assertEqual(int(res.content), i % 4)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#functions","title":"Functions","text":""},{"location":"Codebase/mail/tests/test_views.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_anonymous_user_no_argument","title":"<code>def test_GET_anonymous_user_no_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_no_argument(self) -&gt; None:\n    \"\"\"GET /enviar-email/exportar-segredos/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets_no_argument'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('mail:export_secrets_no_argument'))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets_no_argument'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_authenticated_user_no_argument","title":"<code>def test_GET_authenticated_user_no_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user_no_argument(self) -&gt; None:\n    \"\"\"GET /enviar-email/exportar-segredos/ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets_no_argument'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('home:index'))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets_no_argument'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/index.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_anonymous_user_invalid_secret","title":"<code>def test_GET_anonymous_user_invalid_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user_invalid_secret(self) -&gt; None:\n    \"\"\"GET /enviar-email/exportar-segredos/&lt;Any&gt; | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['invalid']))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('mail:export_secrets', args=['invalid']))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['invalid']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_authenticated_user_invalid_secret","title":"<code>def test_GET_authenticated_user_invalid_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user_invalid_secret(self) -&gt; None:\n    \"\"\"GET /enviar-email/exportar-segredos/&lt;Any&gt; | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['invalid']))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('home:index'))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['invalid']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'home/index.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_authenticated_user_no_secret","title":"<code>def test_GET_authenticated_user_no_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user_no_secret(self) -&gt; None:\n    \"\"\"GET /enviar-email/exportar-segredos/&lt;Credenciais | Cart\u00f5es | Anota\u00e7\u00f5es&gt; | authenticated user | no secret\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    secrets: list[tuple[str, str]] = [('Credenciais', 'secret:credential_list_view'), ('Cart\u00f5es', 'secret:card_list_view'), ('Anota\u00e7\u00f5es', 'secret:note_list_view')]\n    for (secret, url) in secrets:\n        with self.subTest(secret=secret):\n            res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=[secret]))\n            self.assertEqual(res.status_code, 302)\n            self.assertRedirects(res, reverse(url))\n            res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=[secret]), follow=True)\n            self.assertEqual(res.status_code, 200)\n            self.assertTemplateUsed(res, 'secret/list_view.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_authenticated_user_credential","title":"<code>def test_GET_authenticated_user_credential</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user_credential(self) -&gt; None:\n    \"\"\"GET /enviar-email/exportar-segredos/Credenciais | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    LoginCredential.objects.create(owner=self.user, service='google--', name='Personal Main Account', slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123@gcom', password='ilovemenotyou')\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Credenciais']))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('secret:credential_list_view'))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Credenciais']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/list_view.html')\n    self.assertEqual(len(mail.outbox), 2)\n    self.assertEqual(mail.outbox[-1].subject, 'Exporta\u00e7\u00e3o de Segredos | sWarden')\n    self.assertEqual(mail.outbox[-1].to, ['user@email.com'])\n    self.assertEqual(mail.outbox[-1].body, 'Aqui est\u00e3o seus segredos armazenados em \"Credenciais\" no sWarden.\\n\\nEquipe sWarden')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_authenticated_user_card","title":"<code>def test_GET_authenticated_user_card</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user_card(self) -&gt; None:\n    \"\"\"GET /enviar-email/exportar-segredos/Cart\u00f5es | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    Card.objects.create(owner=self.user, name='Personal Main Card', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card', owners_name='TEST USER')\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Cart\u00f5es']))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('secret:card_list_view'))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Cart\u00f5es']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/list_view.html')\n    self.assertEqual(len(mail.outbox), 2)\n    self.assertEqual(mail.outbox[-1].subject, 'Exporta\u00e7\u00e3o de Segredos | sWarden')\n    self.assertEqual(mail.outbox[-1].to, ['user@email.com'])\n    self.assertEqual(mail.outbox[-1].body, 'Aqui est\u00e3o seus segredos armazenados em \"Cart\u00f5es\" no sWarden.\\n\\nEquipe sWarden')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_authenticated_user_note","title":"<code>def test_GET_authenticated_user_note</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user_note(self) -&gt; None:\n    \"\"\"GET /enviar-email/exportar-segredos/Anota\u00e7\u00f5es | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    SecurityNote.objects.create(owner=self.user, title='How to draw an apple', slug='how-to-draw-an-apple', content='Just draw an apple tree and erase the tree.')\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Anota\u00e7\u00f5es']))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('secret:note_list_view'))\n    res: HttpResponse = self.client.get(reverse('mail:export_secrets', args=['Anota\u00e7\u00f5es']), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/list_view.html')\n    self.assertEqual(len(mail.outbox), 2)\n    self.assertEqual(mail.outbox[-1].subject, 'Exporta\u00e7\u00e3o de Segredos | sWarden')\n    self.assertEqual(mail.outbox[-1].to, ['user@email.com'])\n    self.assertEqual(mail.outbox[-1].body, 'Aqui est\u00e3o seus segredos armazenados em \"Anota\u00e7\u00f5es\" no sWarden.\\n\\nEquipe sWarden')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_ideal","title":"<code>def test_ideal</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_ideal(self) -&gt; None:\n    \"\"\"\n        send_email_activation_account_token(\n            domain: str,\n            user: User,\n            password: str\n        )\n        \"\"\"\n    self.assertIsNone(send_email_activation_account_token('domain', self.user, 'password'))\n    self.assertEqual(len(mail.outbox), 1)\n    self.assertTrue(mail.outbox[-1].subject, 'Ativa\u00e7\u00e3o de Conta | sWarden')\n    self.assertTrue(mail.outbox[-1].to, ['user@email.com'])\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_invalid_user","title":"<code>def test_invalid_User</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_invalid_User(self) -&gt; None:\n    \"\"\"\n        send_email_activation_account_token(\n            domain: str,\n            user: User,\n            password: str\n        )\n        \"\"\"\n    user: User = User()\n    with self.assertRaises(ValidationError):\n        send_email_activation_account_token('domain', user, 'password')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_wrong_type_domain_arg","title":"<code>def test_wrong_type_domain_arg</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_wrong_type_domain_arg(self) -&gt; None:\n    \"\"\"\n        send_email_activation_account_token(\n            domain: not str,\n            user: User,\n            password: str\n        )\n        \"\"\"\n    with self.assertRaises(TypeError):\n        send_email_activation_account_token(500, self.user, 'password')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_wrong_type_user_arg","title":"<code>def test_wrong_type_user_arg</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_wrong_type_user_arg(self) -&gt; None:\n    \"\"\"\n        send_email_activation_account_token(\n            domain: str,\n            user: not User,\n            password: str\n        )\n        \"\"\"\n    with self.assertRaises(TypeError):\n        send_email_activation_account_token('domain', 'self.user', 'password')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_wrong_type_password_arg","title":"<code>def test_wrong_type_password_arg</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_wrong_type_password_arg(self) -&gt; None:\n    \"\"\"\n        send_email_activation_account_token(\n            domain: str,\n            user: User,\n            password: not str\n        )\n        \"\"\"\n    with self.assertRaises(TypeError):\n        send_email_activation_account_token('domain', self.user, 500)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_missing_args","title":"<code>def test_missing_args</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_missing_args(self) -&gt; None:\n    \"\"\"\n        send_email_activation_account_token(\n            domain: str | None,\n            user: User | None,\n            password: str | None\n        )\n        \"\"\"\n    params: list[dict[str, str | User]] = [{'domain': 'domain'}, {'user': self.user}, {'password': 'password'}]\n    for (case, scenario) in create_scenarios(params):\n        with self.subTest(scenario=case):\n            with self.assertRaises(TypeError):\n                send_email_activation_account_token(**scenario)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_ideal_1","title":"<code>def test_ideal</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_ideal(self) -&gt; None:\n    \"\"\"send_email_activate_account_completed(user_email: str)\"\"\"\n    self.assertIsNone(send_email_activate_account_completed('user@email.com'))\n    self.assertEqual(len(mail.outbox), 1)\n    self.assertTrue(mail.outbox[-1].subject, 'Ativa\u00e7\u00e3o de Conta | sWarden')\n    self.assertTrue(mail.outbox[-1].to, ['user@email.com'])\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_invalid_email","title":"<code>def test_invalid_email</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_invalid_email(self) -&gt; None:\n    \"\"\"send_email_activate_account_completed(user_email: not str)\"\"\"\n    with self.assertRaises(TypeError):\n        send_email_activate_account_completed(4)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_function_behavior_no_argument","title":"<code>def test_function_behavior_no_argument</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_function_behavior_no_argument(self) -&gt; None:\n    \"\"\"send_email_activate_account_completed(user_email: str | None)\"\"\"\n    with self.assertRaises(TypeError):\n        send_email_activate_account_completed()\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-setup_1","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    self.ENDPOINT: str = reverse('mail:wake')\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_anonymous_user","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /enviar-email/wake | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(self.ENDPOINT)\n    self.assertEqual(res.status_code, 200)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_get_authenticated_user","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /enviar-email/wake | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(self.ENDPOINT)\n    self.assertEqual(res.status_code, 200)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_post_anonymous_user","title":"<code>def test_POST_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user(self) -&gt; None:\n    \"\"\"POST /enviar-email/wake | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(self.ENDPOINT, {'DATA': 'HERE'}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_post_authenticated_user","title":"<code>def test_POST_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user(self) -&gt; None:\n    \"\"\"POST /enviar-email/wake | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(self.ENDPOINT, {'DATA': 'HERE'}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#def-test_return_values","title":"<code>def test_return_values</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_return_values(self) -&gt; None:\n    \"\"\"POST /enviar-email/wake | return values based on num of reqs\"\"\"\n    for i in range(1, 17):\n        with self.subTest(i=i):\n            res: HttpResponse = self.client.get(self.ENDPOINT)\n            self.assertEqual(int(res.content), i % 4)\n</code></pre>"},{"location":"Codebase/mail/tests/test_views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/admin.py/","title":"File: <code>admin.py</code>","text":"<p>Path: <code>SWARDEN.secret</code></p>"},{"location":"Codebase/secret/admin.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/admin.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/secret/admin.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/secret/admin.py/#import-swarden_admin","title":"<code>import swarden_admin</code>","text":"<p>Path: <code>CORE.admin</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from CORE.admin import swarden_admin\n</code></pre>"},{"location":"Codebase/secret/admin.py/#import-modeladmin","title":"<code>import ModelAdmin</code>","text":"<p>Path: <code>django.contrib.admin</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.admin import ModelAdmin\n</code></pre>"},{"location":"Codebase/secret/admin.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/secret/admin.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/secret/admin.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/secret/admin.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/secret/admin.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/admin.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/admin.py/#class-baseswardenmodeladmin","title":"<code>class BasesWardenModelAdmin</code>","text":"<p>Parents: <code>ModelAdmin</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class BasesWardenModelAdmin(ModelAdmin):\n    exclude: tuple = tuple()\n    _exclude: tuple = tuple()\n\n    def has_change_permission(self, r: HttpRequest, obj=None) -&gt; bool:\n        return False if not r.user.is_superuser else True\n\n    def get_form(self, request: HttpRequest, obj: Any=None, **kwargs: Any) -&gt; Any:\n        if not request.user.is_superuser:\n            self.exclude = self._exclude\n        return super().get_form(request, obj, **kwargs)\n</code></pre>"},{"location":"Codebase/secret/admin.py/#class-cardadmin","title":"<code>class CardAdmin</code>","text":"<p>Parents: <code>BasesWardenModelAdmin</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class CardAdmin(BasesWardenModelAdmin):\n    list_filter: Final = ('owner__is_active', 'card_type', 'bank', 'brand')\n    search_fields: Final = ('card_type', 'bank', 'brand', 'owner__username', 'owner__first_name', 'owner__last_name')\n    prepopulated_fields: Final = {'slug': ('bank', 'name')}\n    list_display: Final = ('pk', 'slug', 'created', 'updated')\n    _exclude: Final = ('owner', 'card_type', 'number', 'expiration', 'cvv', 'brand', 'owners_name', 'note')\n</code></pre>"},{"location":"Codebase/secret/admin.py/#class-logincredentialadmin","title":"<code>class LoginCredentialAdmin</code>","text":"<p>Parents: <code>BasesWardenModelAdmin</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LoginCredentialAdmin(BasesWardenModelAdmin):\n    list_filter: Final = ('owner__is_active', 'thirdy_party_login', 'service')\n    search_fields: Final = ('slug', 'serviceowner__username', 'owner__first_name', 'owner__last_name')\n    prepopulated_fields: Final = {'slug': ('service', 'name')}\n    list_display: Final = ('pk', 'slug', 'created', 'updated')\n    _exclude: Final = ('owner', 'thirdy_party_login', 'thirdy_party_login_name', 'login', 'password', 'note')\n</code></pre>"},{"location":"Codebase/secret/admin.py/#class-securitynoteadmin","title":"<code>class SecurityNoteAdmin</code>","text":"<p>Parents: <code>BasesWardenModelAdmin</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecurityNoteAdmin(BasesWardenModelAdmin):\n    list_filter: Final = ('owner__is_active', 'note_type')\n    search_fields: Final = ('slug', 'owner__username', 'owner__first_name', 'owner__last_name')\n    prepopulated_fields: Final = {'slug': ('title',)}\n    list_display: Final = ('pk', 'note_type', 'slug', 'created', 'updated')\n    _exclude: Final = ('owner', 'content')\n</code></pre>"},{"location":"Codebase/secret/admin.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/admin.py/#def-has_change_permission","title":"<code>def has_change_permission</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, r: HttpRequest, obj: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def has_change_permission(self, r: HttpRequest, obj=None) -&gt; bool:\n    return False if not r.user.is_superuser else True\n</code></pre>"},{"location":"Codebase/secret/admin.py/#def-get_form","title":"<code>def get_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Any</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, request: HttpRequest, obj: Any</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_form(self, request: HttpRequest, obj: Any=None, **kwargs: Any) -&gt; Any:\n    if not request.user.is_superuser:\n        self.exclude = self._exclude\n    return super().get_form(request, obj, **kwargs)\n</code></pre>"},{"location":"Codebase/secret/admin.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/apps.py/","title":"File: <code>apps.py</code>","text":"<p>Path: <code>SWARDEN.secret</code></p>"},{"location":"Codebase/secret/apps.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/apps.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/secret/apps.py/#import-appconfig","title":"<code>import AppConfig</code>","text":"<p>Path: <code>django.apps</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.apps import AppConfig\n</code></pre>"},{"location":"Codebase/secret/apps.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/apps.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/apps.py/#class-secretconfig","title":"<code>class SecretConfig</code>","text":"<p>Parents: <code>AppConfig</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecretConfig(AppConfig):\n    default_auto_field: Final[str] = 'django.db.models.BigAutoField'\n    name: Final[str] = 'secret'\n    verbose_name: Final[str] = 'Segredo'\n</code></pre>"},{"location":"Codebase/secret/apps.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/secret/apps.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/urls.py/","title":"File: <code>urls.py</code>","text":"<p>Path: <code>SWARDEN.secret</code></p>"},{"location":"Codebase/secret/urls.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/urls.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/secret/urls.py/#import-path","title":"<code>import path</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import path\n</code></pre>"},{"location":"Codebase/secret/urls.py/#import-urlpattern","title":"<code>import URLPattern</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import URLPattern\n</code></pre>"},{"location":"Codebase/secret/urls.py/#import-views","title":"<code>import views</code>","text":"<p>Path: <code>secret</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret import views\n</code></pre>"},{"location":"Codebase/secret/urls.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/urls.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/secret/urls.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/secret/urls.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/views.py/","title":"File: <code>views.py</code>","text":"<p>Path: <code>SWARDEN.secret</code></p>"},{"location":"Codebase/secret/views.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/views.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-callable","title":"<code>import Callable</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Callable\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-literal","title":"<code>import Literal</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Literal\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-type","title":"<code>import Type</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Type\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-login_required","title":"<code>import login_required</code>","text":"<p>Path: <code>django.contrib.auth.decorators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth.decorators import login_required\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-error","title":"<code>import error</code>","text":"<p>Path: <code>django.contrib.messages</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.messages import error\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-httprequest","title":"<code>import HttpRequest</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpRequest\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-httpresponseredirect","title":"<code>import HttpResponseRedirect</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponseRedirect\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-get_object_or_404","title":"<code>import get_object_or_404</code>","text":"<p>Path: <code>django.shortcuts</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.shortcuts import get_object_or_404\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-render","title":"<code>import render</code>","text":"<p>Path: <code>django.shortcuts</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.shortcuts import render\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-method_decorator","title":"<code>import method_decorator</code>","text":"<p>Path: <code>django.utils.decorators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.decorators import method_decorator\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-createview","title":"<code>import CreateView</code>","text":"<p>Path: <code>django.views.generic</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.views.generic import CreateView\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-deleteview","title":"<code>import DeleteView</code>","text":"<p>Path: <code>django.views.generic</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.views.generic import DeleteView\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-updateview","title":"<code>import UpdateView</code>","text":"<p>Path: <code>django.views.generic</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.views.generic import UpdateView\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/secret/views.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/secret/views.py/#consts","title":"Consts","text":""},{"location":"Codebase/secret/views.py/#empty_post_msg","title":"<code>EMPTY_POST_MSG</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'Preencha corretamente todos os campos solicitados'</code></p> SNIPPET Python<pre><code>EMPTY_POST_MSG: Final[str] = 'Preencha corretamente todos os campos solicitados'\n</code></pre>"},{"location":"Codebase/secret/views.py/#feedback_msg","title":"<code>FEEDBACK_MSG</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'Slug j\u00e1 existente. Tente outro apelido ou t\u00edtulo.'</code></p> SNIPPET Python<pre><code>FEEDBACK_MSG: Final[str] = 'Slug j\u00e1 existente. Tente outro apelido ou t\u00edtulo.'\n</code></pre>"},{"location":"Codebase/secret/views.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/views.py/#class-credentialcreateview","title":"<code>class CredentialCreateView</code>","text":"<p>Parents: <code>CreateView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass CredentialCreateView(CreateView):\n    model: Type = LoginCredential\n    template_name: Final[str] = 'secret/create_view.html'\n    fields: Final[str] = '__all__'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Adi\u00e7\u00e3o'\n        context['model'] = 'Credencial'\n        return context\n\n    def post(self, r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n        if not len(r.POST):\n            error(r, EMPTY_POST_MSG)\n            return HttpResponseRedirect(reverse('secret:credential_create_view'))\n        if LoginCredential.objects.filter(owner=r.user, slug=r.POST.get('slug')).exists():\n            error(r, FEEDBACK_MSG)\n            return super().get(r)\n        return super().post(r)\n</code></pre>"},{"location":"Codebase/secret/views.py/#class-credentialupdateview","title":"<code>class CredentialUpdateView</code>","text":"<p>Parents: <code>UpdateView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass CredentialUpdateView(UpdateView):\n    model: Type = LoginCredential\n    template_name: Final[str] = 'secret/create_view.html'\n    fields: Final[str] = '__all__'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Edi\u00e7\u00e3o'\n        context['model'] = 'Credencial'\n        return context\n\n    def post(self, r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n        post_pk: str | None = r.POST.get('pk')\n        filter: dict = dict(owner=r.user, slug=r.POST.get('slug'))\n        if LoginCredential.objects.filter(**filter).exclude(pk=post_pk).exists():\n            error(r, FEEDBACK_MSG)\n            return super().get(r)\n        return super().post(r, *args, **kwargs)\n</code></pre>"},{"location":"Codebase/secret/views.py/#class-credentialdeleteview","title":"<code>class CredentialDeleteView</code>","text":"<p>Parents: <code>DeleteView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass CredentialDeleteView(DeleteView):\n    model: Type = LoginCredential\n    template_name: Final[str] = 'secret/delete_view.html'\n    success_url: Final[str] = '/segredos/credenciais'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Exclus\u00e3o'\n        context['model'] = 'Credencial'\n        return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#class-cardcreateview","title":"<code>class CardCreateView</code>","text":"<p>Parents: <code>CreateView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass CardCreateView(CreateView):\n    model: Type = Card\n    template_name: Final[str] = 'secret/create_view.html'\n    fields: Final[str] = '__all__'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Adi\u00e7\u00e3o'\n        context['model'] = 'Cart\u00e3o'\n        return context\n\n    def post(self, r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n        if not len(r.POST):\n            error(r, EMPTY_POST_MSG)\n            return HttpResponseRedirect(reverse('secret:card_create_view'))\n        if Card.objects.filter(owner=r.user, slug=r.POST.get('slug')).exists():\n            error(r, FEEDBACK_MSG)\n            return super().get(r)\n        return super().post(r)\n</code></pre>"},{"location":"Codebase/secret/views.py/#class-cardupdateview","title":"<code>class CardUpdateView</code>","text":"<p>Parents: <code>UpdateView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass CardUpdateView(UpdateView):\n    model: Type = Card\n    template_name: Final[str] = 'secret/create_view.html'\n    fields: Final[str] = '__all__'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Edi\u00e7\u00e3o'\n        context['model'] = 'Cart\u00e3o'\n        return context\n\n    def post(self, r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n        post_pk: str | None = r.POST.get('pk')\n        filter: dict = dict(owner=r.user, slug=r.POST.get('slug'))\n        if Card.objects.filter(**filter).exclude(pk=post_pk).exists():\n            error(r, FEEDBACK_MSG)\n            return super().get(r)\n        return super().post(r, *args, **kwargs)\n</code></pre>"},{"location":"Codebase/secret/views.py/#class-carddeleteview","title":"<code>class CardDeleteView</code>","text":"<p>Parents: <code>DeleteView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass CardDeleteView(DeleteView):\n    model: Type = Card\n    template_name: Final[str] = 'secret/delete_view.html'\n    success_url: Final[str] = '/segredos/cartoes'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Exclus\u00e3o'\n        context['model'] = 'Cart\u00e3o'\n        return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#class-notecreateview","title":"<code>class NoteCreateView</code>","text":"<p>Parents: <code>CreateView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass NoteCreateView(CreateView):\n    model: Type = SecurityNote\n    template_name: Final[str] = 'secret/create_view.html'\n    fields: Final[str] = '__all__'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Adi\u00e7\u00e3o'\n        context['model'] = 'Anota\u00e7\u00e3o'\n        return context\n\n    def post(self, r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n        if not len(r.POST):\n            error(r, EMPTY_POST_MSG)\n            return HttpResponseRedirect(reverse('secret:note_create_view'))\n        if SecurityNote.objects.filter(owner=r.user, slug=r.POST.get('slug')).exists():\n            error(r, FEEDBACK_MSG)\n            return super().get(r)\n        return super().post(r)\n</code></pre>"},{"location":"Codebase/secret/views.py/#class-noteupdateview","title":"<code>class NoteUpdateView</code>","text":"<p>Parents: <code>UpdateView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass NoteUpdateView(UpdateView):\n    model: Type = SecurityNote\n    template_name: Final[str] = 'secret/create_view.html'\n    fields: Final[str] = '__all__'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Edi\u00e7\u00e3o'\n        context['model'] = 'Anota\u00e7\u00e3o'\n        return context\n\n    def post(self, r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n        post_pk: str | None = r.POST.get('pk')\n        filter: dict = dict(owner=r.user, slug=r.POST.get('slug'))\n        if SecurityNote.objects.filter(**filter).exclude(pk=post_pk).exists():\n            error(r, FEEDBACK_MSG)\n            return super().get(r)\n        return super().post(r, *args, **kwargs)\n</code></pre>"},{"location":"Codebase/secret/views.py/#class-notedeleteview","title":"<code>class NoteDeleteView</code>","text":"<p>Parents: <code>DeleteView</code></p> <p>Decorators: <code>login_dec_dispatch</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec_dispatch\nclass NoteDeleteView(DeleteView):\n    model: Type = SecurityNote\n    template_name: Final[str] = 'secret/delete_view.html'\n    success_url: Final[str] = '/segredos/anotacoes'\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        context: dict[str, Any] = super().get_context_data(**kwargs)\n        context['action'] = 'Exclus\u00e3o'\n        context['model'] = 'Anota\u00e7\u00e3o'\n        return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/views.py/#def-_list_view","title":"<code>def _list_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, str | list] | None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>r: HttpRequest, secret: Literal['credential', 'card', 'note']</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def _list_view(r: HttpRequest, secret: Literal['credential', 'card', 'note']) -&gt; dict[str, str | list] | None:\n    dispatch: dict[Literal['credential', 'card', 'note'], dict[str, list | str]] = {'credential': {'object_list': r.user.credentials.all(), 'model_name': 'Credenciais'}, 'card': {'object_list': r.user.cards.all(), 'model_name': 'Cart\u00f5es'}, 'note': {'object_list': r.user.notes.all(), 'model_name': 'Anota\u00e7\u00f5es'}}\n    return dispatch.get(secret)\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-index","title":"<code>def index</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>login_dec</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec\ndef index(r: HttpRequest) -&gt; HttpResponse:\n    return render(r, 'secret/index.html')\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-credential_list_view","title":"<code>def credential_list_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>login_dec</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec\ndef credential_list_view(r: HttpRequest) -&gt; HttpResponse:\n    return render(r, 'secret/list_view.html', _list_view(r, 'credential'))\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-credential_detail_view","title":"<code>def credential_detail_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>login_dec</code></p> <p>Args: <code>r: HttpRequest, slug: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec\ndef credential_detail_view(r: HttpRequest, slug: str) -&gt; HttpResponse:\n    credential: LoginCredential = get_object_or_404(LoginCredential, owner=r.user, slug=slug)\n    return render(r, 'secret/Credential/detail_view.html', {'object': credential})\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-card_list_view","title":"<code>def card_list_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>login_dec</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec\ndef card_list_view(r: HttpRequest) -&gt; HttpResponse:\n    return render(r, 'secret/list_view.html', _list_view(r, 'card'))\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-card_detail_view","title":"<code>def card_detail_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>login_dec</code></p> <p>Args: <code>r: HttpRequest, slug: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec\ndef card_detail_view(r: HttpRequest, slug: str) -&gt; HttpResponse:\n    card: Card = get_object_or_404(Card, owner=r.user, slug=slug)\n    return render(r, 'secret/Card/detail_view.html', {'object': card})\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-note_list_view","title":"<code>def note_list_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>login_dec</code></p> <p>Args: <code>r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec\ndef note_list_view(r: HttpRequest) -&gt; HttpResponse:\n    return render(r, 'secret/list_view.html', _list_view(r, 'note'))\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-note_detail_view","title":"<code>def note_detail_view</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>login_dec</code></p> <p>Args: <code>r: HttpRequest, slug: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@login_dec\ndef note_detail_view(r: HttpRequest, slug: str) -&gt; HttpResponse:\n    note: SecurityNote = get_object_or_404(SecurityNote, owner=r.user, slug=slug)\n    return render(r, 'secret/Note/detail_view.html', {'object': note})\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Adi\u00e7\u00e3o'\n    context['model'] = 'Credencial'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-post","title":"<code>def post</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse | HttpResponseRedirect</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def post(self, r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if not len(r.POST):\n        error(r, EMPTY_POST_MSG)\n        return HttpResponseRedirect(reverse('secret:credential_create_view'))\n    if LoginCredential.objects.filter(owner=r.user, slug=r.POST.get('slug')).exists():\n        error(r, FEEDBACK_MSG)\n        return super().get(r)\n    return super().post(r)\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data_1","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Edi\u00e7\u00e3o'\n    context['model'] = 'Credencial'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-post_1","title":"<code>def post</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def post(self, r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n    post_pk: str | None = r.POST.get('pk')\n    filter: dict = dict(owner=r.user, slug=r.POST.get('slug'))\n    if LoginCredential.objects.filter(**filter).exclude(pk=post_pk).exists():\n        error(r, FEEDBACK_MSG)\n        return super().get(r)\n    return super().post(r, *args, **kwargs)\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data_2","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Exclus\u00e3o'\n    context['model'] = 'Credencial'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data_3","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Adi\u00e7\u00e3o'\n    context['model'] = 'Cart\u00e3o'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-post_2","title":"<code>def post</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse | HttpResponseRedirect</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def post(self, r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if not len(r.POST):\n        error(r, EMPTY_POST_MSG)\n        return HttpResponseRedirect(reverse('secret:card_create_view'))\n    if Card.objects.filter(owner=r.user, slug=r.POST.get('slug')).exists():\n        error(r, FEEDBACK_MSG)\n        return super().get(r)\n    return super().post(r)\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data_4","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Edi\u00e7\u00e3o'\n    context['model'] = 'Cart\u00e3o'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-post_3","title":"<code>def post</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def post(self, r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n    post_pk: str | None = r.POST.get('pk')\n    filter: dict = dict(owner=r.user, slug=r.POST.get('slug'))\n    if Card.objects.filter(**filter).exclude(pk=post_pk).exists():\n        error(r, FEEDBACK_MSG)\n        return super().get(r)\n    return super().post(r, *args, **kwargs)\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data_5","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Exclus\u00e3o'\n    context['model'] = 'Cart\u00e3o'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data_6","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Adi\u00e7\u00e3o'\n    context['model'] = 'Anota\u00e7\u00e3o'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-post_4","title":"<code>def post</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse | HttpResponseRedirect</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def post(self, r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if not len(r.POST):\n        error(r, EMPTY_POST_MSG)\n        return HttpResponseRedirect(reverse('secret:note_create_view'))\n    if SecurityNote.objects.filter(owner=r.user, slug=r.POST.get('slug')).exists():\n        error(r, FEEDBACK_MSG)\n        return super().get(r)\n    return super().post(r)\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data_7","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Edi\u00e7\u00e3o'\n    context['model'] = 'Anota\u00e7\u00e3o'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-post_5","title":"<code>def post</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>HttpResponse</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, r: HttpRequest</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def post(self, r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n    post_pk: str | None = r.POST.get('pk')\n    filter: dict = dict(owner=r.user, slug=r.POST.get('slug'))\n    if SecurityNote.objects.filter(**filter).exclude(pk=post_pk).exists():\n        error(r, FEEDBACK_MSG)\n        return super().get(r)\n    return super().post(r, *args, **kwargs)\n</code></pre>"},{"location":"Codebase/secret/views.py/#def-get_context_data_8","title":"<code>def get_context_data</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>dict[str, Any]</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    context: dict[str, Any] = super().get_context_data(**kwargs)\n    context['action'] = 'Exclus\u00e3o'\n    context['model'] = 'Anota\u00e7\u00e3o'\n    return context\n</code></pre>"},{"location":"Codebase/secret/views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/management/commands/populatesecret.py/","title":"File: <code>populatesecret.py</code>","text":"<p>Path: <code>SWARDEN.secret.management.commands</code></p>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/management/commands/populatesecret.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#import-basecommand","title":"<code>import BaseCommand</code>","text":"<p>Path: <code>django.core.management</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.management import BaseCommand\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#import-month","title":"<code>import Month</code>","text":"<p>Path: <code>secret.month.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.month.models import Month\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#import-tqdm","title":"<code>import tqdm</code>","text":"<p>Path: <code>tqdm</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from tqdm import tqdm\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/management/commands/populatesecret.py/#class-command","title":"<code>class Command</code>","text":"<p>Parents: <code>BaseCommand</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Command(BaseCommand):\n\n    def handle(self, *args: Any, **options: Any) -&gt; None:\n        self.populate_cards()\n        self.populate_notes()\n        self.populate_credentials()\n\n    def populate_cards(self) -&gt; None:\n        self.stdout.write('\\nPopulating secret.Card')\n        with open('./secret/management/commands/populate_card.txt') as sample:\n            f: list[list[str]] = [i.strip().split('::') for i in sample.readlines()]\n        for i in tqdm(f, desc='Cards', bar_format='{l_bar}{bar:100}{r_bar}{bar:-10b}'):\n            (owner, name, card_type, number, expiration, cvv, bank, brand, owners_name, note) = i\n            owner: User = User.objects.get(pk=owner)\n            (y, m) = expiration.split('-')\n            expiration = Month(int(y), int(m))\n            Card.objects.create(owner=owner, name=name, card_type=card_type, number=number, expiration=expiration, cvv=cvv, bank=bank, brand=brand, owners_name=owners_name, note=note, slug=f\"{bank}{name.replace(' ', '-').lower()}\")\n\n    def populate_notes(self) -&gt; None:\n        self.stdout.write('\\nPopulating secret.SecurityNote')\n        with open('./secret/management/commands/populate_note.txt') as sample:\n            f: list[list[str]] = [i.strip().split('::') for i in sample.readlines()]\n        for i in tqdm(f, desc='Notes', bar_format='{l_bar}{bar:100}{r_bar}{bar:-10b}'):\n            (owner, title, note_type, content) = i\n            owner = User.objects.get(pk=owner)\n            SecurityNote.objects.create(owner=owner, title=title, note_type=note_type, content=content, slug=title.replace(' ', '-').lower())\n\n    def populate_credentials(self) -&gt; None:\n        self.stdout.write('\\nPopulating secret.LoginCredential')\n        with open('./secret/management/commands/populate_credential.txt') as sample:\n            f: list[list[str]] = [i.strip().split('::') for i in sample.readlines()]\n        for i in tqdm(f, desc='Notes', bar_format='{l_bar}{bar:100}{r_bar}{bar:-10b}'):\n            (owner, service, name, thirdy_party_login, thirdy_party_login_name, login, password, note) = i\n            owner = User.objects.get(pk=owner)\n            LoginCredential.objects.create(owner=owner, service=service, name=name, thirdy_party_login=thirdy_party_login, thirdy_party_login_name=thirdy_party_login_name, login=login, password=password, note=note, slug=f\"{service}{name.replace(' ', '-').lower()}\")\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/management/commands/populatesecret.py/#def-handle","title":"<code>def handle</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def handle(self, *args: Any, **options: Any) -&gt; None:\n    self.populate_cards()\n    self.populate_notes()\n    self.populate_credentials()\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#def-populate_cards","title":"<code>def populate_cards</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def populate_cards(self) -&gt; None:\n    self.stdout.write('\\nPopulating secret.Card')\n    with open('./secret/management/commands/populate_card.txt') as sample:\n        f: list[list[str]] = [i.strip().split('::') for i in sample.readlines()]\n    for i in tqdm(f, desc='Cards', bar_format='{l_bar}{bar:100}{r_bar}{bar:-10b}'):\n        (owner, name, card_type, number, expiration, cvv, bank, brand, owners_name, note) = i\n        owner: User = User.objects.get(pk=owner)\n        (y, m) = expiration.split('-')\n        expiration = Month(int(y), int(m))\n        Card.objects.create(owner=owner, name=name, card_type=card_type, number=number, expiration=expiration, cvv=cvv, bank=bank, brand=brand, owners_name=owners_name, note=note, slug=f\"{bank}{name.replace(' ', '-').lower()}\")\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#def-populate_notes","title":"<code>def populate_notes</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def populate_notes(self) -&gt; None:\n    self.stdout.write('\\nPopulating secret.SecurityNote')\n    with open('./secret/management/commands/populate_note.txt') as sample:\n        f: list[list[str]] = [i.strip().split('::') for i in sample.readlines()]\n    for i in tqdm(f, desc='Notes', bar_format='{l_bar}{bar:100}{r_bar}{bar:-10b}'):\n        (owner, title, note_type, content) = i\n        owner = User.objects.get(pk=owner)\n        SecurityNote.objects.create(owner=owner, title=title, note_type=note_type, content=content, slug=title.replace(' ', '-').lower())\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#def-populate_credentials","title":"<code>def populate_credentials</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def populate_credentials(self) -&gt; None:\n    self.stdout.write('\\nPopulating secret.LoginCredential')\n    with open('./secret/management/commands/populate_credential.txt') as sample:\n        f: list[list[str]] = [i.strip().split('::') for i in sample.readlines()]\n    for i in tqdm(f, desc='Notes', bar_format='{l_bar}{bar:100}{r_bar}{bar:-10b}'):\n        (owner, service, name, thirdy_party_login, thirdy_party_login_name, login, password, note) = i\n        owner = User.objects.get(pk=owner)\n        LoginCredential.objects.create(owner=owner, service=service, name=name, thirdy_party_login=thirdy_party_login, thirdy_party_login_name=thirdy_party_login_name, login=login, password=password, note=note, slug=f\"{service}{name.replace(' ', '-').lower()}\")\n</code></pre>"},{"location":"Codebase/secret/management/commands/populatesecret.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/migrations/0001_initial.py/","title":"File: <code>0001_initial.py</code>","text":"<p>Path: <code>SWARDEN.secret.migrations</code></p>"},{"location":"Codebase/secret/migrations/0001_initial.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/migrations/0001_initial.py/#import-djangocorevalidators","title":"<code>import django.core.validators</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import django.core.validators\n</code></pre>"},{"location":"Codebase/secret/migrations/0001_initial.py/#import-djangodbmodelsdeletion","title":"<code>import django.db.models.deletion</code>","text":"<p>Path: <code>None</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>import django.db.models.deletion\n</code></pre>"},{"location":"Codebase/secret/migrations/0001_initial.py/#import-secretmonthmodels","title":"<code>import secret.month.models</code>","text":"<p>Path: <code>None</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>import secret.month.models\n</code></pre>"},{"location":"Codebase/secret/migrations/0001_initial.py/#import-uuid","title":"<code>import uuid</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import uuid\n</code></pre>"},{"location":"Codebase/secret/migrations/0001_initial.py/#import-settings","title":"<code>import settings</code>","text":"<p>Path: <code>django.conf</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.conf import settings\n</code></pre>"},{"location":"Codebase/secret/migrations/0001_initial.py/#import-migrations","title":"<code>import migrations</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import migrations\n</code></pre>"},{"location":"Codebase/secret/migrations/0001_initial.py/#import-models","title":"<code>import models</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import models\n</code></pre>"},{"location":"Codebase/secret/migrations/0001_initial.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/migrations/0001_initial.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/migrations/0001_initial.py/#class-migration","title":"<code>class Migration</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Migration(migrations.Migration):\n    initial = True\n    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]\n    operations = [migrations.CreateModel(name='Card', fields=[('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)), ('name', models.CharField(max_length=40, validators=[django.core.validators.MaxLengthValidator(40)], verbose_name='Apelido (ex: Cart\u00e3o da Fam\u00edlia)')), ('card_type', models.CharField(choices=[('deb', 'D\u00e9bito'), ('cred', 'Cr\u00e9dito'), ('pre', 'Pr\u00e9-pago'), ('co', 'Co-branded')], max_length=4, validators=[django.core.validators.MaxLengthValidator(4)], verbose_name='Tipo (d\u00e9bito, cr\u00e9dito, ...)')), ('number', models.CharField(max_length=19, validators=[django.core.validators.MinLengthValidator(12), django.core.validators.MaxLengthValidator(19)], verbose_name='N\u00famero do Cart\u00e3o')), ('expiration', secret.month.models.MonthField(verbose_name='Data de Expira\u00e7\u00e3o')), ('cvv', models.CharField(max_length=4, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.MaxLengthValidator(4)], verbose_name='cvv')), ('bank', models.CharField(choices=[('nao-listado--', 'N\u00c3O LISTADO'), ('original--', 'Banco Original'), ('banco-do-brasil--', 'Banco do Brasil'), ('bradesco--', 'Bradesco'), ('caixa--', 'Caixa'), ('itau--', 'Ita\u00fa'), ('next--', 'Next'), ('nubank--', 'Nubank'), ('pagseguro--', 'PagSeguro'), ('paypal--', 'PayPal'), ('pao-de-acucar--', 'P\u00e3o de A\u00e7\u00facar'), ('santander--', 'Santander'), ('ticket--', 'Ticket')], max_length=64, verbose_name='Banco')), ('brand', models.CharField(choices=[('nao-listado--', 'N\u00c3O LISTADO'), ('american-express--', 'American Express'), ('diners-club-international--', 'Diners Club International'), ('elo--', 'Elo'), ('hipercard--', 'Hipercard'), ('mastercard--', 'Mastercard'), ('visa--', 'Visa')], max_length=64, verbose_name='Bandeira')), ('owners_name', models.CharField(max_length=64, validators=[django.core.validators.MaxLengthValidator(64)], verbose_name='Nome do Titular (como no cart\u00e3o)')), ('note', models.TextField(blank=True, max_length=128, null=True, validators=[django.core.validators.MaxLengthValidator(128)], verbose_name='Anota\u00e7\u00e3o Particular')), ('slug', models.SlugField(max_length=128, validators=[django.core.validators.MaxLengthValidator(128)])), ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')), ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')), ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to=settings.AUTH_USER_MODEL, verbose_name='Dono'))], options={'verbose_name': 'Cart\u00e3o', 'verbose_name_plural': 'Cart\u00f5es', 'ordering': ['-created']}), migrations.CreateModel(name='LoginCredential', fields=[('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)), ('service', models.CharField(choices=[('nao-listado--', 'N\u00c3O LISTADO'), ('aws--', 'AWS'), ('adobe--', 'Adobe'), ('airbnb--', 'Airbnb'), ('amazon--', 'Amazon'), ('prime-video--', 'Amazon Prime Video'), ('american-express--', 'American Express'), ('amil--', 'Amil'), ('apple--', 'Apple'), ('atari--', 'Atari'), ('original--', 'Banco Original'), ('banco-do-brasil--', 'Banco do Brasil'), ('blizzard--', 'Blizzard Entertainment'), ('booking--', 'Booking'), ('bradesco--', 'Bradesco'), ('cma--', 'CMA Vantagens'), ('caixa--', 'Caixa'), ('deezer--', 'Deezer'), ('diners-club-international--', 'Diners Club International'), ('discord--', 'Discord'), ('disney-plus--', 'Disney+'), ('elo--', 'Elo'), ('epic-games--', 'Epic Games'), ('facebook--', 'Facebook'), ('github--', 'Github'), ('glassdoor--', 'Glassdoor'), ('google--', 'Google'), ('gov-br--', 'Gov BR'), ('hapvida--', 'Hapvida'), ('heroku--', 'Heroku'), ('hipercard--', 'Hipercard'), ('indeed--', 'Indeed'), ('instagram--', 'Instagram'), ('itau--', 'Ita\u00fa'), ('kayak--', 'Kayak'), ('lg--', 'LG'), ('linkedin--', 'LinkedIn'), ('magalu--', 'Magazine Luiza'), ('mastercard--', 'Mastercard'), ('mercado-livre--', 'Mercado Livre'), ('motorola--', 'Motorola'), ('netflix--', 'Netflix'), ('next--', 'Next'), ('nintendo--', 'Nintendo'), ('notion--', 'Notion'), ('notredame-intermedica--', 'Notredame Interm\u00e9dica'), ('nu-invest--', 'Nu Invest'), ('nubank--', 'Nubank'), ('outlook--', 'Outlook'), ('pagseguro--', 'PagSeguro'), ('paypal--', 'PayPal'), ('pinterest--', 'Pinterest'), ('playstation--', 'PlayStation'), ('porto-seguro--', 'Porto Seguro'), ('prevent-senior--', 'Prevent Senior'), ('pao-de-acucar--', 'P\u00e3o de A\u00e7\u00facar'), ('reddit--', 'Reddit'), ('revelo--', 'Revelo'), ('riot-games--', 'Riot Games'), ('samsung--', 'Samsung'), ('santander--', 'Santander'), ('skype--', 'Skype'), ('slack--', 'Slack'), ('spotify--', 'Spotify'), ('steam--', 'Steam'), ('stripe--', 'Stripe'), ('submarino--', 'Submarino'), ('sulamerica--', 'Sulamerica'), ('supercell--', 'Supercell'), ('ticket--', 'Ticket'), ('trello--', 'Trello'), ('trip-advisor--', 'Trip Advisor'), ('twitch--', 'Twitch'), ('twitter--', 'Twitter'), ('unimed--', 'Unimed'), ('vercel--', 'Vercel'), ('visa--', 'Visa'), ('wargaming--', 'Wargaming'), ('wordpress--', 'Wordpress'), ('xbox--', 'Xbox'), ('yahoo--', 'Yahoo')], max_length=64, validators=[django.core.validators.MaxLengthValidator(64)], verbose_name='Servi\u00e7o')), ('name', models.CharField(max_length=40, validators=[django.core.validators.MaxLengthValidator(40)], verbose_name='Apelido (ex: Conta Principal)')), ('thirdy_party_login', models.BooleanField(verbose_name='Login com servi\u00e7o de terceiro?')), ('thirdy_party_login_name', models.CharField(max_length=40, validators=[django.core.validators.MaxLengthValidator(40)], verbose_name='Apelido do servi\u00e7o de terceiro')), ('login', models.CharField(max_length=200, validators=[django.core.validators.MaxLengthValidator(200)], verbose_name='Login')), ('password', models.CharField(max_length=200, validators=[django.core.validators.MaxLengthValidator(200)], verbose_name='Senha')), ('note', models.TextField(blank=True, max_length=128, null=True, validators=[django.core.validators.MaxLengthValidator(128)], verbose_name='Anota\u00e7\u00e3o particular')), ('slug', models.SlugField(max_length=128, validators=[django.core.validators.MaxLengthValidator(128)])), ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')), ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')), ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credentials', to=settings.AUTH_USER_MODEL, verbose_name='Dono'))], options={'verbose_name': 'Credencial', 'verbose_name_plural': 'Credenciais', 'ordering': ['-created']}), migrations.CreateModel(name='SecurityNote', fields=[('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)), ('title', models.CharField(max_length=40, validators=[django.core.validators.MaxLengthValidator(40)], verbose_name='T\u00edtulo')), ('content', models.TextField(max_length=300, validators=[django.core.validators.MaxLengthValidator(300)], verbose_name='Conte\u00fado')), ('note_type', models.TextField(choices=[('leg', 'Assuntos Legais'), ('cmt', 'Compromisso'), ('esp', 'Espiritualidade'), ('std', 'Estudo'), ('fml', 'Fam\u00edlia'), ('fin', 'Finan\u00e7a'), ('hlt', 'Sa\u00fade'), ('wrk', 'Trabalho'), ('trv', 'Viagem'), ('vol', 'Voluntariado'), ('oth', 'Outro')], max_length=3, validators=[django.core.validators.MaxLengthValidator(3), django.core.validators.MinLengthValidator(3)], verbose_name='Classifica\u00e7\u00e3o')), ('slug', models.SlugField(validators=[django.core.validators.MaxLengthValidator(50)])), ('created', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')), ('updated', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')), ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to=settings.AUTH_USER_MODEL, verbose_name='Dono'))], options={'verbose_name': 'Nota de Seguran\u00e7a', 'verbose_name_plural': 'Notas de Seguran\u00e7a', 'ordering': ['-created']})]\n</code></pre>"},{"location":"Codebase/secret/migrations/0001_initial.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/secret/migrations/0001_initial.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/models/__init__.py/","title":"File: <code>__init__.py</code>","text":"<p>Path: <code>SWARDEN.secret.models</code></p>"},{"location":"Codebase/secret/models/__init__.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/models/__init__.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>card</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from card import Card\n</code></pre>"},{"location":"Codebase/secret/models/__init__.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>logincredential</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from logincredential import LoginCredential\n</code></pre>"},{"location":"Codebase/secret/models/__init__.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>securitynotes</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from securitynotes import SecurityNote\n</code></pre>"},{"location":"Codebase/secret/models/__init__.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/models/__init__.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/secret/models/__init__.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/secret/models/__init__.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/models/card.py/","title":"File: <code>card.py</code>","text":"<p>Path: <code>SWARDEN.secret.models</code></p>"},{"location":"Codebase/secret/models/card.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/models/card.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-uuid4","title":"<code>import uuid4</code>","text":"<p>Path: <code>uuid</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from uuid import uuid4\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-maxlengthvalidator","title":"<code>import MaxLengthValidator</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import MaxLengthValidator\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-minlengthvalidator","title":"<code>import MinLengthValidator</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import MinLengthValidator\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-cascade","title":"<code>import CASCADE</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CASCADE\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-charfield","title":"<code>import CharField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CharField\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-datetimefield","title":"<code>import DateTimeField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import DateTimeField\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-foreignkey","title":"<code>import ForeignKey</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import ForeignKey\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-model","title":"<code>import Model</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import Model\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-slugfield","title":"<code>import SlugField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import SlugField\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-textfield","title":"<code>import TextField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import TextField\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-uuidfield","title":"<code>import UUIDField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import UUIDField\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-slugify","title":"<code>import slugify</code>","text":"<p>Path: <code>django.template.defaultfilters</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.template.defaultfilters import slugify\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-xor","title":"<code>import xor</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import xor\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-cards_banks","title":"<code>import cards_banks</code>","text":"<p>Path: <code>secret.choices</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.choices import cards_banks\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-cards_brands","title":"<code>import cards_brands</code>","text":"<p>Path: <code>secret.choices</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.choices import cards_brands\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-cards_types","title":"<code>import cards_types</code>","text":"<p>Path: <code>secret.choices</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.choices import cards_types\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#import-monthfield","title":"<code>import MonthField</code>","text":"<p>Path: <code>secret.month.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.month.models import MonthField\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/models/card.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/models/card.py/#class-card","title":"<code>class Card</code>","text":"<p>Parents: <code>Model</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Card(Model):\n    id: Final[UUIDField] = UUIDField(default=uuid4, unique=True, primary_key=True, editable=False)\n    owner: Final[ForeignKey] = ForeignKey(User, on_delete=CASCADE, related_name='cards', verbose_name='Dono')\n    name: CharField = CharField(max_length=40, verbose_name='Apelido (ex: Cart\u00e3o da Fam\u00edlia)', validators=[MaxLengthValidator(40)])\n    card_type: CharField = CharField(max_length=4, choices=cards_types, verbose_name='Tipo (d\u00e9bito, cr\u00e9dito, ...)', validators=[MaxLengthValidator(4)])\n    number: CharField = CharField(max_length=19, validators=[MinLengthValidator(12), MaxLengthValidator(19)], verbose_name='N\u00famero do Cart\u00e3o')\n    expiration = MonthField(verbose_name='Data de Expira\u00e7\u00e3o')\n    cvv: CharField = CharField(max_length=4, validators=[MinLengthValidator(3), MaxLengthValidator(4)], verbose_name='cvv')\n    bank: CharField = CharField(max_length=64, choices=cards_banks, verbose_name='Banco')\n    brand: CharField = CharField(max_length=64, choices=cards_brands, verbose_name='Bandeira')\n    owners_name: CharField = CharField(max_length=64, verbose_name='Nome do Titular (como no cart\u00e3o)', validators=[MaxLengthValidator(64)])\n    note: TextField = TextField(max_length=128, blank=True, null=True, verbose_name='Anota\u00e7\u00e3o Particular', validators=[MaxLengthValidator(128)])\n    slug: Final[SlugField] = SlugField(max_length=128, validators=[MaxLengthValidator(128)])\n    created: Final[DateTimeField] = DateTimeField(auto_now_add=True, verbose_name='Criado em')\n    updated: Final[DateTimeField] = DateTimeField(auto_now=True, verbose_name='Atualizado em')\n\n    class Meta:\n        ordering: Final[list[str]] = ['-created']\n        verbose_name: Final[str] = 'Cart\u00e3o'\n        verbose_name_plural: Final[str] = 'Cart\u00f5es'\n\n    def __str__(self) -&gt; str:\n        return f'{str(self.owner.username)} | {self.card_type} | {self.name}'\n\n    def get_absolute_url(self) -&gt; str:\n        return reverse('secret:card_list_view')\n\n    def save(self, force_insert=False, force_update=False, using=None, update_fields=None) -&gt; None:\n        self.name = xor(str(self.name), self.owner.password[21:])\n        self.number = xor(str(self.number), self.owner.password[21:])\n        self.cvv = xor(str(self.cvv), self.owner.password[21:])\n        self.owners_name = xor(str(self.owners_name), self.owner.password[21:])\n        self.note = xor(str(self.note), self.owner.password[21:])\n        return super().save(force_insert=False, force_update=False, using=None, update_fields=None)\n\n    @classmethod\n    def from_db(cls, db, field_names, values):\n        card: Card = super().from_db(db, field_names, values)\n        card.name = xor(str(card.name), card.owner.password[21:], encrypt=False)\n        card.number = xor(str(card.number), card.owner.password[21:], encrypt=False)\n        card.cvv = xor(str(card.cvv), card.owner.password[21:], encrypt=False)\n        card.owners_name = xor(str(card.owners_name), card.owner.password[21:], encrypt=False)\n        card.note = xor(str(card.note), card.owner.password[21:], encrypt=False)\n        return card\n\n    def expected_max_length(self, var: str) -&gt; int:\n        max_length: Final[dict[str, int]] = {'name': 40, 'card_type': 16, 'number': 19, 'cvv': 4, 'bank': 64, 'brand': 64, 'slug': 128, 'owners_name': 64, 'note': 128}\n        return max_length[var]\n\n    def expected_min_length(self, var: str) -&gt; int:\n        min_length: Final[dict[str, int]] = {'number': 12, 'cvv': 3}\n        return min_length[var]\n\n    def check_field_length(self, var: str) -&gt; bool:\n        if var == 'expiration':\n            return True\n        value = self.__getattribute__(var)\n        if var in ['number', 'cvv']:\n            return self.expected_min_length(var) &lt;= len(value) &lt;= self.expected_max_length(var)\n        return len(value) &lt;= self.expected_max_length(var)\n\n    def all_fields_of_right_length(self) -&gt; bool:\n        vars: Final[list[str]] = ['name', 'card_type', 'number', 'expiration', 'cvv', 'bank', 'brand', 'slug', 'owners_name']\n        return all(map(self.check_field_length, vars))\n\n    def all_fields_present(self) -&gt; bool:\n        return bool(self.owner and self.name and (self.card_type in [slug for (slug, _) in cards_types]) and self.number and self.expiration and self.cvv and (self.bank in [slug for (slug, _) in cards_banks]) and (self.brand in [slug for (slug, _) in cards_brands]) and self.owners_name and (self.slug == f'{self.bank}{slugify(str(self.name))}'))\n\n    def all_fields_of_correct_types(self) -&gt; bool:\n        return [str(type(self.owner)), type(self.name), type(self.card_type), type(self.number), str(type(self.expiration)), type(self.cvv), type(self.bank), type(self.brand), type(self.slug), type(self.owners_name)] == [\"&lt;class 'account.models.User'&gt;\", str, str, str, \"&lt;class 'secret.month.Month'&gt;\", str, str, str, str, str]\n\n    def is_valid(self) -&gt; bool:\n        if self.all_fields_present() and self.all_fields_of_correct_types() and self.all_fields_of_right_length():\n            return True\n        return False\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#class-meta","title":"<code>class Meta</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Meta:\n    ordering: Final[list[str]] = ['-created']\n    verbose_name: Final[str] = 'Cart\u00e3o'\n    verbose_name_plural: Final[str] = 'Cart\u00f5es'\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/models/card.py/#def-__str__","title":"<code>def __str__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __str__(self) -&gt; str:\n    return f'{str(self.owner.username)} | {self.card_type} | {self.name}'\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-get_absolute_url","title":"<code>def get_absolute_url</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_absolute_url(self) -&gt; str:\n    return reverse('secret:card_list_view')\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-save","title":"<code>def save</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, force_insert: Unknown, force_update: Unknown, using: Unknown, update_fields: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def save(self, force_insert=False, force_update=False, using=None, update_fields=None) -&gt; None:\n    self.name = xor(str(self.name), self.owner.password[21:])\n    self.number = xor(str(self.number), self.owner.password[21:])\n    self.cvv = xor(str(self.cvv), self.owner.password[21:])\n    self.owners_name = xor(str(self.owners_name), self.owner.password[21:])\n    self.note = xor(str(self.note), self.owner.password[21:])\n    return super().save(force_insert=False, force_update=False, using=None, update_fields=None)\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-from_db","title":"<code>def from_db</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>classmethod</code></p> <p>Args: <code>cls: Unknown, db: Unknown, field_names: Unknown, values: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@classmethod\ndef from_db(cls, db, field_names, values):\n    card: Card = super().from_db(db, field_names, values)\n    card.name = xor(str(card.name), card.owner.password[21:], encrypt=False)\n    card.number = xor(str(card.number), card.owner.password[21:], encrypt=False)\n    card.cvv = xor(str(card.cvv), card.owner.password[21:], encrypt=False)\n    card.owners_name = xor(str(card.owners_name), card.owner.password[21:], encrypt=False)\n    card.note = xor(str(card.note), card.owner.password[21:], encrypt=False)\n    return card\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-expected_max_length","title":"<code>def expected_max_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>int</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, var: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def expected_max_length(self, var: str) -&gt; int:\n    max_length: Final[dict[str, int]] = {'name': 40, 'card_type': 16, 'number': 19, 'cvv': 4, 'bank': 64, 'brand': 64, 'slug': 128, 'owners_name': 64, 'note': 128}\n    return max_length[var]\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-expected_min_length","title":"<code>def expected_min_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>int</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, var: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def expected_min_length(self, var: str) -&gt; int:\n    min_length: Final[dict[str, int]] = {'number': 12, 'cvv': 3}\n    return min_length[var]\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-check_field_length","title":"<code>def check_field_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, var: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def check_field_length(self, var: str) -&gt; bool:\n    if var == 'expiration':\n        return True\n    value = self.__getattribute__(var)\n    if var in ['number', 'cvv']:\n        return self.expected_min_length(var) &lt;= len(value) &lt;= self.expected_max_length(var)\n    return len(value) &lt;= self.expected_max_length(var)\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-all_fields_of_right_length","title":"<code>def all_fields_of_right_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_of_right_length(self) -&gt; bool:\n    vars: Final[list[str]] = ['name', 'card_type', 'number', 'expiration', 'cvv', 'bank', 'brand', 'slug', 'owners_name']\n    return all(map(self.check_field_length, vars))\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-all_fields_present","title":"<code>def all_fields_present</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_present(self) -&gt; bool:\n    return bool(self.owner and self.name and (self.card_type in [slug for (slug, _) in cards_types]) and self.number and self.expiration and self.cvv and (self.bank in [slug for (slug, _) in cards_banks]) and (self.brand in [slug for (slug, _) in cards_brands]) and self.owners_name and (self.slug == f'{self.bank}{slugify(str(self.name))}'))\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-all_fields_of_correct_types","title":"<code>def all_fields_of_correct_types</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_of_correct_types(self) -&gt; bool:\n    return [str(type(self.owner)), type(self.name), type(self.card_type), type(self.number), str(type(self.expiration)), type(self.cvv), type(self.bank), type(self.brand), type(self.slug), type(self.owners_name)] == [\"&lt;class 'account.models.User'&gt;\", str, str, str, \"&lt;class 'secret.month.Month'&gt;\", str, str, str, str, str]\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#def-is_valid","title":"<code>def is_valid</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def is_valid(self) -&gt; bool:\n    if self.all_fields_present() and self.all_fields_of_correct_types() and self.all_fields_of_right_length():\n        return True\n    return False\n</code></pre>"},{"location":"Codebase/secret/models/card.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/models/logincredential.py/","title":"File: <code>logincredential.py</code>","text":"<p>Path: <code>SWARDEN.secret.models</code></p>"},{"location":"Codebase/secret/models/logincredential.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/models/logincredential.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-uuid4","title":"<code>import uuid4</code>","text":"<p>Path: <code>uuid</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from uuid import uuid4\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-maxlengthvalidator","title":"<code>import MaxLengthValidator</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import MaxLengthValidator\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-cascade","title":"<code>import CASCADE</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CASCADE\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-booleanfield","title":"<code>import BooleanField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import BooleanField\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-charfield","title":"<code>import CharField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CharField\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-datetimefield","title":"<code>import DateTimeField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import DateTimeField\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-foreignkey","title":"<code>import ForeignKey</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import ForeignKey\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-model","title":"<code>import Model</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import Model\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-slugfield","title":"<code>import SlugField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import SlugField\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-textfield","title":"<code>import TextField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import TextField\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-uuidfield","title":"<code>import UUIDField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import UUIDField\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-slugify","title":"<code>import slugify</code>","text":"<p>Path: <code>django.template.defaultfilters</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.template.defaultfilters import slugify\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-xor","title":"<code>import xor</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import xor\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#import-credentials_services","title":"<code>import credentials_services</code>","text":"<p>Path: <code>secret.choices</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.choices import credentials_services\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/models/logincredential.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/models/logincredential.py/#class-logincredential","title":"<code>class LoginCredential</code>","text":"<p>Parents: <code>Model</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LoginCredential(Model):\n    id: Final[UUIDField] = UUIDField(default=uuid4, unique=True, primary_key=True, editable=False)\n    owner: Final[ForeignKey] = ForeignKey(User, on_delete=CASCADE, related_name='credentials', verbose_name='Dono')\n    service: CharField = CharField(max_length=64, choices=credentials_services, verbose_name='Servi\u00e7o', validators=[MaxLengthValidator(64)])\n    name: CharField = CharField(max_length=40, verbose_name='Apelido (ex: Conta Principal)', validators=[MaxLengthValidator(40)])\n    thirdy_party_login: BooleanField = BooleanField(verbose_name='Login com servi\u00e7o de terceiro?')\n    thirdy_party_login_name: CharField = CharField(max_length=40, verbose_name='Apelido do servi\u00e7o de terceiro', validators=[MaxLengthValidator(40)])\n    login: CharField = CharField(max_length=200, verbose_name='Login', validators=[MaxLengthValidator(200)])\n    password: CharField = CharField(max_length=200, verbose_name='Senha', validators=[MaxLengthValidator(200)])\n    note: TextField = TextField(max_length=128, blank=True, null=True, verbose_name='Anota\u00e7\u00e3o particular', validators=[MaxLengthValidator(128)])\n    slug: Final[SlugField] = SlugField(max_length=128, validators=[MaxLengthValidator(128)])\n    created: Final[DateTimeField] = DateTimeField(auto_now_add=True, verbose_name='Criado em')\n    updated: Final[DateTimeField] = DateTimeField(auto_now=True, verbose_name='Atualizado em')\n\n    class Meta:\n        ordering: Final[list[str]] = ['-created']\n        verbose_name: Final[str] = 'Credencial'\n        verbose_name_plural: Final[str] = 'Credenciais'\n\n    def __str__(self) -&gt; str:\n        return f'{str(self.owner.username)} | {self.service} | {self.name}'\n\n    def get_absolute_url(self) -&gt; str:\n        return reverse('secret:credential_list_view')\n\n    def save(self, force_insert=False, force_update=False, using=None, update_fields=None) -&gt; None:\n        self.thirdy_party_login_name = xor(str(self.thirdy_party_login_name), self.owner.password[21:])\n        self.login = xor(str(self.login), self.owner.password[21:])\n        self.password = xor(str(self.password), self.owner.password[21:])\n        self.note = xor(str(self.note), self.owner.password[21:])\n        return super().save(force_insert=False, force_update=False, using=None, update_fields=None)\n\n    @classmethod\n    def from_db(cls, db, field_names, values):\n        cred: LoginCredential = super().from_db(db, field_names, values)\n        cred.thirdy_party_login_name = xor(str(cred.thirdy_party_login_name), cred.owner.password[21:], encrypt=False)\n        cred.login = xor(str(cred.login), cred.owner.password[21:], encrypt=False)\n        cred.password = xor(str(cred.password), cred.owner.password[21:], encrypt=False)\n        cred.note = xor(str(cred.note), cred.owner.password[21:], encrypt=False)\n        return cred\n\n    def expected_max_length(self, var: str) -&gt; int:\n        max_length: Final[dict[str, int]] = {'service': 64, 'name': 40, 'slug': 128, 'thirdy_party_login_name': 40, 'login': 200, 'password': 200}\n        return max_length[var]\n\n    def check_field_length(self, var: str) -&gt; bool:\n        value = self.__getattribute__(var)\n        return len(value) &lt;= self.expected_max_length(var)\n\n    def all_fields_of_right_length(self) -&gt; bool:\n        vars: Final[list[str]] = ['service', 'name', 'slug', 'thirdy_party_login_name', 'login', 'password']\n        return all(map(self.check_field_length, vars))\n\n    def all_fields_present(self) -&gt; bool:\n        if self.owner and self.name and (self.service in [slug for (slug, _) in credentials_services]) and (self.slug == f'{self.service}{slugify(str(self.name))}') and self.thirdy_party_login_name and self.login and self.password:\n            if self.thirdy_party_login and self.thirdy_party_login_name != '-----' or (not self.thirdy_party_login and self.login != '-----' and (self.password != '-----')):\n                return True\n        return False\n\n    def all_fields_of_correct_types(self) -&gt; bool:\n        return [str(type(self.owner)), type(self.service), type(self.name), type(self.slug), type(self.thirdy_party_login), type(self.thirdy_party_login_name), type(self.login), type(self.password)] == [\"&lt;class 'account.models.User'&gt;\", str, str, str, bool, str, str, str]\n\n    def is_valid(self) -&gt; bool:\n        if self.all_fields_present() and self.all_fields_of_correct_types() and self.all_fields_of_right_length():\n            return True\n        return False\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#class-meta","title":"<code>class Meta</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Meta:\n    ordering: Final[list[str]] = ['-created']\n    verbose_name: Final[str] = 'Credencial'\n    verbose_name_plural: Final[str] = 'Credenciais'\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/models/logincredential.py/#def-__str__","title":"<code>def __str__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __str__(self) -&gt; str:\n    return f'{str(self.owner.username)} | {self.service} | {self.name}'\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-get_absolute_url","title":"<code>def get_absolute_url</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_absolute_url(self) -&gt; str:\n    return reverse('secret:credential_list_view')\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-save","title":"<code>def save</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, force_insert: Unknown, force_update: Unknown, using: Unknown, update_fields: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def save(self, force_insert=False, force_update=False, using=None, update_fields=None) -&gt; None:\n    self.thirdy_party_login_name = xor(str(self.thirdy_party_login_name), self.owner.password[21:])\n    self.login = xor(str(self.login), self.owner.password[21:])\n    self.password = xor(str(self.password), self.owner.password[21:])\n    self.note = xor(str(self.note), self.owner.password[21:])\n    return super().save(force_insert=False, force_update=False, using=None, update_fields=None)\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-from_db","title":"<code>def from_db</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>classmethod</code></p> <p>Args: <code>cls: Unknown, db: Unknown, field_names: Unknown, values: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@classmethod\ndef from_db(cls, db, field_names, values):\n    cred: LoginCredential = super().from_db(db, field_names, values)\n    cred.thirdy_party_login_name = xor(str(cred.thirdy_party_login_name), cred.owner.password[21:], encrypt=False)\n    cred.login = xor(str(cred.login), cred.owner.password[21:], encrypt=False)\n    cred.password = xor(str(cred.password), cred.owner.password[21:], encrypt=False)\n    cred.note = xor(str(cred.note), cred.owner.password[21:], encrypt=False)\n    return cred\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-expected_max_length","title":"<code>def expected_max_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>int</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, var: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def expected_max_length(self, var: str) -&gt; int:\n    max_length: Final[dict[str, int]] = {'service': 64, 'name': 40, 'slug': 128, 'thirdy_party_login_name': 40, 'login': 200, 'password': 200}\n    return max_length[var]\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-check_field_length","title":"<code>def check_field_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, var: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def check_field_length(self, var: str) -&gt; bool:\n    value = self.__getattribute__(var)\n    return len(value) &lt;= self.expected_max_length(var)\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-all_fields_of_right_length","title":"<code>def all_fields_of_right_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_of_right_length(self) -&gt; bool:\n    vars: Final[list[str]] = ['service', 'name', 'slug', 'thirdy_party_login_name', 'login', 'password']\n    return all(map(self.check_field_length, vars))\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-all_fields_present","title":"<code>def all_fields_present</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_present(self) -&gt; bool:\n    if self.owner and self.name and (self.service in [slug for (slug, _) in credentials_services]) and (self.slug == f'{self.service}{slugify(str(self.name))}') and self.thirdy_party_login_name and self.login and self.password:\n        if self.thirdy_party_login and self.thirdy_party_login_name != '-----' or (not self.thirdy_party_login and self.login != '-----' and (self.password != '-----')):\n            return True\n    return False\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-all_fields_of_correct_types","title":"<code>def all_fields_of_correct_types</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_of_correct_types(self) -&gt; bool:\n    return [str(type(self.owner)), type(self.service), type(self.name), type(self.slug), type(self.thirdy_party_login), type(self.thirdy_party_login_name), type(self.login), type(self.password)] == [\"&lt;class 'account.models.User'&gt;\", str, str, str, bool, str, str, str]\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#def-is_valid","title":"<code>def is_valid</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def is_valid(self) -&gt; bool:\n    if self.all_fields_present() and self.all_fields_of_correct_types() and self.all_fields_of_right_length():\n        return True\n    return False\n</code></pre>"},{"location":"Codebase/secret/models/logincredential.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/models/securitynotes.py/","title":"File: <code>securitynotes.py</code>","text":"<p>Path: <code>SWARDEN.secret.models</code></p>"},{"location":"Codebase/secret/models/securitynotes.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/models/securitynotes.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-uuid4","title":"<code>import uuid4</code>","text":"<p>Path: <code>uuid</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from uuid import uuid4\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-maxlengthvalidator","title":"<code>import MaxLengthValidator</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import MaxLengthValidator\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-minlengthvalidator","title":"<code>import MinLengthValidator</code>","text":"<p>Path: <code>django.core.validators</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.validators import MinLengthValidator\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-cascade","title":"<code>import CASCADE</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CASCADE\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-charfield","title":"<code>import CharField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import CharField\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-datetimefield","title":"<code>import DateTimeField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import DateTimeField\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-foreignkey","title":"<code>import ForeignKey</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import ForeignKey\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-model","title":"<code>import Model</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import Model\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-slugfield","title":"<code>import SlugField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import SlugField\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-textfield","title":"<code>import TextField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import TextField\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-uuidfield","title":"<code>import UUIDField</code>","text":"<p>Path: <code>django.db.models</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.models import UUIDField\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-slugify","title":"<code>import slugify</code>","text":"<p>Path: <code>django.template.defaultfilters</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.template.defaultfilters import slugify\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-xor","title":"<code>import xor</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import xor\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#import-notes_types","title":"<code>import notes_types</code>","text":"<p>Path: <code>secret.choices</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.choices import notes_types\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/models/securitynotes.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/models/securitynotes.py/#class-securitynote","title":"<code>class SecurityNote</code>","text":"<p>Parents: <code>Model</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecurityNote(Model):\n    id: Final[UUIDField] = UUIDField(default=uuid4, unique=True, primary_key=True, editable=False)\n    owner: Final[ForeignKey] = ForeignKey(User, on_delete=CASCADE, related_name='notes', verbose_name='Dono')\n    title: Final[CharField] = CharField(max_length=40, verbose_name='T\u00edtulo', validators=[MaxLengthValidator(40)])\n    content: TextField = TextField(max_length=300, verbose_name='Conte\u00fado', validators=[MaxLengthValidator(300)])\n    note_type: Final[TextField] = TextField(max_length=3, choices=notes_types, verbose_name='Classifica\u00e7\u00e3o', validators=[MaxLengthValidator(3), MinLengthValidator(3)])\n    slug: Final[SlugField] = SlugField(max_length=50, validators=[MaxLengthValidator(50)])\n    created: Final[DateTimeField] = DateTimeField(auto_now_add=True, verbose_name='Criado em')\n    updated: Final[DateTimeField] = DateTimeField(auto_now=True, verbose_name='Atualizado em')\n\n    def __str__(self) -&gt; str:\n        return f'{str(self.owner.username)} | {self.title}'\n\n    def get_absolute_url(self) -&gt; str:\n        return reverse('secret:note_list_view')\n\n    def save(self, force_insert=False, force_update=False, using=None, update_fields=None) -&gt; None:\n        self.content = xor(str(self.content), self.owner.password[21:])\n        return super().save(force_insert=False, force_update=False, using=None, update_fields=None)\n\n    @classmethod\n    def from_db(cls, db, field_names, values):\n        note: SecurityNote = super().from_db(db, field_names, values)\n        note.content = xor(str(note.content), note.owner.password[21:], encrypt=False)\n        return note\n\n    def expected_max_length(self, var: str) -&gt; int:\n        max_length: Final[dict[str, int]] = {'title': 40, 'content': 300, 'note_type': 3, 'slug': 50}\n        return max_length[var]\n\n    def check_field_length(self, var: str) -&gt; bool:\n        value = self.__getattribute__(var)\n        return len(value) &lt;= self.expected_max_length(var)\n\n    def all_fields_of_right_length(self) -&gt; bool:\n        vars: Final[list[str]] = ['title', 'content', 'note_type', 'slug']\n        return all(map(self.check_field_length, vars))\n\n    def all_fields_present(self) -&gt; bool:\n        return bool(self.owner and self.title and self.content and self.note_type and (self.slug == slugify(str(self.title))))\n\n    def all_fields_of_correct_types(self) -&gt; bool:\n        return [str(type(self.owner)), type(self.title), type(self.content), type(self.note_type), type(self.slug)] == [\"&lt;class 'account.models.User'&gt;\", str, str, str, str]\n\n    def is_valid(self) -&gt; bool:\n        if self.all_fields_present() and self.all_fields_of_correct_types() and self.all_fields_of_right_length():\n            return True\n        return False\n\n    class Meta:\n        ordering: Final[list[str]] = ['-created']\n        verbose_name: Final[str] = 'Nota de Seguran\u00e7a'\n        verbose_name_plural: Final[str] = 'Notas de Seguran\u00e7a'\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#class-meta","title":"<code>class Meta</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Meta:\n    ordering: Final[list[str]] = ['-created']\n    verbose_name: Final[str] = 'Nota de Seguran\u00e7a'\n    verbose_name_plural: Final[str] = 'Notas de Seguran\u00e7a'\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/models/securitynotes.py/#def-__str__","title":"<code>def __str__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __str__(self) -&gt; str:\n    return f'{str(self.owner.username)} | {self.title}'\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-get_absolute_url","title":"<code>def get_absolute_url</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>str</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_absolute_url(self) -&gt; str:\n    return reverse('secret:note_list_view')\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-save","title":"<code>def save</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, force_insert: Unknown, force_update: Unknown, using: Unknown, update_fields: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def save(self, force_insert=False, force_update=False, using=None, update_fields=None) -&gt; None:\n    self.content = xor(str(self.content), self.owner.password[21:])\n    return super().save(force_insert=False, force_update=False, using=None, update_fields=None)\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-from_db","title":"<code>def from_db</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>classmethod</code></p> <p>Args: <code>cls: Unknown, db: Unknown, field_names: Unknown, values: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@classmethod\ndef from_db(cls, db, field_names, values):\n    note: SecurityNote = super().from_db(db, field_names, values)\n    note.content = xor(str(note.content), note.owner.password[21:], encrypt=False)\n    return note\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-expected_max_length","title":"<code>def expected_max_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>int</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, var: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def expected_max_length(self, var: str) -&gt; int:\n    max_length: Final[dict[str, int]] = {'title': 40, 'content': 300, 'note_type': 3, 'slug': 50}\n    return max_length[var]\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-check_field_length","title":"<code>def check_field_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, var: str</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def check_field_length(self, var: str) -&gt; bool:\n    value = self.__getattribute__(var)\n    return len(value) &lt;= self.expected_max_length(var)\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-all_fields_of_right_length","title":"<code>def all_fields_of_right_length</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_of_right_length(self) -&gt; bool:\n    vars: Final[list[str]] = ['title', 'content', 'note_type', 'slug']\n    return all(map(self.check_field_length, vars))\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-all_fields_present","title":"<code>def all_fields_present</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_present(self) -&gt; bool:\n    return bool(self.owner and self.title and self.content and self.note_type and (self.slug == slugify(str(self.title))))\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-all_fields_of_correct_types","title":"<code>def all_fields_of_correct_types</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def all_fields_of_correct_types(self) -&gt; bool:\n    return [str(type(self.owner)), type(self.title), type(self.content), type(self.note_type), type(self.slug)] == [\"&lt;class 'account.models.User'&gt;\", str, str, str, str]\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#def-is_valid","title":"<code>def is_valid</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>bool</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def is_valid(self) -&gt; bool:\n    if self.all_fields_present() and self.all_fields_of_correct_types() and self.all_fields_of_right_length():\n        return True\n    return False\n</code></pre>"},{"location":"Codebase/secret/models/securitynotes.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/month/__init__.py/","title":"File: <code>__init__.py</code>","text":"<p>Path: <code>SWARDEN.secret.month</code></p>"},{"location":"Codebase/secret/month/__init__.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/month/__init__.py/#import-datetime","title":"<code>import datetime</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import datetime\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#import-string_type","title":"<code>import string_type</code>","text":"<p>Path: <code>util</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from util import string_type\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/month/__init__.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/month/__init__.py/#class-month","title":"<code>class Month</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class Month:\n\n    def __init__(self, year, month):\n        self.year = year\n        self.month = month\n        self._date = datetime.date(year=self.year, month=self.month, day=1)\n\n    @classmethod\n    def from_int(cls, months):\n        (y, m) = divmod(months, 12)\n        m += 1\n        return cls(y, m)\n\n    @classmethod\n    def from_date(cls, date):\n        return cls(date.year, date.month)\n\n    @classmethod\n    def from_string(cls, date):\n        y = int(date[:4])\n        m = int(date[5:7])\n        return cls(y, m)\n\n    def __add__(self, x):\n        \"\"\"x is an integer\"\"\"\n        return Month.from_int(int(self) + x)\n\n    def __sub__(self, x):\n        \"\"\"x is integer or Month instance\"\"\"\n        if isinstance(x, Month):\n            return int(self) - int(x)\n        else:\n            return Month.from_int(int(self) - int(x))\n\n    def next_month(self):\n        return self + 1\n\n    def prev_month(self):\n        return self - 1\n\n    def first_day(self):\n        return self._date\n\n    def last_day(self):\n        return self.next_month().first_day() - days(1)\n\n    def __int__(self):\n        return self.year * 12 + self.month - 1\n\n    def __contains__(self, date):\n        return self == date\n\n    def __eq__(self, x):\n        if isinstance(x, Month):\n            return x.month == self.month and x.year == self.year\n        if isinstance(x, datetime.date):\n            return self.year == x.year and self.month == x.month\n        if isinstance(x, int):\n            return x == int(self)\n        if isinstance(x, string_type):\n            return str(self) == x[:7]\n\n    def __gt__(self, x):\n        if isinstance(x, Month):\n            if self.year != x.year:\n                return self.year &gt; x.year\n            return self.month &gt; x.month\n        if isinstance(x, datetime.date):\n            return self.first_day() &gt; x\n        if isinstance(x, int):\n            return int(self) &gt; x\n        if isinstance(x, string_type):\n            return str(self) &gt; x[:7]\n\n    def __ne__(self, x):\n        return not self == x\n\n    def __le__(self, x):\n        return not self &gt; x\n\n    def __ge__(self, x):\n        return self &gt; x or self == x\n\n    def __lt__(self, x):\n        return not self &gt;= x\n\n    def __str__(self):\n        return '%s-%02d' % (self.year, self.month)\n\n    def __unicode__(self):\n        return self.__str__()\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __hash__(self):\n        return hash(self.datestring())\n\n    def datestring(self):\n        return self.first_day().isoformat()\n    isoformat = datestring\n\n    def range(self, x):\n        \"\"\"x must be an instance of Month that is larger than self.\n        returns a list of Month objects that make up the timespan from self to x (inclusive)\n        \"\"\"\n        months_as_ints = range(int(self), int(x) + 1)\n        return [Month.from_int(i) for i in months_as_ints]\n\n    def strftime(self, fmt):\n        return self._date.strftime(fmt)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/month/__init__.py/#def-days","title":"<code>def days</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>days: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def days(days):\n    return datetime.timedelta(days=days)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__init__","title":"<code>def __init__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, year: Unknown, month: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __init__(self, year, month):\n    self.year = year\n    self.month = month\n    self._date = datetime.date(year=self.year, month=self.month, day=1)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-from_int","title":"<code>def from_int</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>classmethod</code></p> <p>Args: <code>cls: Unknown, months: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@classmethod\ndef from_int(cls, months):\n    (y, m) = divmod(months, 12)\n    m += 1\n    return cls(y, m)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-from_date","title":"<code>def from_date</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>classmethod</code></p> <p>Args: <code>cls: Unknown, date: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@classmethod\ndef from_date(cls, date):\n    return cls(date.year, date.month)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-from_string","title":"<code>def from_string</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>classmethod</code></p> <p>Args: <code>cls: Unknown, date: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@classmethod\ndef from_string(cls, date):\n    y = int(date[:4])\n    m = int(date[5:7])\n    return cls(y, m)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__add__","title":"<code>def __add__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __add__(self, x):\n    \"\"\"x is an integer\"\"\"\n    return Month.from_int(int(self) + x)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__sub__","title":"<code>def __sub__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __sub__(self, x):\n    \"\"\"x is integer or Month instance\"\"\"\n    if isinstance(x, Month):\n        return int(self) - int(x)\n    else:\n        return Month.from_int(int(self) - int(x))\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-next_month","title":"<code>def next_month</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def next_month(self):\n    return self + 1\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-prev_month","title":"<code>def prev_month</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def prev_month(self):\n    return self - 1\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-first_day","title":"<code>def first_day</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def first_day(self):\n    return self._date\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-last_day","title":"<code>def last_day</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def last_day(self):\n    return self.next_month().first_day() - days(1)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__int__","title":"<code>def __int__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __int__(self):\n    return self.year * 12 + self.month - 1\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__contains__","title":"<code>def __contains__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, date: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __contains__(self, date):\n    return self == date\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__eq__","title":"<code>def __eq__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __eq__(self, x):\n    if isinstance(x, Month):\n        return x.month == self.month and x.year == self.year\n    if isinstance(x, datetime.date):\n        return self.year == x.year and self.month == x.month\n    if isinstance(x, int):\n        return x == int(self)\n    if isinstance(x, string_type):\n        return str(self) == x[:7]\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__gt__","title":"<code>def __gt__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __gt__(self, x):\n    if isinstance(x, Month):\n        if self.year != x.year:\n            return self.year &gt; x.year\n        return self.month &gt; x.month\n    if isinstance(x, datetime.date):\n        return self.first_day() &gt; x\n    if isinstance(x, int):\n        return int(self) &gt; x\n    if isinstance(x, string_type):\n        return str(self) &gt; x[:7]\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__ne__","title":"<code>def __ne__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __ne__(self, x):\n    return not self == x\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__le__","title":"<code>def __le__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __le__(self, x):\n    return not self &gt; x\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__ge__","title":"<code>def __ge__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __ge__(self, x):\n    return self &gt; x or self == x\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__lt__","title":"<code>def __lt__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __lt__(self, x):\n    return not self &gt;= x\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__str__","title":"<code>def __str__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __str__(self):\n    return '%s-%02d' % (self.year, self.month)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__unicode__","title":"<code>def __unicode__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __unicode__(self):\n    return self.__str__()\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__repr__","title":"<code>def __repr__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __repr__(self):\n    return self.__str__()\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-__hash__","title":"<code>def __hash__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __hash__(self):\n    return hash(self.datestring())\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-datestring","title":"<code>def datestring</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def datestring(self):\n    return self.first_day().isoformat()\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-range","title":"<code>def range</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, x: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def range(self, x):\n    \"\"\"x must be an instance of Month that is larger than self.\n        returns a list of Month objects that make up the timespan from self to x (inclusive)\n        \"\"\"\n    months_as_ints = range(int(self), int(x) + 1)\n    return [Month.from_int(i) for i in months_as_ints]\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#def-strftime","title":"<code>def strftime</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, fmt: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def strftime(self, fmt):\n    return self._date.strftime(fmt)\n</code></pre>"},{"location":"Codebase/secret/month/__init__.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/month/forms.py/","title":"File: <code>forms.py</code>","text":"<p>Path: <code>SWARDEN.secret.month</code></p>"},{"location":"Codebase/secret/month/forms.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/month/forms.py/#import-forms","title":"<code>import forms</code>","text":"<p>Path: <code>django</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django import forms\n</code></pre>"},{"location":"Codebase/secret/month/forms.py/#import-monthselectorwidget","title":"<code>import MonthSelectorWidget</code>","text":"<p>Path: <code>widgets</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from widgets import MonthSelectorWidget\n</code></pre>"},{"location":"Codebase/secret/month/forms.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/month/forms.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/month/forms.py/#class-monthfield","title":"<code>class MonthField</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class MonthField(forms.DateField):\n    widget = MonthSelectorWidget\n</code></pre>"},{"location":"Codebase/secret/month/forms.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/secret/month/forms.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/month/models.py/","title":"File: <code>models.py</code>","text":"<p>Path: <code>SWARDEN.secret.month</code></p>"},{"location":"Codebase/secret/month/models.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/month/models.py/#import-datetime","title":"<code>import datetime</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import datetime\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#import-exceptions","title":"<code>import exceptions</code>","text":"<p>Path: <code>django.core</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core import exceptions\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#import-models","title":"<code>import models</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import models\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#import-gettext_lazy","title":"<code>import gettext_lazy</code>","text":"<p>Path: <code>django.utils.translation</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.translation import gettext_lazy\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#import-month","title":"<code>import Month</code>","text":"<p>Path: <code>None</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from None import Month\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#import-forms","title":"<code>import forms</code>","text":"<p>Path: <code>None</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from None import forms\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#import-widgets","title":"<code>import widgets</code>","text":"<p>Path: <code>None</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from None import widgets\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#import-string_type","title":"<code>import string_type</code>","text":"<p>Path: <code>util</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from util import string_type\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/month/models.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/month/models.py/#class-monthfield","title":"<code>class MonthField</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class MonthField(models.DateField):\n    description = 'A specific month of a specific year.'\n    widget = widgets.MonthSelectorWidget\n    default_error_messages = {'invalid_year': _('Year informed invalid. Enter at least 4 digits.')}\n\n    def to_python(self, value):\n        if isinstance(value, Month):\n            month = value\n        elif isinstance(value, datetime.date):\n            month = Month.from_date(value)\n            if len(str(month.year)) &lt; 4:\n                raise exceptions.ValidationError(self.error_messages['invalid_year'], code='invalid_year', params={'value': value})\n        elif isinstance(value, string_type):\n            month = Month.from_string(value)\n        else:\n            month = None\n        return month\n\n    def get_prep_value(self, value):\n        month = self.to_python(value)\n        if month is not None:\n            return month.first_day()\n        return None\n\n    def from_db_value(self, value, expression, connection):\n        return self.to_python(value)\n\n    def clean(self, value, instance):\n        return self.to_python(value)\n\n    def formfield(self, **kwargs):\n        kwargs['widget'] = self.widget\n        defaults = {'form_class': forms.MonthField}\n        defaults.update(kwargs)\n        return super(MonthField, self).formfield(**defaults)\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/month/models.py/#def-to_python","title":"<code>def to_python</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, value: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def to_python(self, value):\n    if isinstance(value, Month):\n        month = value\n    elif isinstance(value, datetime.date):\n        month = Month.from_date(value)\n        if len(str(month.year)) &lt; 4:\n            raise exceptions.ValidationError(self.error_messages['invalid_year'], code='invalid_year', params={'value': value})\n    elif isinstance(value, string_type):\n        month = Month.from_string(value)\n    else:\n        month = None\n    return month\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#def-get_prep_value","title":"<code>def get_prep_value</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, value: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def get_prep_value(self, value):\n    month = self.to_python(value)\n    if month is not None:\n        return month.first_day()\n    return None\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#def-from_db_value","title":"<code>def from_db_value</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, value: Unknown, expression: Unknown, connection: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def from_db_value(self, value, expression, connection):\n    return self.to_python(value)\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#def-clean","title":"<code>def clean</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, value: Unknown, instance: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def clean(self, value, instance):\n    return self.to_python(value)\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#def-formfield","title":"<code>def formfield</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def formfield(self, **kwargs):\n    kwargs['widget'] = self.widget\n    defaults = {'form_class': forms.MonthField}\n    defaults.update(kwargs)\n    return super(MonthField, self).formfield(**defaults)\n</code></pre>"},{"location":"Codebase/secret/month/models.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/month/widgets.py/","title":"File: <code>widgets.py</code>","text":"<p>Path: <code>SWARDEN.secret.month</code></p>"},{"location":"Codebase/secret/month/widgets.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/month/widgets.py/#import-date","title":"<code>import date</code>","text":"<p>Path: <code>datetime</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from datetime import date\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#import-widgets","title":"<code>import widgets</code>","text":"<p>Path: <code>django.forms</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.forms import widgets\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#import-static","title":"<code>import static</code>","text":"<p>Path: <code>django.templatetags.static</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.templatetags.static import static\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#import-months","title":"<code>import MONTHS</code>","text":"<p>Path: <code>django.utils.dates</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.utils.dates import MONTHS\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#import-string_type","title":"<code>import string_type</code>","text":"<p>Path: <code>util</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from util import string_type\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#consts","title":"Consts","text":""},{"location":"Codebase/secret/month/widgets.py/#d","title":"<code>D</code>","text":"<p>Type: <code>Unknown</code></p> <p>Value: <code>date(day=1, month=int(datelist[0]), year=int(datelist[1]))</code></p> SNIPPET Python<pre><code>D = date(day=1, month=int(datelist[0]), year=int(datelist[1]))\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/month/widgets.py/#class-monthselectorwidget","title":"<code>class MonthSelectorWidget</code>","text":"<p>Parents: ``</p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class MonthSelectorWidget(widgets.MultiWidget):\n\n    def __init__(self, attrs=None):\n        _attrs = attrs or {}\n        _attrs['class'] = (_attrs.get('class', '') + ' w-month-year').strip()\n        _widgets = [widgets.Select(attrs=_attrs, choices=MONTHS.items())]\n        _attrs['class'] += ' w-year'\n        _widgets.append(widgets.NumberInput(attrs=_attrs))\n        super(MonthSelectorWidget, self).__init__(_widgets, attrs)\n\n    @property\n    def media(self):\n        media = self._get_media()\n        media.add_css({'screen': (static('month/field/widget_month.css'),)})\n        return media\n\n    def decompress(self, value):\n        if value:\n            if isinstance(value, string_type):\n                m = int(value[5:7])\n                y = int(value[:4])\n                return [m, y]\n            return [value.month, value.year]\n        return [None, None]\n\n    def format_output(self, rendered_widgets):\n        return ''.join(rendered_widgets)\n\n    def value_from_datadict(self, data, files, name):\n        datelist = [widget.value_from_datadict(data, files, name + '_%s' % i) for (i, widget) in enumerate(self.widgets)]\n        try:\n            D = date(day=1, month=int(datelist[0]), year=int(datelist[1]))\n        except ValueError:\n            return ''\n        else:\n            return str(D)\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/month/widgets.py/#def-__init__","title":"<code>def __init__</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, attrs: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def __init__(self, attrs=None):\n    _attrs = attrs or {}\n    _attrs['class'] = (_attrs.get('class', '') + ' w-month-year').strip()\n    _widgets = [widgets.Select(attrs=_attrs, choices=MONTHS.items())]\n    _attrs['class'] += ' w-year'\n    _widgets.append(widgets.NumberInput(attrs=_attrs))\n    super(MonthSelectorWidget, self).__init__(_widgets, attrs)\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#def-media","title":"<code>def media</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>property</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>@property\ndef media(self):\n    media = self._get_media()\n    media.add_css({'screen': (static('month/field/widget_month.css'),)})\n    return media\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#def-decompress","title":"<code>def decompress</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, value: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def decompress(self, value):\n    if value:\n        if isinstance(value, string_type):\n            m = int(value[5:7])\n            y = int(value[:4])\n            return [m, y]\n        return [value.month, value.year]\n    return [None, None]\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#def-format_output","title":"<code>def format_output</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, rendered_widgets: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def format_output(self, rendered_widgets):\n    return ''.join(rendered_widgets)\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#def-value_from_datadict","title":"<code>def value_from_datadict</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>Unknown</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown, data: Unknown, files: Unknown, name: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def value_from_datadict(self, data, files, name):\n    datelist = [widget.value_from_datadict(data, files, name + '_%s' % i) for (i, widget) in enumerate(self.widgets)]\n    try:\n        D = date(day=1, month=int(datelist[0]), year=int(datelist[1]))\n    except ValueError:\n        return ''\n    else:\n        return str(D)\n</code></pre>"},{"location":"Codebase/secret/month/widgets.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/tests/test_models.py/","title":"File: <code>test_models.py</code>","text":"<p>Path: <code>SWARDEN.secret.tests</code></p>"},{"location":"Codebase/secret/tests/test_models.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/tests/test_models.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-validationerror","title":"<code>import ValidationError</code>","text":"<p>Path: <code>django.core.exceptions</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.core.exceptions import ValidationError\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-dataerror","title":"<code>import DataError</code>","text":"<p>Path: <code>django.db</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db import DataError\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-atomic","title":"<code>import atomic</code>","text":"<p>Path: <code>django.db.transaction</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.db.transaction import atomic\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-create_scenarios","title":"<code>import create_scenarios</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import create_scenarios\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-xor","title":"<code>import xor</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import xor\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#import-month","title":"<code>import Month</code>","text":"<p>Path: <code>secret.month.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.month.models import Month\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/tests/test_models.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/tests/test_models.py/#class-credentialtestcase","title":"<code>class CredentialTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class CredentialTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        self.login_credential_1: LoginCredential = LoginCredential.objects.create(owner=self.user, service='google--', name='Personal Main Account', slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123@gmail.com', password='ilovemenotyou')\n        self.login_credential_2: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=True, thirdy_party_login_name='Personal Main Account', login='-----', password='-----')\n        self.login_credential_3: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=True, thirdy_party_login_name='-----', login='night_monkey123', password='ilovemenotyou')\n        self.login_credential_4: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--potato', thirdy_party_login=False, thirdy_party_login_name='-----', login='', password='night_monkey123')\n        self.login_credential_5: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123')\n        try:\n            with atomic():\n                self.login_credential_6: LoginCredential = LoginCredential.objects.create(owner=self.user, service='google--', name='Salve' * 9, slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='x' * 201, password='ilovemenotyou')\n        except DataError:\n            self.login_credential_6: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123')\n        self.login_credential_7: LoginCredential = LoginCredential.objects.create(owner=self.user, service='pampas-gonden-radio--', name='Little Fries', slug='pampas-gonden-radio--little-fries', thirdy_party_login=True, thirdy_party_login_name='Personal Main Account', login='-----', password='-----')\n\n    def test_credential_instance_validity(self) -&gt; None:\n        \"\"\"Tests credential instance of correct class\"\"\"\n        for cred in LoginCredential.objects.all():\n            with self.subTest(cred=cred):\n                self.assertIsInstance(cred, LoginCredential)\n\n    def test_credential_key_value_assertion(self) -&gt; None:\n        \"\"\"Tests credential correct attribuition of value\"\"\"\n        cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n        self.assertEqual(cred1.service, 'google--')\n        self.assertEqual(cred1.name, 'Personal Main Account')\n        self.assertEqual(cred1.slug, 'google--personal-main-account')\n        self.assertFalse(cred1.thirdy_party_login)\n        self.assertEqual(cred1.thirdy_party_login_name, '-----')\n        self.assertEqual(cred1.login, 'night_monkey123@gmail.com')\n        self.assertEqual(cred1.password, 'ilovemenotyou')\n\n    def test_credential_special_str_method_return(self) -&gt; None:\n        \"\"\"Tests credential return value of __str__ method\"\"\"\n        cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n        self.assertEqual(cred1.__str__(), f'{str(cred1.owner.username)} | {cred1.service} | {cred1.name}')\n\n    def test_credential_absolute_url_method_return(self) -&gt; None:\n        \"\"\"Tests credential return value of get_absolute_url method\"\"\"\n        cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n        self.assertEqual(cred1.get_absolute_url(), reverse('secret:credential_list_view'))\n\n    def test_credential_user_foreign_key_validity(self) -&gt; None:\n        \"\"\"Tests credential foreign key validation\"\"\"\n        cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n        cred2: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_2.pk)\n        cred1_owner: User = cred1.owner\n        cred2_owner: User = cred2.owner\n        self.assertEqual(cred1_owner, cred2_owner)\n        self.assertEqual(cred1_owner, self.user)\n\n    def test_credential_create_validity(self) -&gt; None:\n        \"\"\"Tests credential creation integrity and validation\"\"\"\n        cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n        cred2: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_2.pk)\n        cred3: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_3.pk)\n        cred4: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_4.pk)\n        cred5: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_5.pk)\n        cred6: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_6.pk)\n        cred7: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_7.pk)\n        self.assertEqual(LoginCredential.objects.all().count(), 7)\n        self.assertTrue(cred1.is_valid())\n        self.assertTrue(cred2.is_valid())\n        self.assertFalse(cred3.is_valid())\n        self.assertFalse(cred4.is_valid())\n        self.assertFalse(cred5.is_valid())\n        self.assertFalse(cred6.is_valid())\n        self.assertFalse(cred7.is_valid())\n\n    def test_credential_update_validity(self) -&gt; None:\n        \"\"\"Tests credential update integrity and validation\"\"\"\n        LoginCredential.objects.filter(pk=self.login_credential_3.pk).update(thirdy_party_login=False)\n        LoginCredential.objects.filter(pk=self.login_credential_4.pk).update(slug='steam--little-fries', login='some_login_text_or_email_or_some_other_stuff_like_this')\n        LoginCredential.objects.filter(pk=self.login_credential_5.pk).update(password='https://www.youtube.com/watch?v=dQw4w9WgXcQ')\n        LoginCredential.objects.filter(pk=self.login_credential_6.pk).update(password='https://www.youtube.com/watch?v=dQw4w9WgXcQ')\n        LoginCredential.objects.filter(pk=self.login_credential_7.pk).update(service='visa--', slug='visa--little-fries')\n        for cred in LoginCredential.objects.all():\n            with self.subTest(cred=cred):\n                self.assertTrue(cred.is_valid())\n\n    def test_credential_delete_validity(self) -&gt; None:\n        \"\"\"Tests credential correct deletion\"\"\"\n        for cred in LoginCredential.objects.all():\n            if not cred.is_valid():\n                cred.delete()\n        self.assertEqual(LoginCredential.objects.all().count(), 2)\n\n    def test_credential_db_exception_raises(self) -&gt; None:\n        \"\"\"Tests credential correct integrity and validation with raised exceptions\"\"\"\n        params: list[dict[str, User | str | bool]] = [{'owner': self.user}, {'service': 'aws--'}, {'name': 'Name'}, {'thirdy_party_login': False}, {'thirdy_party_login_name': '-----'}, {'login': 'LoginName'}, {'password': 'PasswordName'}, {'slug': 'aws--name'}]\n        for (case, scenario) in create_scenarios(params):\n            with self.subTest(scenario=case):\n                with self.assertRaises(ValidationError):\n                    with atomic():\n                        instance: LoginCredential = LoginCredential(**scenario)\n                        instance.full_clean()\n        raise_kwargs: dict[str, dict[str, User | str | bool]] = {'cred1': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 41, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 200, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 123}, 'cred2': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 41, 'login': 'x' * 201, 'password': 'x' * 200, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 123}, 'cred3': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 201, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 123}, 'cred4': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 200, 'note': 'x' * 129, 'slug': 'aws--' + 'x' * 123}, 'cred5': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 200, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 124}}\n        for scenario in raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                with self.assertRaises(ValidationError):\n                    with atomic():\n                        instance: LoginCredential = LoginCredential(**raise_kwargs[scenario])\n                        instance.full_clean()\n        no_raise_kwargs: dict[str, dict[str, User | str | bool]] = {'cred1': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 200, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 123}}\n        for scenario in no_raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                instance: LoginCredential = LoginCredential(**no_raise_kwargs[scenario])\n                instance.full_clean()\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#class-cardtestcase","title":"<code>class CardTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class CardTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        self.card_1: Card = Card.objects.create(owner=self.user, name='Personal Main Card One', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card-one', owners_name='TEST USER')\n        try:\n            with atomic():\n                self.card_2: Card = Card.objects.create(owner=self.user, name='Personal Main Card', card_type='creda', number='4002892240028922', expiration=Month(2028, 11), cvv=113, bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card', owners_name='TEST USER')\n        except DataError:\n            self.card_2: Card = Card.objects.create(owner=self.user, name='Personal Main Card Two', card_type='baka', number='4002892240028922', expiration=Month(2028, 11), cvv=113, bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card-two', owners_name='TEST USER')\n        self.card_3: Card = Card.objects.create(owner=self.user, name='Personal Main Card Three', card_type='deb', number='123456789', expiration=Month(2028, 11), cvv=12, bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card-three', owners_name='TEST USER')\n        self.card_4: Card = Card.objects.create(owner=self.user, name='Personal Main Card Four', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv=113, bank='mingau--', brand='mastercard--', slug='mingau--personal-main-card-four', owners_name='TEST USER')\n        self.card_5: Card = Card.objects.create(owner=self.user, name='Personal Main Card Five', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-not-main-card', owners_name='TEST USER')\n        self.card_6: Card = Card.objects.create(owner=self.user, name='Personal Main Card Six', card_type='deb', number='4002892240028922', expiration='2023/4', cvv=113, bank='nubank--', brand='vina--', slug='nubank--personal-main-card-six', owners_name='TEST USER')\n\n    def test_card_instance_validity(self) -&gt; None:\n        \"\"\"Tests card instance of correct class\"\"\"\n        for card in Card.objects.all():\n            with self.subTest(card=card):\n                self.assertIsInstance(card, Card)\n\n    def test_card_special_str_method_return(self) -&gt; None:\n        \"\"\"Tests card return value of __str__ method\"\"\"\n        card1: Card = Card.objects.get(pk=self.card_1.pk)\n        self.assertEqual(card1.__str__(), f'{str(card1.owner.username)} | {card1.card_type} | {card1.name}')\n\n    def test_card_absolute_url_method_return(self) -&gt; None:\n        \"\"\"Tests card return value of get_absolute_url method\"\"\"\n        cred1: Card = Card.objects.get(pk=self.card_1.pk)\n        self.assertEqual(cred1.get_absolute_url(), reverse('secret:card_list_view'))\n\n    def test_card_key_value_assertion(self) -&gt; None:\n        \"\"\"Tests card correct attribuition of value\"\"\"\n        card1: Card = Card.objects.get(pk=self.card_1.pk)\n        self.assertEqual(card1.name, 'Personal Main Card One')\n        self.assertEqual(card1.card_type, 'deb')\n        self.assertEqual(card1.number, '4002892240028922')\n        self.assertEqual(card1.expiration, Month(2028, 11))\n        self.assertEqual(card1.cvv, '113')\n        self.assertEqual(card1.bank, 'nubank--')\n        self.assertEqual(card1.brand, 'mastercard--')\n        self.assertEqual(card1.slug, 'nubank--personal-main-card-one')\n        self.assertEqual(card1.owners_name, 'TEST USER')\n\n    def test_card_user_foreign_key_validity(self) -&gt; None:\n        \"\"\"Tests card foreign key validation\"\"\"\n        card1_owner: User = Card.objects.get(pk=self.card_1.pk).owner\n        self.assertEqual(card1_owner, self.user)\n\n    def test_card_create_validity(self) -&gt; None:\n        \"\"\"Tests card creation integrity and validation\"\"\"\n        card1: Card = Card.objects.get(pk=self.card_1.pk)\n        card2: Card = Card.objects.get(pk=self.card_2.pk)\n        card3: Card = Card.objects.get(pk=self.card_3.pk)\n        card4: Card = Card.objects.get(pk=self.card_4.pk)\n        card5: Card = Card.objects.get(pk=self.card_5.pk)\n        card6: Card = Card.objects.get(pk=self.card_6.pk)\n        self.assertEqual(Card.objects.all().count(), 6)\n        self.assertTrue(card1.is_valid())\n        self.assertFalse(card2.is_valid())\n        self.assertFalse(card3.is_valid())\n        self.assertFalse(card4.is_valid())\n        self.assertFalse(card5.is_valid())\n        self.assertFalse(card6.is_valid())\n\n    def test_card_update_validity(self) -&gt; None:\n        \"\"\"Tests card update integrity and validation\"\"\"\n        Card.objects.filter(pk=self.card_2.pk).update(card_type='cred')\n        Card.objects.filter(pk=self.card_3.pk).update(number=xor('1122334455667788', self.user.password[21:]), cvv=xor('1986', self.user.password[21:]))\n        Card.objects.filter(pk=self.card_4.pk).update(bank='pagseguro--', slug='pagseguro--personal-main-card-four')\n        Card.objects.filter(pk=self.card_5.pk).update(slug='nubank--personal-main-card-five')\n        Card.objects.filter(pk=self.card_6.pk).update(brand='mastercard--')\n        for (i, card) in enumerate(Card.objects.all(), start=1):\n            with self.subTest(card=i):\n                self.assertTrue(card.is_valid())\n\n    def test_card_delete_validity(self) -&gt; None:\n        \"\"\"Tests card correct deletion\"\"\"\n        for card in Card.objects.all():\n            if not card.is_valid():\n                card.delete()\n        self.assertEqual(Card.objects.all().count(), 1)\n\n    def test_card_db_exception_raises(self) -&gt; None:\n        \"\"\"Tests card correct integrity and validation with raised exceptions\"\"\"\n        params: list[dict[str, User | str]] = [{'owner': self.user}, {'name': 'Name'}, {'card_type': 'deb'}, {'number': '1111222233334444'}, {'cvv': '044'}, {'bank': 'nubank--'}, {'brand': 'visa--'}, {'owners_name': \"Owner's Name\"}, {'slug': 'name'}]\n        for (case, scenario) in create_scenarios(params):\n            with self.subTest(scenario=case):\n                with self.assertRaises(ValidationError):\n                    with atomic():\n                        instance: Card = Card(**scenario)\n                        instance.full_clean()\n        raise_kwargs: dict[str, dict[str, str | Month | User]] = {'card1': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 41}, 'card2': {'owner': self.user, 'name': 'x' * 41, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card3': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 5, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card4': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 11, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card5': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 20, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card6': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 2, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card7': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 5, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card8': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 65, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card9': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 129, 'slug': 'x' * 40}}\n        for scenario in raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                with self.assertRaises(ValidationError):\n                    with atomic():\n                        instance: Card = Card(**raise_kwargs[scenario])\n                        instance.full_clean()\n        no_raise_kwargs: dict[str, dict[str, str | Month | User]] = {'card1': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'cred', 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}}\n        for scenario in no_raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                instance: Card = Card(**no_raise_kwargs[scenario])\n                instance.full_clean()\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#class-securitynotetestcase","title":"<code>class SecurityNoteTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecurityNoteTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        self.security_note_1: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw an apple', slug='how-to-draw-an-apple', note_type='hlt', content='Just draw an apple tree and erase the tree.')\n        self.security_note_2: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw a tree', slug='howtodrawatree', note_type='hlt', content='Just draw an apple tree and erase the apples.')\n        self.security_note_3: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw an apple tree', slug='how-to-draw-an-apple-tree', note_type='hlt', content='x' * 333)\n        self.security_note_4: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw an apple tree leaf', slug='how-to-draw-an-apple-tree-leaf', note_type='hlt')\n        self.security_note_5: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw an apple', slug='how-to-draw-an-apple', note_type='outro', content='Just draw an apple tree and erase the tree.')\n\n    def test_note_instance_validity(self) -&gt; None:\n        \"\"\"Tests note instance of correct class\"\"\"\n        for note in SecurityNote.objects.all():\n            with self.subTest(note=note):\n                self.assertIsInstance(note, SecurityNote)\n\n    def test_note_special_str_method_return(self) -&gt; None:\n        \"\"\"Tests note return value of __str__ method\"\"\"\n        note1: SecurityNote = SecurityNote.objects.get(pk=self.security_note_1.pk)\n        self.assertEqual(note1.__str__(), f'{str(note1.owner.username)} | {note1.title}')\n\n    def test_note_absolute_url_method_return(self) -&gt; None:\n        \"\"\"Tests note return value of get_absolute_url method\"\"\"\n        cred1: SecurityNote = SecurityNote.objects.get(pk=self.security_note_1.pk)\n        self.assertEqual(cred1.get_absolute_url(), reverse('secret:note_list_view'))\n\n    def test_note_key_value_assertion(self) -&gt; None:\n        \"\"\"Tests note correct attribuition of value\"\"\"\n        note1: SecurityNote = SecurityNote.objects.get(pk=self.security_note_1.pk)\n        self.assertEqual(note1.title, 'How to draw an apple')\n        self.assertEqual(note1.slug, 'how-to-draw-an-apple')\n        self.assertEqual(note1.note_type, 'hlt')\n        self.assertEqual(note1.content, 'Just draw an apple tree and erase the tree.')\n\n    def test_note_user_foreign_key_validity(self) -&gt; None:\n        \"\"\"Tests note foreign key validation\"\"\"\n        note1_owner: User = SecurityNote.objects.get(pk=self.security_note_1.pk).owner\n        self.assertEqual(note1_owner, self.user)\n\n    def test_note_create_validity(self) -&gt; None:\n        \"\"\"Tests note creation integrity and validation\"\"\"\n        note1: SecurityNote = SecurityNote.objects.get(pk=self.security_note_1.pk)\n        note2: SecurityNote = SecurityNote.objects.get(pk=self.security_note_2.pk)\n        note3: SecurityNote = SecurityNote.objects.get(pk=self.security_note_3.pk)\n        note4: SecurityNote = SecurityNote.objects.get(pk=self.security_note_4.pk)\n        note5: SecurityNote = SecurityNote.objects.get(pk=self.security_note_5.pk)\n        self.assertEqual(SecurityNote.objects.all().count(), 5)\n        self.assertTrue(note1.is_valid())\n        self.assertFalse(note2.is_valid())\n        self.assertFalse(note3.is_valid())\n        self.assertFalse(note4.is_valid())\n        self.assertFalse(note5.is_valid())\n\n    def test_note_update_validity(self) -&gt; None:\n        \"\"\"Tests note update integrity and validation\"\"\"\n        SecurityNote.objects.filter(pk=self.security_note_2.pk).update(slug='how-to-draw-a-tree')\n        SecurityNote.objects.filter(pk=self.security_note_3.pk).update(content='Draw a tree and then the apples.')\n        SecurityNote.objects.filter(pk=self.security_note_4.pk).update(content='Draw an apple tree and then erase the apples and the tree.')\n        SecurityNote.objects.filter(pk=self.security_note_5.pk).update(note_type='oth')\n        for note in SecurityNote.objects.all():\n            with self.subTest(note=note):\n                self.assertTrue(note.is_valid())\n\n    def test_note_delete_validity(self) -&gt; None:\n        \"\"\"Tests note correct deletion\"\"\"\n        for note in SecurityNote.objects.all():\n            if not note.is_valid():\n                note.delete()\n        self.assertEqual(SecurityNote.objects.all().count(), 1)\n\n    def test_note_db_exception_raises(self) -&gt; None:\n        \"\"\"Tests note correct integrity and validation with raised exceptions\"\"\"\n        raise_kwargs: dict[str, dict[str, User | str]] = {'note1': {'owner': self.user}, 'note2': {'title': 'A Title'}, 'note3': {'slug': 'a-title'}, 'note4': {'note_type': 'std'}, 'note5': {'content': 'A regular content'}, 'note6': {'owner': self.user, 'title': 'A Title'}, 'note7': {'owner': self.user, 'slug': 'a-title'}, 'note8': {'owner': self.user, 'content': 'A regular content'}, 'note9': {'owner': self.user, 'note_type': 'std'}, 'note10': {'owner': self.user, 'title': 'A Title', 'slug': 'a-title'}, 'note11': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content'}, 'note12': {'owner': self.user, 'title': 'A Title', 'note_type': 'std'}, 'note13': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content', 'slug': 'a-title'}, 'note14': {'owner': self.user, 'title': 'x' * 41, 'content': 'A regular content', 'slug': 'a-title', 'note_type': 'std'}, 'note15': {'owner': self.user, 'title': 'A Title', 'content': 'x' * 301, 'slug': 'a-title', 'note_type': 'std'}, 'note16': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content', 'slug': 'x' * 51, 'note_type': 'std'}, 'note17': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content', 'slug': 'a-title', 'note_type': 'none'}}\n        for scenario in raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                with self.assertRaises(ValidationError):\n                    with atomic():\n                        instance: SecurityNote = SecurityNote(**raise_kwargs[scenario])\n                        instance.full_clean()\n        no_raise_kwargs: dict[str, dict[str, str | User]] = {'note1': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content', 'note_type': 'std', 'slug': 'a-title'}, 'note2': {'owner': self.user, 'title': 'x ' * 20, 'content': 'x' * 300, 'note_type': 'wrk', 'slug': 'x-' * 20}}\n        for scenario in no_raise_kwargs.keys():\n            with self.subTest(scenario=scenario):\n                instance: SecurityNote = SecurityNote(**no_raise_kwargs[scenario])\n                instance.full_clean()\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/tests/test_models.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    self.login_credential_1: LoginCredential = LoginCredential.objects.create(owner=self.user, service='google--', name='Personal Main Account', slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123@gmail.com', password='ilovemenotyou')\n    self.login_credential_2: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=True, thirdy_party_login_name='Personal Main Account', login='-----', password='-----')\n    self.login_credential_3: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=True, thirdy_party_login_name='-----', login='night_monkey123', password='ilovemenotyou')\n    self.login_credential_4: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--potato', thirdy_party_login=False, thirdy_party_login_name='-----', login='', password='night_monkey123')\n    self.login_credential_5: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123')\n    try:\n        with atomic():\n            self.login_credential_6: LoginCredential = LoginCredential.objects.create(owner=self.user, service='google--', name='Salve' * 9, slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='x' * 201, password='ilovemenotyou')\n    except DataError:\n        self.login_credential_6: LoginCredential = LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123')\n    self.login_credential_7: LoginCredential = LoginCredential.objects.create(owner=self.user, service='pampas-gonden-radio--', name='Little Fries', slug='pampas-gonden-radio--little-fries', thirdy_party_login=True, thirdy_party_login_name='Personal Main Account', login='-----', password='-----')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_instance_validity","title":"<code>def test_credential_instance_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_instance_validity(self) -&gt; None:\n    \"\"\"Tests credential instance of correct class\"\"\"\n    for cred in LoginCredential.objects.all():\n        with self.subTest(cred=cred):\n            self.assertIsInstance(cred, LoginCredential)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_key_value_assertion","title":"<code>def test_credential_key_value_assertion</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_key_value_assertion(self) -&gt; None:\n    \"\"\"Tests credential correct attribuition of value\"\"\"\n    cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n    self.assertEqual(cred1.service, 'google--')\n    self.assertEqual(cred1.name, 'Personal Main Account')\n    self.assertEqual(cred1.slug, 'google--personal-main-account')\n    self.assertFalse(cred1.thirdy_party_login)\n    self.assertEqual(cred1.thirdy_party_login_name, '-----')\n    self.assertEqual(cred1.login, 'night_monkey123@gmail.com')\n    self.assertEqual(cred1.password, 'ilovemenotyou')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_special_str_method_return","title":"<code>def test_credential_special_str_method_return</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_special_str_method_return(self) -&gt; None:\n    \"\"\"Tests credential return value of __str__ method\"\"\"\n    cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n    self.assertEqual(cred1.__str__(), f'{str(cred1.owner.username)} | {cred1.service} | {cred1.name}')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_absolute_url_method_return","title":"<code>def test_credential_absolute_url_method_return</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_absolute_url_method_return(self) -&gt; None:\n    \"\"\"Tests credential return value of get_absolute_url method\"\"\"\n    cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n    self.assertEqual(cred1.get_absolute_url(), reverse('secret:credential_list_view'))\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_user_foreign_key_validity","title":"<code>def test_credential_user_foreign_key_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_user_foreign_key_validity(self) -&gt; None:\n    \"\"\"Tests credential foreign key validation\"\"\"\n    cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n    cred2: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_2.pk)\n    cred1_owner: User = cred1.owner\n    cred2_owner: User = cred2.owner\n    self.assertEqual(cred1_owner, cred2_owner)\n    self.assertEqual(cred1_owner, self.user)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_create_validity","title":"<code>def test_credential_create_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_create_validity(self) -&gt; None:\n    \"\"\"Tests credential creation integrity and validation\"\"\"\n    cred1: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_1.pk)\n    cred2: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_2.pk)\n    cred3: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_3.pk)\n    cred4: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_4.pk)\n    cred5: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_5.pk)\n    cred6: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_6.pk)\n    cred7: LoginCredential = LoginCredential.objects.get(pk=self.login_credential_7.pk)\n    self.assertEqual(LoginCredential.objects.all().count(), 7)\n    self.assertTrue(cred1.is_valid())\n    self.assertTrue(cred2.is_valid())\n    self.assertFalse(cred3.is_valid())\n    self.assertFalse(cred4.is_valid())\n    self.assertFalse(cred5.is_valid())\n    self.assertFalse(cred6.is_valid())\n    self.assertFalse(cred7.is_valid())\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_update_validity","title":"<code>def test_credential_update_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_update_validity(self) -&gt; None:\n    \"\"\"Tests credential update integrity and validation\"\"\"\n    LoginCredential.objects.filter(pk=self.login_credential_3.pk).update(thirdy_party_login=False)\n    LoginCredential.objects.filter(pk=self.login_credential_4.pk).update(slug='steam--little-fries', login='some_login_text_or_email_or_some_other_stuff_like_this')\n    LoginCredential.objects.filter(pk=self.login_credential_5.pk).update(password='https://www.youtube.com/watch?v=dQw4w9WgXcQ')\n    LoginCredential.objects.filter(pk=self.login_credential_6.pk).update(password='https://www.youtube.com/watch?v=dQw4w9WgXcQ')\n    LoginCredential.objects.filter(pk=self.login_credential_7.pk).update(service='visa--', slug='visa--little-fries')\n    for cred in LoginCredential.objects.all():\n        with self.subTest(cred=cred):\n            self.assertTrue(cred.is_valid())\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_delete_validity","title":"<code>def test_credential_delete_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_delete_validity(self) -&gt; None:\n    \"\"\"Tests credential correct deletion\"\"\"\n    for cred in LoginCredential.objects.all():\n        if not cred.is_valid():\n            cred.delete()\n    self.assertEqual(LoginCredential.objects.all().count(), 2)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_credential_db_exception_raises","title":"<code>def test_credential_db_exception_raises</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_credential_db_exception_raises(self) -&gt; None:\n    \"\"\"Tests credential correct integrity and validation with raised exceptions\"\"\"\n    params: list[dict[str, User | str | bool]] = [{'owner': self.user}, {'service': 'aws--'}, {'name': 'Name'}, {'thirdy_party_login': False}, {'thirdy_party_login_name': '-----'}, {'login': 'LoginName'}, {'password': 'PasswordName'}, {'slug': 'aws--name'}]\n    for (case, scenario) in create_scenarios(params):\n        with self.subTest(scenario=case):\n            with self.assertRaises(ValidationError):\n                with atomic():\n                    instance: LoginCredential = LoginCredential(**scenario)\n                    instance.full_clean()\n    raise_kwargs: dict[str, dict[str, User | str | bool]] = {'cred1': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 41, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 200, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 123}, 'cred2': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 41, 'login': 'x' * 201, 'password': 'x' * 200, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 123}, 'cred3': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 201, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 123}, 'cred4': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 200, 'note': 'x' * 129, 'slug': 'aws--' + 'x' * 123}, 'cred5': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 200, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 124}}\n    for scenario in raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            with self.assertRaises(ValidationError):\n                with atomic():\n                    instance: LoginCredential = LoginCredential(**raise_kwargs[scenario])\n                    instance.full_clean()\n    no_raise_kwargs: dict[str, dict[str, User | str | bool]] = {'cred1': {'owner': self.user, 'service': 'aws--', 'name': 'x' * 40, 'thirdy_party_login': False, 'thirdy_party_login_name': 'x' * 40, 'login': 'x' * 200, 'password': 'x' * 200, 'note': 'x' * 128, 'slug': 'aws--' + 'x' * 123}}\n    for scenario in no_raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            instance: LoginCredential = LoginCredential(**no_raise_kwargs[scenario])\n            instance.full_clean()\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-setup_1","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    self.card_1: Card = Card.objects.create(owner=self.user, name='Personal Main Card One', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card-one', owners_name='TEST USER')\n    try:\n        with atomic():\n            self.card_2: Card = Card.objects.create(owner=self.user, name='Personal Main Card', card_type='creda', number='4002892240028922', expiration=Month(2028, 11), cvv=113, bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card', owners_name='TEST USER')\n    except DataError:\n        self.card_2: Card = Card.objects.create(owner=self.user, name='Personal Main Card Two', card_type='baka', number='4002892240028922', expiration=Month(2028, 11), cvv=113, bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card-two', owners_name='TEST USER')\n    self.card_3: Card = Card.objects.create(owner=self.user, name='Personal Main Card Three', card_type='deb', number='123456789', expiration=Month(2028, 11), cvv=12, bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card-three', owners_name='TEST USER')\n    self.card_4: Card = Card.objects.create(owner=self.user, name='Personal Main Card Four', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv=113, bank='mingau--', brand='mastercard--', slug='mingau--personal-main-card-four', owners_name='TEST USER')\n    self.card_5: Card = Card.objects.create(owner=self.user, name='Personal Main Card Five', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-not-main-card', owners_name='TEST USER')\n    self.card_6: Card = Card.objects.create(owner=self.user, name='Personal Main Card Six', card_type='deb', number='4002892240028922', expiration='2023/4', cvv=113, bank='nubank--', brand='vina--', slug='nubank--personal-main-card-six', owners_name='TEST USER')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_instance_validity","title":"<code>def test_card_instance_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_instance_validity(self) -&gt; None:\n    \"\"\"Tests card instance of correct class\"\"\"\n    for card in Card.objects.all():\n        with self.subTest(card=card):\n            self.assertIsInstance(card, Card)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_special_str_method_return","title":"<code>def test_card_special_str_method_return</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_special_str_method_return(self) -&gt; None:\n    \"\"\"Tests card return value of __str__ method\"\"\"\n    card1: Card = Card.objects.get(pk=self.card_1.pk)\n    self.assertEqual(card1.__str__(), f'{str(card1.owner.username)} | {card1.card_type} | {card1.name}')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_absolute_url_method_return","title":"<code>def test_card_absolute_url_method_return</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_absolute_url_method_return(self) -&gt; None:\n    \"\"\"Tests card return value of get_absolute_url method\"\"\"\n    cred1: Card = Card.objects.get(pk=self.card_1.pk)\n    self.assertEqual(cred1.get_absolute_url(), reverse('secret:card_list_view'))\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_key_value_assertion","title":"<code>def test_card_key_value_assertion</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_key_value_assertion(self) -&gt; None:\n    \"\"\"Tests card correct attribuition of value\"\"\"\n    card1: Card = Card.objects.get(pk=self.card_1.pk)\n    self.assertEqual(card1.name, 'Personal Main Card One')\n    self.assertEqual(card1.card_type, 'deb')\n    self.assertEqual(card1.number, '4002892240028922')\n    self.assertEqual(card1.expiration, Month(2028, 11))\n    self.assertEqual(card1.cvv, '113')\n    self.assertEqual(card1.bank, 'nubank--')\n    self.assertEqual(card1.brand, 'mastercard--')\n    self.assertEqual(card1.slug, 'nubank--personal-main-card-one')\n    self.assertEqual(card1.owners_name, 'TEST USER')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_user_foreign_key_validity","title":"<code>def test_card_user_foreign_key_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_user_foreign_key_validity(self) -&gt; None:\n    \"\"\"Tests card foreign key validation\"\"\"\n    card1_owner: User = Card.objects.get(pk=self.card_1.pk).owner\n    self.assertEqual(card1_owner, self.user)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_create_validity","title":"<code>def test_card_create_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_create_validity(self) -&gt; None:\n    \"\"\"Tests card creation integrity and validation\"\"\"\n    card1: Card = Card.objects.get(pk=self.card_1.pk)\n    card2: Card = Card.objects.get(pk=self.card_2.pk)\n    card3: Card = Card.objects.get(pk=self.card_3.pk)\n    card4: Card = Card.objects.get(pk=self.card_4.pk)\n    card5: Card = Card.objects.get(pk=self.card_5.pk)\n    card6: Card = Card.objects.get(pk=self.card_6.pk)\n    self.assertEqual(Card.objects.all().count(), 6)\n    self.assertTrue(card1.is_valid())\n    self.assertFalse(card2.is_valid())\n    self.assertFalse(card3.is_valid())\n    self.assertFalse(card4.is_valid())\n    self.assertFalse(card5.is_valid())\n    self.assertFalse(card6.is_valid())\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_update_validity","title":"<code>def test_card_update_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_update_validity(self) -&gt; None:\n    \"\"\"Tests card update integrity and validation\"\"\"\n    Card.objects.filter(pk=self.card_2.pk).update(card_type='cred')\n    Card.objects.filter(pk=self.card_3.pk).update(number=xor('1122334455667788', self.user.password[21:]), cvv=xor('1986', self.user.password[21:]))\n    Card.objects.filter(pk=self.card_4.pk).update(bank='pagseguro--', slug='pagseguro--personal-main-card-four')\n    Card.objects.filter(pk=self.card_5.pk).update(slug='nubank--personal-main-card-five')\n    Card.objects.filter(pk=self.card_6.pk).update(brand='mastercard--')\n    for (i, card) in enumerate(Card.objects.all(), start=1):\n        with self.subTest(card=i):\n            self.assertTrue(card.is_valid())\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_delete_validity","title":"<code>def test_card_delete_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_delete_validity(self) -&gt; None:\n    \"\"\"Tests card correct deletion\"\"\"\n    for card in Card.objects.all():\n        if not card.is_valid():\n            card.delete()\n    self.assertEqual(Card.objects.all().count(), 1)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_card_db_exception_raises","title":"<code>def test_card_db_exception_raises</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_card_db_exception_raises(self) -&gt; None:\n    \"\"\"Tests card correct integrity and validation with raised exceptions\"\"\"\n    params: list[dict[str, User | str]] = [{'owner': self.user}, {'name': 'Name'}, {'card_type': 'deb'}, {'number': '1111222233334444'}, {'cvv': '044'}, {'bank': 'nubank--'}, {'brand': 'visa--'}, {'owners_name': \"Owner's Name\"}, {'slug': 'name'}]\n    for (case, scenario) in create_scenarios(params):\n        with self.subTest(scenario=case):\n            with self.assertRaises(ValidationError):\n                with atomic():\n                    instance: Card = Card(**scenario)\n                    instance.full_clean()\n    raise_kwargs: dict[str, dict[str, str | Month | User]] = {'card1': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 41}, 'card2': {'owner': self.user, 'name': 'x' * 41, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card3': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 5, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card4': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 11, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card5': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 20, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card6': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 2, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card7': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 5, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card8': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 65, 'note': 'x' * 128, 'slug': 'x' * 40}, 'card9': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'x' * 4, 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 129, 'slug': 'x' * 40}}\n    for scenario in raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            with self.assertRaises(ValidationError):\n                with atomic():\n                    instance: Card = Card(**raise_kwargs[scenario])\n                    instance.full_clean()\n    no_raise_kwargs: dict[str, dict[str, str | Month | User]] = {'card1': {'owner': self.user, 'name': 'x' * 40, 'card_type': 'cred', 'number': 'x' * 16, 'expiration': Month(2044, 4), 'cvv': 'x' * 3, 'bank': 'nubank--', 'brand': 'visa--', 'owners_name': 'x' * 64, 'note': 'x' * 128, 'slug': 'x' * 40}}\n    for scenario in no_raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            instance: Card = Card(**no_raise_kwargs[scenario])\n            instance.full_clean()\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-setup_2","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    self.security_note_1: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw an apple', slug='how-to-draw-an-apple', note_type='hlt', content='Just draw an apple tree and erase the tree.')\n    self.security_note_2: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw a tree', slug='howtodrawatree', note_type='hlt', content='Just draw an apple tree and erase the apples.')\n    self.security_note_3: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw an apple tree', slug='how-to-draw-an-apple-tree', note_type='hlt', content='x' * 333)\n    self.security_note_4: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw an apple tree leaf', slug='how-to-draw-an-apple-tree-leaf', note_type='hlt')\n    self.security_note_5: SecurityNote = SecurityNote.objects.create(owner=self.user, title='How to draw an apple', slug='how-to-draw-an-apple', note_type='outro', content='Just draw an apple tree and erase the tree.')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_instance_validity","title":"<code>def test_note_instance_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_instance_validity(self) -&gt; None:\n    \"\"\"Tests note instance of correct class\"\"\"\n    for note in SecurityNote.objects.all():\n        with self.subTest(note=note):\n            self.assertIsInstance(note, SecurityNote)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_special_str_method_return","title":"<code>def test_note_special_str_method_return</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_special_str_method_return(self) -&gt; None:\n    \"\"\"Tests note return value of __str__ method\"\"\"\n    note1: SecurityNote = SecurityNote.objects.get(pk=self.security_note_1.pk)\n    self.assertEqual(note1.__str__(), f'{str(note1.owner.username)} | {note1.title}')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_absolute_url_method_return","title":"<code>def test_note_absolute_url_method_return</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_absolute_url_method_return(self) -&gt; None:\n    \"\"\"Tests note return value of get_absolute_url method\"\"\"\n    cred1: SecurityNote = SecurityNote.objects.get(pk=self.security_note_1.pk)\n    self.assertEqual(cred1.get_absolute_url(), reverse('secret:note_list_view'))\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_key_value_assertion","title":"<code>def test_note_key_value_assertion</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_key_value_assertion(self) -&gt; None:\n    \"\"\"Tests note correct attribuition of value\"\"\"\n    note1: SecurityNote = SecurityNote.objects.get(pk=self.security_note_1.pk)\n    self.assertEqual(note1.title, 'How to draw an apple')\n    self.assertEqual(note1.slug, 'how-to-draw-an-apple')\n    self.assertEqual(note1.note_type, 'hlt')\n    self.assertEqual(note1.content, 'Just draw an apple tree and erase the tree.')\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_user_foreign_key_validity","title":"<code>def test_note_user_foreign_key_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_user_foreign_key_validity(self) -&gt; None:\n    \"\"\"Tests note foreign key validation\"\"\"\n    note1_owner: User = SecurityNote.objects.get(pk=self.security_note_1.pk).owner\n    self.assertEqual(note1_owner, self.user)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_create_validity","title":"<code>def test_note_create_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_create_validity(self) -&gt; None:\n    \"\"\"Tests note creation integrity and validation\"\"\"\n    note1: SecurityNote = SecurityNote.objects.get(pk=self.security_note_1.pk)\n    note2: SecurityNote = SecurityNote.objects.get(pk=self.security_note_2.pk)\n    note3: SecurityNote = SecurityNote.objects.get(pk=self.security_note_3.pk)\n    note4: SecurityNote = SecurityNote.objects.get(pk=self.security_note_4.pk)\n    note5: SecurityNote = SecurityNote.objects.get(pk=self.security_note_5.pk)\n    self.assertEqual(SecurityNote.objects.all().count(), 5)\n    self.assertTrue(note1.is_valid())\n    self.assertFalse(note2.is_valid())\n    self.assertFalse(note3.is_valid())\n    self.assertFalse(note4.is_valid())\n    self.assertFalse(note5.is_valid())\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_update_validity","title":"<code>def test_note_update_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_update_validity(self) -&gt; None:\n    \"\"\"Tests note update integrity and validation\"\"\"\n    SecurityNote.objects.filter(pk=self.security_note_2.pk).update(slug='how-to-draw-a-tree')\n    SecurityNote.objects.filter(pk=self.security_note_3.pk).update(content='Draw a tree and then the apples.')\n    SecurityNote.objects.filter(pk=self.security_note_4.pk).update(content='Draw an apple tree and then erase the apples and the tree.')\n    SecurityNote.objects.filter(pk=self.security_note_5.pk).update(note_type='oth')\n    for note in SecurityNote.objects.all():\n        with self.subTest(note=note):\n            self.assertTrue(note.is_valid())\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_delete_validity","title":"<code>def test_note_delete_validity</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_delete_validity(self) -&gt; None:\n    \"\"\"Tests note correct deletion\"\"\"\n    for note in SecurityNote.objects.all():\n        if not note.is_valid():\n            note.delete()\n    self.assertEqual(SecurityNote.objects.all().count(), 1)\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#def-test_note_db_exception_raises","title":"<code>def test_note_db_exception_raises</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_note_db_exception_raises(self) -&gt; None:\n    \"\"\"Tests note correct integrity and validation with raised exceptions\"\"\"\n    raise_kwargs: dict[str, dict[str, User | str]] = {'note1': {'owner': self.user}, 'note2': {'title': 'A Title'}, 'note3': {'slug': 'a-title'}, 'note4': {'note_type': 'std'}, 'note5': {'content': 'A regular content'}, 'note6': {'owner': self.user, 'title': 'A Title'}, 'note7': {'owner': self.user, 'slug': 'a-title'}, 'note8': {'owner': self.user, 'content': 'A regular content'}, 'note9': {'owner': self.user, 'note_type': 'std'}, 'note10': {'owner': self.user, 'title': 'A Title', 'slug': 'a-title'}, 'note11': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content'}, 'note12': {'owner': self.user, 'title': 'A Title', 'note_type': 'std'}, 'note13': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content', 'slug': 'a-title'}, 'note14': {'owner': self.user, 'title': 'x' * 41, 'content': 'A regular content', 'slug': 'a-title', 'note_type': 'std'}, 'note15': {'owner': self.user, 'title': 'A Title', 'content': 'x' * 301, 'slug': 'a-title', 'note_type': 'std'}, 'note16': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content', 'slug': 'x' * 51, 'note_type': 'std'}, 'note17': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content', 'slug': 'a-title', 'note_type': 'none'}}\n    for scenario in raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            with self.assertRaises(ValidationError):\n                with atomic():\n                    instance: SecurityNote = SecurityNote(**raise_kwargs[scenario])\n                    instance.full_clean()\n    no_raise_kwargs: dict[str, dict[str, str | User]] = {'note1': {'owner': self.user, 'title': 'A Title', 'content': 'A regular content', 'note_type': 'std', 'slug': 'a-title'}, 'note2': {'owner': self.user, 'title': 'x ' * 20, 'content': 'x' * 300, 'note_type': 'wrk', 'slug': 'x-' * 20}}\n    for scenario in no_raise_kwargs.keys():\n        with self.subTest(scenario=scenario):\n            instance: SecurityNote = SecurityNote(**no_raise_kwargs[scenario])\n            instance.full_clean()\n</code></pre>"},{"location":"Codebase/secret/tests/test_models.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/tests/test_views.py/","title":"File: <code>test_views.py</code>","text":"<p>Path: <code>SWARDEN.secret.tests</code></p>"},{"location":"Codebase/secret/tests/test_views.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/tests/test_views.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-get_user","title":"<code>import get_user</code>","text":"<p>Path: <code>django.contrib.auth</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.contrib.auth import get_user\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-httpresponse","title":"<code>import HttpResponse</code>","text":"<p>Path: <code>django.http</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.http import HttpResponse\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-reverse","title":"<code>import reverse</code>","text":"<p>Path: <code>django.urls</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.urls import reverse\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-card","title":"<code>import Card</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import Card\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-logincredential","title":"<code>import LoginCredential</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import LoginCredential\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-securitynote","title":"<code>import SecurityNote</code>","text":"<p>Path: <code>secret.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.models import SecurityNote\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-month","title":"<code>import Month</code>","text":"<p>Path: <code>secret.month.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.month.models import Month\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-empty_post_msg","title":"<code>import EMPTY_POST_MSG</code>","text":"<p>Path: <code>secret.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.views import EMPTY_POST_MSG\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#import-feedback_msg","title":"<code>import FEEDBACK_MSG</code>","text":"<p>Path: <code>secret.views</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from secret.views import FEEDBACK_MSG\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/tests/test_views.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/tests/test_views.py/#class-secretindexviewtestcase","title":"<code>class SecretIndexViewTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecretIndexViewTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        User.objects.create_user(username='user', password='password', email='user@email.com')\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:index'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:index'))\n        res: HttpResponse = self.client.get(reverse('secret:index'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:index'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/index.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-baselogincredentialtestcase","title":"<code>class BaseLoginCredentialTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class BaseLoginCredentialTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        LoginCredential.objects.create(owner=self.user, service='google--', name='Personal Main Account', slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123@gmail.com', password='ilovemenotyou')\n        LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=True, thirdy_party_login_name='Personal Main Account', login='-----', password='-----')\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-logincredentialcreateviewstestcase","title":"<code>class LoginCredentialCreateViewsTestCase</code>","text":"<p>Parents: <code>BaseLoginCredentialTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LoginCredentialCreateViewsTestCase(BaseLoginCredentialTestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/nova | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:credential_create_view'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_create_view'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_create_view'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/nova | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_create_view'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Credencial')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_empty_form(self) -&gt; None:\n        \"\"\"POST /segredo/credenciais/nova | anonymous user | empty form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), {})\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_create_view'))\n        res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), {}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_empty_form(self) -&gt; None:\n        \"\"\"POST /segredo/credenciais/nova | authenticated user | empty form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), {}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn(EMPTY_POST_MSG, res.content.decode('utf-8'))\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Credencial')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_empty_form_existing_secret(self) -&gt; None:\n        \"\"\"POST /segredo/credenciais/nova | anonymous user | existent secret slug\"\"\"\n        cred_data: dict = {'owner': self.user, 'service': 'google--', 'name': 'Personal Main Account', 'slug': 'google--personal-main-account', 'thirdy_party_login': False, 'thirdy_party_login_name': '-----', 'login': 'night_monkey123@gmail.com', 'password': 'ilovemenotyou'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), cred_data)\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_create_view'))\n        res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), cred_data, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_empty_form_existing_secret(self) -&gt; None:\n        \"\"\"POST /segredo/credenciais/nova | authenticated user | empty form\"\"\"\n        cred_data: dict = {'owner': self.user, 'service': 'google--', 'name': 'Personal Main Account', 'slug': 'google--personal-main-account', 'thirdy_party_login': False, 'thirdy_party_login_name': '-----', 'login': 'night_monkey123@gmail.com', 'password': 'ilovemenotyou'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), cred_data)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn(FEEDBACK_MSG, res.content.decode('utf-8'))\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Credencial')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_valid_form(self) -&gt; None:\n        \"\"\"POST /segredo/credenciais/nova | authenticated user | valid form\"\"\"\n        cred_data: dict = {'owner': self.user, 'service': 'google--', 'name': 'Another Personal Main Account', 'slug': 'google--another-personal-main-account', 'thirdy_party_login': False, 'thirdy_party_login_name': '-----', 'login': 'night_monkey123@gmail.com', 'password': 'ilovemenotyou'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), cred_data, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Credencial')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-logincredentiallistviewtestcase","title":"<code>class LoginCredentialListViewTestCase</code>","text":"<p>Parents: <code>BaseLoginCredentialTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LoginCredentialListViewTestCase(BaseLoginCredentialTestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:credential_list_view'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_list_view'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_list_view'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_list_view'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/list_view.html')\n        self.assertIn('object_list', res.context.keys())\n        self.assertEqual(len(res.context['object_list']), 2)\n        self.assertIn('model_name', res.context.keys())\n        self.assertEqual(res.context['model_name'], 'Credenciais')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-logincredentialdetailviewtestcase","title":"<code>class LoginCredentialDetailViewTestCase</code>","text":"<p>Parents: <code>BaseLoginCredentialTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LoginCredentialDetailViewTestCase(BaseLoginCredentialTestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt; | anonymous user\"\"\"\n        res: HttpResponse = self.client.get(reverse('secret:credential_detail_view', kwargs={'slug': 'google--personal-main-account'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_detail_view', kwargs={'slug': 'google--personal-main-account'}))\n        res: HttpResponse = self.client.get(reverse('secret:credential_detail_view', kwargs={'slug': 'google--personal-main-account'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt; | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_detail_view', kwargs={'slug': 'google--personal-main-account'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/Credential/detail_view.html')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], LoginCredential.objects.get(owner=User.objects.first(), slug='google--personal-main-account'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_detail_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-logincredentialupdateviewtestcase","title":"<code>class LoginCredentialUpdateViewTestCase</code>","text":"<p>Parents: <code>BaseLoginCredentialTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LoginCredentialUpdateViewTestCase(BaseLoginCredentialTestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt;/editar | anonymous user\"\"\"\n        res: HttpResponse = self.client.get(reverse('secret:credential_update_view', kwargs={'slug': 'google--personal-main-account'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_update_view', kwargs={'slug': 'google--personal-main-account'}))\n        res: HttpResponse = self.client.get(reverse('secret:credential_update_view', kwargs={'slug': 'google--personal-main-account'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt;/editar | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_update_view', kwargs={'slug': 'google--personal-main-account'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Edi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Credencial')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], LoginCredential.objects.get(owner=User.objects.first(), slug='google--personal-main-account'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_update_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-logincredentialdeleteviewtestcase","title":"<code>class LoginCredentialDeleteViewTestCase</code>","text":"<p>Parents: <code>BaseLoginCredentialTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class LoginCredentialDeleteViewTestCase(BaseLoginCredentialTestCase):\n\n    def test_GET_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt;/deletar | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:credential_delete_view', kwargs={'slug': 'google--personal-main-account'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_delete_view', kwargs={'slug': 'google--personal-main-account'}))\n        res: HttpResponse = self.client.get(reverse('secret:credential_delete_view', kwargs={'slug': 'google--personal-main-account'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt;/deletar | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_delete_view', kwargs={'slug': 'google--personal-main-account'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/delete_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Exclus\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Credencial')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], LoginCredential.objects.get(owner=User.objects.first(), slug='google--personal-main-account'))\n        res: HttpResponse = self.client.get(reverse('secret:credential_delete_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-basecardtestcase","title":"<code>class BaseCardTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class BaseCardTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        Card.objects.create(owner=self.user, name='Personal Main Card', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card', owners_name='TEST USER')\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-cardcreateviewstestcase","title":"<code>class CardCreateViewsTestCase</code>","text":"<p>Parents: <code>BaseCardTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class CardCreateViewsTestCase(BaseCardTestCase):\n\n    def test_GET_create_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/novo | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:card_create_view'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_create_view'))\n        res: HttpResponse = self.client.get(reverse('secret:card_create_view'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_create_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/novo | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:card_create_view'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Cart\u00e3o')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_empty_form(self) -&gt; None:\n        \"\"\"POST /segredo/cartoes/novo | anonymous user | empty form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('secret:card_create_view'), {})\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_create_view'))\n        res: HttpResponse = self.client.post(reverse('secret:card_create_view'), {}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_empty_form(self) -&gt; None:\n        \"\"\"POST /segredo/cartoes/novo | authenticated user | empty form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:card_create_view'), {}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn(EMPTY_POST_MSG, res.content.decode('utf-8'))\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Cart\u00e3o')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_empty_form_existing_secret(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/novo | anonymous user | existent secret slug\"\"\"\n        card_data: dict = {'owner': self.user, 'name': 'Personal Main Card', 'card_type': 'deb', 'number': '4002892240028922', 'expiration_0': '11', 'expiration_1': '2028', 'cvv': '113', 'bank': 'nubank--', 'brand': 'mastercard--', 'slug': 'nubank--personal-main-card', 'owners_name': 'TEST USER'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('secret:card_create_view'), card_data)\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_create_view'))\n        res: HttpResponse = self.client.post(reverse('secret:card_create_view'), card_data, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_empty_form_existing_secret(self) -&gt; None:\n        \"\"\"POST /segredo/cartoes/novo | authenticated user | empty form\"\"\"\n        card_data: dict = {'owner': self.user, 'name': 'Personal Main Card', 'card_type': 'deb', 'number': '4002892240028922', 'expiration_0': '11', 'expiration_1': '2028', 'cvv': '113', 'bank': 'nubank--', 'brand': 'mastercard--', 'slug': 'nubank--personal-main-card', 'owners_name': 'TEST USER'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:card_create_view'), card_data)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn(FEEDBACK_MSG, res.content.decode('utf-8'))\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Cart\u00e3o')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_valid_form(self) -&gt; None:\n        \"\"\"POST /segredo/cartoes/novo | authenticated user | valid form\"\"\"\n        card_data: dict = {'owner': self.user, 'name': 'Another Personal Main Card', 'card_type': 'deb', 'number': '4002892240028922', 'expiration_0': '11', 'expiration_1': '2028', 'cvv': '113', 'bank': 'nubank--', 'brand': 'mastercard--', 'slug': 'nubank--another-personal-main-card', 'owners_name': 'TEST USER'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:card_create_view'), card_data, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Cart\u00e3o')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-cardlistviewtestcase","title":"<code>class CardListViewTestCase</code>","text":"<p>Parents: <code>BaseCardTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class CardListViewTestCase(BaseCardTestCase):\n\n    def test_GET_list_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/ | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:card_list_view'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_list_view'))\n        res: HttpResponse = self.client.get(reverse('secret:card_list_view'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_list_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:card_list_view'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/list_view.html')\n        self.assertIn('object_list', res.context.keys())\n        self.assertEqual(len(res.context['object_list']), 1)\n        self.assertIn('model_name', res.context.keys())\n        self.assertEqual(res.context['model_name'], 'Cart\u00f5es')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-carddetailviewtestcase","title":"<code>class CardDetailViewTestCase</code>","text":"<p>Parents: <code>BaseCardTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class CardDetailViewTestCase(BaseCardTestCase):\n\n    def test_GET_detail_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt; | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:card_detail_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_detail_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        res: HttpResponse = self.client.get(reverse('secret:card_detail_view', kwargs={'slug': 'nubank--personal-main-card'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_detail_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt; | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:card_detail_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/Card/detail_view.html')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], Card.objects.get(owner=User.objects.first(), slug='nubank--personal-main-card'))\n        res: HttpResponse = self.client.get(reverse('secret:card_detail_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-cardupdateviewtestcase","title":"<code>class CardUpdateViewTestCase</code>","text":"<p>Parents: <code>BaseCardTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class CardUpdateViewTestCase(BaseCardTestCase):\n\n    def test_GET_update_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt;/editar | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:card_update_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_update_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        res: HttpResponse = self.client.get(reverse('secret:card_update_view', kwargs={'slug': 'nubank--personal-main-card'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_update_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt;/editar | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:card_update_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Edi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Cart\u00e3o')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], Card.objects.get(owner=User.objects.first(), slug='nubank--personal-main-card'))\n        res: HttpResponse = self.client.get(reverse('secret:card_update_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-carddeleteviewtestcase","title":"<code>class CardDeleteViewTestCase</code>","text":"<p>Parents: <code>BaseCardTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class CardDeleteViewTestCase(BaseCardTestCase):\n\n    def test_GET_delete_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt;/deletar | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:card_delete_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_delete_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        res: HttpResponse = self.client.get(reverse('secret:card_delete_view', kwargs={'slug': 'nubank--personal-main-card'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_delete_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt;/deletar | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:card_delete_view', kwargs={'slug': 'nubank--personal-main-card'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/delete_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Exclus\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Cart\u00e3o')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], Card.objects.get(owner=User.objects.first(), slug='nubank--personal-main-card'))\n        res: HttpResponse = self.client.get(reverse('secret:card_delete_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-basesecuritynotetestcase","title":"<code>class BaseSecurityNoteTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class BaseSecurityNoteTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n        SecurityNote.objects.create(owner=self.user, title='How to draw an apple', slug='how-to-draw-an-apple', content='Just draw an apple tree and erase the tree.')\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-securitynotecreateviewtestcase","title":"<code>class SecurityNoteCreateViewTestCase</code>","text":"<p>Parents: <code>BaseSecurityNoteTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecurityNoteCreateViewTestCase(BaseSecurityNoteTestCase):\n\n    def test_GET_create_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/novo | anonymous user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.get(reverse('secret:note_create_view'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_create_view'))\n        res: HttpResponse = self.client.get(reverse('secret:note_create_view'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_create_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/novo | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:note_create_view'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_empty_form(self) -&gt; None:\n        \"\"\"POST /segredo/anotacoes/novo | anonymous user | empty form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('secret:note_create_view'), {})\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_create_view'))\n        res: HttpResponse = self.client.post(reverse('secret:note_create_view'), {}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_empty_form(self) -&gt; None:\n        \"\"\"POST /segredo/anotacoes/novo | authenticated user | empty form\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:note_create_view'), {}, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn(EMPTY_POST_MSG, res.content.decode('utf-8'))\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_anonymous_user_empty_form_existing_secret(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/novo | anonymous user | existent secret slug\"\"\"\n        note_data: dict = {'owner': self.user, 'title': 'How to draw an apple', 'slug': 'how-to-draw-an-apple', 'content': 'Just draw an apple tree and erase the tree.'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        res: HttpResponse = self.client.post(reverse('secret:note_create_view'), note_data)\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_create_view'))\n        res: HttpResponse = self.client.post(reverse('secret:note_create_view'), note_data, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_empty_form_existing_secret(self) -&gt; None:\n        \"\"\"POST /segredo/anotacoes/novo | authenticated user | empty form\"\"\"\n        note_data: dict = {'owner': self.user, 'title': 'How to draw an apple', 'slug': 'how-to-draw-an-apple', 'content': 'Just draw an apple tree and erase the tree.'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:note_create_view'), note_data)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn(FEEDBACK_MSG, res.content.decode('utf-8'))\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n\n    def test_POST_authenticated_user_valid_form(self) -&gt; None:\n        \"\"\"POST /segredo/anotacoes/novo | authenticated user | valid form\"\"\"\n        note_data: dict = {'owner': self.user, 'title': 'How not to draw an apple', 'slug': 'how-not-to-draw-an-apple', 'content': 'Just not draw an apple tree and erase the tree.'}\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.post(reverse('secret:note_create_view'), note_data, follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-securitynotelistviewtestcase","title":"<code>class SecurityNoteListViewTestCase</code>","text":"<p>Parents: <code>BaseSecurityNoteTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecurityNoteListViewTestCase(BaseSecurityNoteTestCase):\n\n    def test_GET_list_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/ | anonymous user\"\"\"\n        res: HttpResponse = self.client.get(reverse('secret:note_list_view'))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_list_view'))\n        res: HttpResponse = self.client.get(reverse('secret:note_list_view'), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_list_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/ | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:note_list_view'))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/list_view.html')\n        self.assertIn('object_list', res.context.keys())\n        self.assertEqual(len(res.context['object_list']), 1)\n        self.assertIn('model_name', res.context.keys())\n        self.assertEqual(res.context['model_name'], 'Anota\u00e7\u00f5es')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-securitynotedetailviewtestcase","title":"<code>class SecurityNoteDetailViewTestCase</code>","text":"<p>Parents: <code>BaseSecurityNoteTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecurityNoteDetailViewTestCase(BaseSecurityNoteTestCase):\n\n    def test_GET_detail_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt; | anonymous user\"\"\"\n        res: HttpResponse = self.client.get(reverse('secret:note_detail_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_detail_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        res: HttpResponse = self.client.get(reverse('secret:note_detail_view', kwargs={'slug': 'how-to-draw-an-apple'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_detail_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt; | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:note_detail_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/Note/detail_view.html')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], SecurityNote.objects.get(owner=User.objects.first(), slug='how-to-draw-an-apple'))\n        res: HttpResponse = self.client.get(reverse('secret:note_detail_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-securitynoteupdateviewtestcase","title":"<code>class SecurityNoteUpdateViewTestCase</code>","text":"<p>Parents: <code>BaseSecurityNoteTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecurityNoteUpdateViewTestCase(BaseSecurityNoteTestCase):\n\n    def test_GET_update_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt;/editar | anonymous user\"\"\"\n        res: HttpResponse = self.client.get(reverse('secret:note_update_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_update_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        res: HttpResponse = self.client.get(reverse('secret:note_update_view', kwargs={'slug': 'how-to-draw-an-apple'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_update_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt;/editar | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:note_update_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/create_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Edi\u00e7\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], SecurityNote.objects.get(owner=User.objects.first(), slug='how-to-draw-an-apple'))\n        res: HttpResponse = self.client.get(reverse('secret:note_update_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#class-securitynotedeleteviewtestcase","title":"<code>class SecurityNoteDeleteViewTestCase</code>","text":"<p>Parents: <code>BaseSecurityNoteTestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class SecurityNoteDeleteViewTestCase(BaseSecurityNoteTestCase):\n\n    def test_GET_delete_anonymous_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt;/deletar | anonymous user\"\"\"\n        res: HttpResponse = self.client.get(reverse('secret:note_delete_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        self.assertEqual(res.status_code, 302)\n        self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_delete_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        res: HttpResponse = self.client.get(reverse('secret:note_delete_view', kwargs={'slug': 'how-to-draw-an-apple'}), follow=True)\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'account/login.html')\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n\n    def test_GET_delete_authenticated_user(self) -&gt; None:\n        \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt;/deletar | authenticated user\"\"\"\n        self.assertTrue(get_user(self.client).is_anonymous)\n        self.assertFalse(get_user(self.client).is_authenticated)\n        self.assertTrue(self.client.login(username='user', password='password'))\n        res: HttpResponse = self.client.get(reverse('secret:note_delete_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'secret/delete_view.html')\n        self.assertIn('action', res.context.keys())\n        self.assertEqual(res.context['action'], 'Exclus\u00e3o')\n        self.assertIn('model', res.context.keys())\n        self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n        self.assertIn('object', res.context.keys())\n        self.assertEqual(res.context['object'], SecurityNote.objects.get(owner=User.objects.first(), slug='how-to-draw-an-apple'))\n        res: HttpResponse = self.client.get(reverse('secret:note_delete_view', kwargs={'slug': 'lasagna--double-pizza'}))\n        self.assertEqual(res.status_code, 200)\n        self.assertTemplateUsed(res, 'err/error_template.html')\n        self.assertFalse(get_user(self.client).is_anonymous)\n        self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/tests/test_views.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    User.objects.create_user(username='user', password='password', email='user@email.com')\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_anonymous_user","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:index'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:index'))\n    res: HttpResponse = self.client.get(reverse('secret:index'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_authenticated_user","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:index'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/index.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-setup_1","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    LoginCredential.objects.create(owner=self.user, service='google--', name='Personal Main Account', slug='google--personal-main-account', thirdy_party_login=False, thirdy_party_login_name='-----', login='night_monkey123@gmail.com', password='ilovemenotyou')\n    LoginCredential.objects.create(owner=self.user, service='steam--', name='Little Fries', slug='steam--little-fries', thirdy_party_login=True, thirdy_party_login_name='Personal Main Account', login='-----', password='-----')\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_anonymous_user_1","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/nova | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:credential_create_view'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_create_view'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_create_view'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_authenticated_user_1","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/nova | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_create_view'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Credencial')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_anonymous_user_empty_form","title":"<code>def test_POST_anonymous_user_empty_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_empty_form(self) -&gt; None:\n    \"\"\"POST /segredo/credenciais/nova | anonymous user | empty form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), {})\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_create_view'))\n    res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), {}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_empty_form","title":"<code>def test_POST_authenticated_user_empty_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_empty_form(self) -&gt; None:\n    \"\"\"POST /segredo/credenciais/nova | authenticated user | empty form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), {}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn(EMPTY_POST_MSG, res.content.decode('utf-8'))\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Credencial')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_anonymous_user_empty_form_existing_secret","title":"<code>def test_POST_anonymous_user_empty_form_existing_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_empty_form_existing_secret(self) -&gt; None:\n    \"\"\"POST /segredo/credenciais/nova | anonymous user | existent secret slug\"\"\"\n    cred_data: dict = {'owner': self.user, 'service': 'google--', 'name': 'Personal Main Account', 'slug': 'google--personal-main-account', 'thirdy_party_login': False, 'thirdy_party_login_name': '-----', 'login': 'night_monkey123@gmail.com', 'password': 'ilovemenotyou'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), cred_data)\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_create_view'))\n    res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), cred_data, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_empty_form_existing_secret","title":"<code>def test_POST_authenticated_user_empty_form_existing_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_empty_form_existing_secret(self) -&gt; None:\n    \"\"\"POST /segredo/credenciais/nova | authenticated user | empty form\"\"\"\n    cred_data: dict = {'owner': self.user, 'service': 'google--', 'name': 'Personal Main Account', 'slug': 'google--personal-main-account', 'thirdy_party_login': False, 'thirdy_party_login_name': '-----', 'login': 'night_monkey123@gmail.com', 'password': 'ilovemenotyou'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), cred_data)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn(FEEDBACK_MSG, res.content.decode('utf-8'))\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Credencial')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_valid_form","title":"<code>def test_POST_authenticated_user_valid_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_valid_form(self) -&gt; None:\n    \"\"\"POST /segredo/credenciais/nova | authenticated user | valid form\"\"\"\n    cred_data: dict = {'owner': self.user, 'service': 'google--', 'name': 'Another Personal Main Account', 'slug': 'google--another-personal-main-account', 'thirdy_party_login': False, 'thirdy_party_login_name': '-----', 'login': 'night_monkey123@gmail.com', 'password': 'ilovemenotyou'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:credential_create_view'), cred_data, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Credencial')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_anonymous_user_2","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:credential_list_view'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_list_view'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_list_view'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_authenticated_user_2","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_list_view'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/list_view.html')\n    self.assertIn('object_list', res.context.keys())\n    self.assertEqual(len(res.context['object_list']), 2)\n    self.assertIn('model_name', res.context.keys())\n    self.assertEqual(res.context['model_name'], 'Credenciais')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_anonymous_user_3","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt; | anonymous user\"\"\"\n    res: HttpResponse = self.client.get(reverse('secret:credential_detail_view', kwargs={'slug': 'google--personal-main-account'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_detail_view', kwargs={'slug': 'google--personal-main-account'}))\n    res: HttpResponse = self.client.get(reverse('secret:credential_detail_view', kwargs={'slug': 'google--personal-main-account'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_authenticated_user_3","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt; | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_detail_view', kwargs={'slug': 'google--personal-main-account'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/Credential/detail_view.html')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], LoginCredential.objects.get(owner=User.objects.first(), slug='google--personal-main-account'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_detail_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_anonymous_user_4","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt;/editar | anonymous user\"\"\"\n    res: HttpResponse = self.client.get(reverse('secret:credential_update_view', kwargs={'slug': 'google--personal-main-account'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_update_view', kwargs={'slug': 'google--personal-main-account'}))\n    res: HttpResponse = self.client.get(reverse('secret:credential_update_view', kwargs={'slug': 'google--personal-main-account'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_authenticated_user_4","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt;/editar | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_update_view', kwargs={'slug': 'google--personal-main-account'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Edi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Credencial')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], LoginCredential.objects.get(owner=User.objects.first(), slug='google--personal-main-account'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_update_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_anonymous_user_5","title":"<code>def test_GET_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt;/deletar | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:credential_delete_view', kwargs={'slug': 'google--personal-main-account'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:credential_delete_view', kwargs={'slug': 'google--personal-main-account'}))\n    res: HttpResponse = self.client.get(reverse('secret:credential_delete_view', kwargs={'slug': 'google--personal-main-account'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_authenticated_user_5","title":"<code>def test_GET_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/credenciais/&lt;slug:slug&gt;/deletar | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_delete_view', kwargs={'slug': 'google--personal-main-account'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/delete_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Exclus\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Credencial')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], LoginCredential.objects.get(owner=User.objects.first(), slug='google--personal-main-account'))\n    res: HttpResponse = self.client.get(reverse('secret:credential_delete_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-setup_2","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    Card.objects.create(owner=self.user, name='Personal Main Card', card_type='deb', number='4002892240028922', expiration=Month(2028, 11), cvv='113', bank='nubank--', brand='mastercard--', slug='nubank--personal-main-card', owners_name='TEST USER')\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_create_anonymous_user","title":"<code>def test_GET_create_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_create_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/novo | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:card_create_view'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_create_view'))\n    res: HttpResponse = self.client.get(reverse('secret:card_create_view'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_create_authenticated_user","title":"<code>def test_GET_create_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_create_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/novo | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:card_create_view'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Cart\u00e3o')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_anonymous_user_empty_form_1","title":"<code>def test_POST_anonymous_user_empty_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_empty_form(self) -&gt; None:\n    \"\"\"POST /segredo/cartoes/novo | anonymous user | empty form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('secret:card_create_view'), {})\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_create_view'))\n    res: HttpResponse = self.client.post(reverse('secret:card_create_view'), {}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_empty_form_1","title":"<code>def test_POST_authenticated_user_empty_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_empty_form(self) -&gt; None:\n    \"\"\"POST /segredo/cartoes/novo | authenticated user | empty form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:card_create_view'), {}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn(EMPTY_POST_MSG, res.content.decode('utf-8'))\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Cart\u00e3o')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_anonymous_user_empty_form_existing_secret_1","title":"<code>def test_POST_anonymous_user_empty_form_existing_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_empty_form_existing_secret(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/novo | anonymous user | existent secret slug\"\"\"\n    card_data: dict = {'owner': self.user, 'name': 'Personal Main Card', 'card_type': 'deb', 'number': '4002892240028922', 'expiration_0': '11', 'expiration_1': '2028', 'cvv': '113', 'bank': 'nubank--', 'brand': 'mastercard--', 'slug': 'nubank--personal-main-card', 'owners_name': 'TEST USER'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('secret:card_create_view'), card_data)\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_create_view'))\n    res: HttpResponse = self.client.post(reverse('secret:card_create_view'), card_data, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_empty_form_existing_secret_1","title":"<code>def test_POST_authenticated_user_empty_form_existing_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_empty_form_existing_secret(self) -&gt; None:\n    \"\"\"POST /segredo/cartoes/novo | authenticated user | empty form\"\"\"\n    card_data: dict = {'owner': self.user, 'name': 'Personal Main Card', 'card_type': 'deb', 'number': '4002892240028922', 'expiration_0': '11', 'expiration_1': '2028', 'cvv': '113', 'bank': 'nubank--', 'brand': 'mastercard--', 'slug': 'nubank--personal-main-card', 'owners_name': 'TEST USER'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:card_create_view'), card_data)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn(FEEDBACK_MSG, res.content.decode('utf-8'))\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Cart\u00e3o')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_valid_form_1","title":"<code>def test_POST_authenticated_user_valid_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_valid_form(self) -&gt; None:\n    \"\"\"POST /segredo/cartoes/novo | authenticated user | valid form\"\"\"\n    card_data: dict = {'owner': self.user, 'name': 'Another Personal Main Card', 'card_type': 'deb', 'number': '4002892240028922', 'expiration_0': '11', 'expiration_1': '2028', 'cvv': '113', 'bank': 'nubank--', 'brand': 'mastercard--', 'slug': 'nubank--another-personal-main-card', 'owners_name': 'TEST USER'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:card_create_view'), card_data, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Cart\u00e3o')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_list_anonymous_user","title":"<code>def test_GET_list_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_list_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/ | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:card_list_view'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_list_view'))\n    res: HttpResponse = self.client.get(reverse('secret:card_list_view'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_list_authenticated_user","title":"<code>def test_GET_list_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_list_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:card_list_view'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/list_view.html')\n    self.assertIn('object_list', res.context.keys())\n    self.assertEqual(len(res.context['object_list']), 1)\n    self.assertIn('model_name', res.context.keys())\n    self.assertEqual(res.context['model_name'], 'Cart\u00f5es')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_detail_anonymous_user","title":"<code>def test_GET_detail_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_detail_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt; | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:card_detail_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_detail_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    res: HttpResponse = self.client.get(reverse('secret:card_detail_view', kwargs={'slug': 'nubank--personal-main-card'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_detail_authenticated_user","title":"<code>def test_GET_detail_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_detail_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt; | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:card_detail_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/Card/detail_view.html')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], Card.objects.get(owner=User.objects.first(), slug='nubank--personal-main-card'))\n    res: HttpResponse = self.client.get(reverse('secret:card_detail_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_update_anonymous_user","title":"<code>def test_GET_update_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_update_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt;/editar | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:card_update_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_update_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    res: HttpResponse = self.client.get(reverse('secret:card_update_view', kwargs={'slug': 'nubank--personal-main-card'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_update_authenticated_user","title":"<code>def test_GET_update_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_update_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt;/editar | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:card_update_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Edi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Cart\u00e3o')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], Card.objects.get(owner=User.objects.first(), slug='nubank--personal-main-card'))\n    res: HttpResponse = self.client.get(reverse('secret:card_update_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_delete_anonymous_user","title":"<code>def test_GET_delete_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_delete_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt;/deletar | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:card_delete_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:card_delete_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    res: HttpResponse = self.client.get(reverse('secret:card_delete_view', kwargs={'slug': 'nubank--personal-main-card'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_delete_authenticated_user","title":"<code>def test_GET_delete_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_delete_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/cartoes/&lt;slug:slug&gt;/deletar | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:card_delete_view', kwargs={'slug': 'nubank--personal-main-card'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/delete_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Exclus\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Cart\u00e3o')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], Card.objects.get(owner=User.objects.first(), slug='nubank--personal-main-card'))\n    res: HttpResponse = self.client.get(reverse('secret:card_delete_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-setup_3","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.user: User = User.objects.create_user(username='user', password='password', email='user@email.com')\n    SecurityNote.objects.create(owner=self.user, title='How to draw an apple', slug='how-to-draw-an-apple', content='Just draw an apple tree and erase the tree.')\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_create_anonymous_user_1","title":"<code>def test_GET_create_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_create_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/novo | anonymous user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.get(reverse('secret:note_create_view'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_create_view'))\n    res: HttpResponse = self.client.get(reverse('secret:note_create_view'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_create_authenticated_user_1","title":"<code>def test_GET_create_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_create_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/novo | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:note_create_view'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_anonymous_user_empty_form_2","title":"<code>def test_POST_anonymous_user_empty_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_empty_form(self) -&gt; None:\n    \"\"\"POST /segredo/anotacoes/novo | anonymous user | empty form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('secret:note_create_view'), {})\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_create_view'))\n    res: HttpResponse = self.client.post(reverse('secret:note_create_view'), {}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_empty_form_2","title":"<code>def test_POST_authenticated_user_empty_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_empty_form(self) -&gt; None:\n    \"\"\"POST /segredo/anotacoes/novo | authenticated user | empty form\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:note_create_view'), {}, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn(EMPTY_POST_MSG, res.content.decode('utf-8'))\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_anonymous_user_empty_form_existing_secret_2","title":"<code>def test_POST_anonymous_user_empty_form_existing_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_anonymous_user_empty_form_existing_secret(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/novo | anonymous user | existent secret slug\"\"\"\n    note_data: dict = {'owner': self.user, 'title': 'How to draw an apple', 'slug': 'how-to-draw-an-apple', 'content': 'Just draw an apple tree and erase the tree.'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    res: HttpResponse = self.client.post(reverse('secret:note_create_view'), note_data)\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_create_view'))\n    res: HttpResponse = self.client.post(reverse('secret:note_create_view'), note_data, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_empty_form_existing_secret_2","title":"<code>def test_POST_authenticated_user_empty_form_existing_secret</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_empty_form_existing_secret(self) -&gt; None:\n    \"\"\"POST /segredo/anotacoes/novo | authenticated user | empty form\"\"\"\n    note_data: dict = {'owner': self.user, 'title': 'How to draw an apple', 'slug': 'how-to-draw-an-apple', 'content': 'Just draw an apple tree and erase the tree.'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:note_create_view'), note_data)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn(FEEDBACK_MSG, res.content.decode('utf-8'))\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_post_authenticated_user_valid_form_2","title":"<code>def test_POST_authenticated_user_valid_form</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_POST_authenticated_user_valid_form(self) -&gt; None:\n    \"\"\"POST /segredo/anotacoes/novo | authenticated user | valid form\"\"\"\n    note_data: dict = {'owner': self.user, 'title': 'How not to draw an apple', 'slug': 'how-not-to-draw-an-apple', 'content': 'Just not draw an apple tree and erase the tree.'}\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.post(reverse('secret:note_create_view'), note_data, follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Adi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_list_anonymous_user_1","title":"<code>def test_GET_list_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_list_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/ | anonymous user\"\"\"\n    res: HttpResponse = self.client.get(reverse('secret:note_list_view'))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_list_view'))\n    res: HttpResponse = self.client.get(reverse('secret:note_list_view'), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_list_authenticated_user_1","title":"<code>def test_GET_list_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_list_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/ | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:note_list_view'))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/list_view.html')\n    self.assertIn('object_list', res.context.keys())\n    self.assertEqual(len(res.context['object_list']), 1)\n    self.assertIn('model_name', res.context.keys())\n    self.assertEqual(res.context['model_name'], 'Anota\u00e7\u00f5es')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_detail_anonymous_user_1","title":"<code>def test_GET_detail_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_detail_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt; | anonymous user\"\"\"\n    res: HttpResponse = self.client.get(reverse('secret:note_detail_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_detail_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    res: HttpResponse = self.client.get(reverse('secret:note_detail_view', kwargs={'slug': 'how-to-draw-an-apple'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_detail_authenticated_user_1","title":"<code>def test_GET_detail_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_detail_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt; | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:note_detail_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/Note/detail_view.html')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], SecurityNote.objects.get(owner=User.objects.first(), slug='how-to-draw-an-apple'))\n    res: HttpResponse = self.client.get(reverse('secret:note_detail_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_update_anonymous_user_1","title":"<code>def test_GET_update_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_update_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt;/editar | anonymous user\"\"\"\n    res: HttpResponse = self.client.get(reverse('secret:note_update_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_update_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    res: HttpResponse = self.client.get(reverse('secret:note_update_view', kwargs={'slug': 'how-to-draw-an-apple'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_update_authenticated_user_1","title":"<code>def test_GET_update_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_update_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt;/editar | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:note_update_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/create_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Edi\u00e7\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], SecurityNote.objects.get(owner=User.objects.first(), slug='how-to-draw-an-apple'))\n    res: HttpResponse = self.client.get(reverse('secret:note_update_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_delete_anonymous_user_1","title":"<code>def test_GET_delete_anonymous_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_delete_anonymous_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt;/deletar | anonymous user\"\"\"\n    res: HttpResponse = self.client.get(reverse('secret:note_delete_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    self.assertEqual(res.status_code, 302)\n    self.assertRedirects(res, reverse('account:login') + '?next=' + reverse('secret:note_delete_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    res: HttpResponse = self.client.get(reverse('secret:note_delete_view', kwargs={'slug': 'how-to-draw-an-apple'}), follow=True)\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'account/login.html')\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#def-test_get_delete_authenticated_user_1","title":"<code>def test_GET_delete_authenticated_user</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_GET_delete_authenticated_user(self) -&gt; None:\n    \"\"\"GET /segredo/anotacoes/&lt;slug:slug&gt;/deletar | authenticated user\"\"\"\n    self.assertTrue(get_user(self.client).is_anonymous)\n    self.assertFalse(get_user(self.client).is_authenticated)\n    self.assertTrue(self.client.login(username='user', password='password'))\n    res: HttpResponse = self.client.get(reverse('secret:note_delete_view', kwargs={'slug': 'how-to-draw-an-apple'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'secret/delete_view.html')\n    self.assertIn('action', res.context.keys())\n    self.assertEqual(res.context['action'], 'Exclus\u00e3o')\n    self.assertIn('model', res.context.keys())\n    self.assertEqual(res.context['model'], 'Anota\u00e7\u00e3o')\n    self.assertIn('object', res.context.keys())\n    self.assertEqual(res.context['object'], SecurityNote.objects.get(owner=User.objects.first(), slug='how-to-draw-an-apple'))\n    res: HttpResponse = self.client.get(reverse('secret:note_delete_view', kwargs={'slug': 'lasagna--double-pizza'}))\n    self.assertEqual(res.status_code, 200)\n    self.assertTemplateUsed(res, 'err/error_template.html')\n    self.assertFalse(get_user(self.client).is_anonymous)\n    self.assertTrue(get_user(self.client).is_authenticated)\n</code></pre>"},{"location":"Codebase/secret/tests/test_views.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/secret/tests/test_xor.py/","title":"File: <code>test_xor.py</code>","text":"<p>Path: <code>SWARDEN.secret.tests</code></p>"},{"location":"Codebase/secret/tests/test_xor.py/#imports","title":"Imports","text":""},{"location":"Codebase/secret/tests/test_xor.py/#import-queue","title":"<code>import queue</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import queue\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#import-threading","title":"<code>import threading</code>","text":"<p>Path: <code>None</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>import threading\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#import-user","title":"<code>import User</code>","text":"<p>Path: <code>account.models</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from account.models import User\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#import-testcase","title":"<code>import TestCase</code>","text":"<p>Path: <code>django.test</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from django.test import TestCase\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#import-xor","title":"<code>import xor</code>","text":"<p>Path: <code>utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from utils import xor\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/secret/tests/test_xor.py/#classes","title":"Classes","text":""},{"location":"Codebase/secret/tests/test_xor.py/#class-xortestcase","title":"<code>class XORTestCase</code>","text":"<p>Parents: <code>TestCase</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>class XORTestCase(TestCase):\n\n    def setUp(self) -&gt; None:\n        self.password = User.objects.create_user(username='user', password='testing_password', email='user@example.com').password\n        self.q: queue.Queue = queue.Queue()\n        self.num = 100000\n\n    def test_xor_return_values(self) -&gt; None:\n        \"\"\"Tests raises and return values\"\"\"\n        self.assertIsNone(xor(None, self.password[21:]))\n        self.assertEqual(xor('', self.password[21:]), '')\n        self.assertEqual(xor(5, self.password[21:]), 5)\n\n    def test_xor_null_value(self) -&gt; None:\n        \"\"\"Tests return values\"\"\"\n        with open('secret/tests/sample.txt') as txt:\n            lines: list[str] = txt.readlines()\n            for line in lines:\n                data: str = line.strip()\n                encrypted_data: str = xor(data, self.password[21:])\n                decrypted_data: str = xor(encrypted_data, self.password[21:], encrypt=False)\n                self.q.put(encrypted_data)\n                self.q.put(decrypted_data)\n        threading.Thread(target=self.process_xor, daemon=True).start()\n        self.q.join()\n\n    def process_xor(self) -&gt; None:\n        while True:\n            data = self.q.get()\n            self.assertNotIn('\\x00', data)\n            self.assertTrue(all(map(lambda x: x in range(1114112), [ord(i) for i in data])))\n            self.q.task_done()\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#functions","title":"Functions","text":""},{"location":"Codebase/secret/tests/test_xor.py/#def-setup","title":"<code>def setUp</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def setUp(self) -&gt; None:\n    self.password = User.objects.create_user(username='user', password='testing_password', email='user@example.com').password\n    self.q: queue.Queue = queue.Queue()\n    self.num = 100000\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#def-test_xor_return_values","title":"<code>def test_xor_return_values</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_xor_return_values(self) -&gt; None:\n    \"\"\"Tests raises and return values\"\"\"\n    self.assertIsNone(xor(None, self.password[21:]))\n    self.assertEqual(xor('', self.password[21:]), '')\n    self.assertEqual(xor(5, self.password[21:]), 5)\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#def-test_xor_null_value","title":"<code>def test_xor_null_value</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def test_xor_null_value(self) -&gt; None:\n    \"\"\"Tests return values\"\"\"\n    with open('secret/tests/sample.txt') as txt:\n        lines: list[str] = txt.readlines()\n        for line in lines:\n            data: str = line.strip()\n            encrypted_data: str = xor(data, self.password[21:])\n            decrypted_data: str = xor(encrypted_data, self.password[21:], encrypt=False)\n            self.q.put(encrypted_data)\n            self.q.put(decrypted_data)\n    threading.Thread(target=self.process_xor, daemon=True).start()\n    self.q.join()\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#def-process_xor","title":"<code>def process_xor</code>","text":"<p>Type: <code>...</code></p> <p>Return Type: <code>None</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>self: Unknown</code></p> <p>Kwargs: <code>None</code></p> SNIPPET Python<pre><code>def process_xor(self) -&gt; None:\n    while True:\n        data = self.q.get()\n        self.assertNotIn('\\x00', data)\n        self.assertTrue(all(map(lambda x: x in range(1114112), [ord(i) for i in data])))\n        self.q.task_done()\n</code></pre>"},{"location":"Codebase/secret/tests/test_xor.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"}]}